Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlockcompact.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nMPC_Project_FORCESPRO : A fast customized optimization solver.\n\nCopyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\n\n\nThis software is intended for simulation and testing purposes only. \nUse of this software for any commercial purpose is prohibited.\n\nThis program is distributed in the hope that it will be useful.\nEMBOTECH makes NO WARRANTIES with respect to the use of the software \nwithout even the implied warranty of MERCHANTABILITY or FITNESS FOR A \nPARTICULAR PURPOSE. \n\nEMBOTECH shall not have any liability for any damage arising from the use\nof the software.\n\nThis Agreement shall exclusively be governed by and interpreted in \naccordance with the laws of Switzerland, excluding its principles\nof conflict of laws. The Courts of Zurich-City shall have exclusive \njurisdiction in case of any dispute.\n\n*/\n\n\n#define S_FUNCTION_LEVEL 2\n#define S_FUNCTION_NAME MPC_Project_FORCESPRO_simulinkBlockcompact\n\n#include \"simstruc.h\"\n\n/* For compatibility with Microsoft Visual Studio 2015 */\n#if _MSC_VER >= 1900\nFILE _iob[3];\nFILE * __cdecl __iob_func(void)\n{\n\t_iob[0] = *stdin;\n\t_iob[1] = *stdout;\n\t_iob[2] = *stderr;\n\treturn _iob;\n}\n#endif\n\n/* include FORCESPRO functions and defs */\n#include \"../include/MPC_Project_FORCESPRO.h\" \n\n/* SYSTEM INCLUDES FOR TIMING ------------------------------------------ */\n\n\n#if defined(MATLAB_MEX_FILE)\n#include \"tmwtypes.h\"\n#include \"simstruc_types.h\"\n#else\n#include \"rtwtypes.h\"\n#endif\n\ntypedef MPC_Project_FORCESPROinterface_float MPC_Project_FORCESPROnmpc_float;\n\n\n\n\n\n/*====================*\n * S-function methods *\n *====================*/\n/* Function: mdlInitializeSizes =========================================\n * Abstract:\n *   Setup sizes of the various vectors.\n */\nstatic void mdlInitializeSizes(SimStruct *S)\n{\n\n    DECL_AND_INIT_DIMSINFO(inputDimsInfo);\n    DECL_AND_INIT_DIMSINFO(outputDimsInfo);\n    ssSetNumSFcnParams(S, 0);\n    if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) \n\t{\n\t\treturn; /* Parameter mismatch will be reported by Simulink */\n    }\n\n\t/* initialize size of continuous and discrete states to zero */\n    ssSetNumContStates(S, 0);\n    ssSetNumDiscStates(S, 0);\n\n\t/* initialize input ports - there are 2 in total */\n    if (!ssSetNumInputPorts(S, 2)) return;\n    \t\n\t/* Input Port 0 */\n    ssSetInputPortMatrixDimensions(S,  0, 3, 245);\n    ssSetInputPortDataType(S, 0, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 0, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 0, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/\n\t\n\t/* Input Port 1 */\n    ssSetInputPortMatrixDimensions(S,  1, 3, 1);\n    ssSetInputPortDataType(S, 1, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 1, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 1, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 1, 1); /*direct input signal access*/\n \n\n\n\t/* initialize output ports - there are 1 in total */\n    if (!ssSetNumOutputPorts(S, 1)) return;    \n\t\t\n\t/* Output Port 0 */\n    ssSetOutputPortMatrixDimensions(S,  0, 50, 1);\n    ssSetOutputPortDataType(S, 0, SS_DOUBLE);\n    ssSetOutputPortComplexSignal(S, 0, COMPLEX_NO); /* no complex signals suppported */\n\n\n\t/* set sampling time */\n    ssSetNumSampleTimes(S, 1);\n\n\t/* set internal memory of block */\n    ssSetNumRWork(S, 0);\n    ssSetNumIWork(S, 0);\n    ssSetNumPWork(S, 0);\n    ssSetNumModes(S, 0);\n    ssSetNumNonsampledZCs(S, 0);\n\n    /* Take care when specifying exception free code - see sfuntmpl_doc.c */\n\t/* SS_OPTION_USE_TLC_WITH_ACCELERATOR removed */ \n\t/* SS_OPTION_USE_TLC_WITH_ACCELERATOR removed */ \n    /* ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |\n\t\t             SS_OPTION_WORKS_WITH_CODE_REUSE)); */\n\tssSetOptions(S, SS_OPTION_EXCEPTION_FREE_CODE );\n\n\t\n}\n\n#if defined(MATLAB_MEX_FILE)\n#define MDL_SET_INPUT_PORT_DIMENSION_INFO\nstatic void mdlSetInputPortDimensionInfo(SimStruct        *S, \n                                         int_T            port,\n                                         const DimsInfo_T *dimsInfo)\n{\n    if(!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;\n}\n#endif\n\n#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO\n#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO)\nstatic void mdlSetOutputPortDimensionInfo(SimStruct        *S, \n                                          int_T            port, \n                                          const DimsInfo_T *dimsInfo)\n{\n    if (!ssSetOutputPortDimensionInfo(S, port, dimsInfo)) return;\n}\n#endif\n# define MDL_SET_INPUT_PORT_FRAME_DATA\nstatic void mdlSetInputPortFrameData(SimStruct  *S, \n                                     int_T      port,\n                                     Frame_T    frameData)\n{\n    ssSetInputPortFrameData(S, port, frameData);\n}\n/* Function: mdlInitializeSampleTimes =========================================\n * Abstract:\n *    Specifiy  the sample time.\n */\nstatic void mdlInitializeSampleTimes(SimStruct *S)\n{\n    ssSetSampleTime(S, 0, INHERITED_SAMPLE_TIME);\n    ssSetOffsetTime(S, 0, 0.0);\n}\n\n#define MDL_SET_INPUT_PORT_DATA_TYPE\nstatic void mdlSetInputPortDataType(SimStruct *S, solver_int32_default port, DTypeId dType)\n{\n    ssSetInputPortDataType( S, 0, dType);\n}\n#define MDL_SET_OUTPUT_PORT_DATA_TYPE\nstatic void mdlSetOutputPortDataType(SimStruct *S, solver_int32_default port, DTypeId dType)\n{\n    ssSetOutputPortDataType(S, 0, dType);\n}\n\n#define MDL_SET_DEFAULT_PORT_DATA_TYPES\nstatic void mdlSetDefaultPortDataTypes(SimStruct *S)\n{\n    ssSetInputPortDataType( S, 0, SS_DOUBLE);\n    ssSetOutputPortDataType(S, 0, SS_DOUBLE);\n}\n\n\n\n\n\n/* Function: mdlOutputs =======================================================\n *\n*/\nstatic void mdlOutputs(SimStruct *S, int_T tid)\n{\n\tsolver_int32_default i, j, k;\n\t\n\t/* file pointer for printing */\n\tFILE *fp = NULL;\n\n\t/* Simulink data */\n\tconst real_T *C = (const real_T*) ssGetInputPortSignal(S,0);\n\tconst real_T *xinit = (const real_T*) ssGetInputPortSignal(S,1);\n\t\n    real_T *outputs = (real_T*) ssGetOutputPortSignal(S,0);\n\t\n\t\n\n\t/* Solver data */\n\tstatic MPC_Project_FORCESPRO_params params;\n\tstatic MPC_Project_FORCESPRO_output output;\n\tstatic MPC_Project_FORCESPRO_info info;\t\n\tsolver_int32_default exitflag;\n\n\t/* Extra NMPC data */\n\t\n\n\t/* Copy inputs */\n\tfor( i=0; i<3; i++)\n\t{ \n\t\tparams.xinit[i] = (double) xinit[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model1[i] = (double) C[i]; \n\t}\n\n\tj=15; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model2[i] = (double) C[j++]; \n\t}\n\n\tj=30; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model3[i] = (double) C[j++]; \n\t}\n\n\tj=45; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model4[i] = (double) C[j++]; \n\t}\n\n\tj=60; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model5[i] = (double) C[j++]; \n\t}\n\n\tj=75; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model6[i] = (double) C[j++]; \n\t}\n\n\tj=90; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model7[i] = (double) C[j++]; \n\t}\n\n\tj=105; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model8[i] = (double) C[j++]; \n\t}\n\n\tj=120; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model9[i] = (double) C[j++]; \n\t}\n\n\tj=135; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model10[i] = (double) C[j++]; \n\t}\n\n\tj=150; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model11[i] = (double) C[j++]; \n\t}\n\n\tj=165; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model12[i] = (double) C[j++]; \n\t}\n\n\tj=180; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model13[i] = (double) C[j++]; \n\t}\n\n\tj=195; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model14[i] = (double) C[j++]; \n\t}\n\n\tj=210; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model15[i] = (double) C[j++]; \n\t}\n\n\tj=225; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model16[i] = (double) C[j++]; \n\t}\n\n\tj=240; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model17[i] = (double) C[j++]; \n\t}\n\n\tj=255; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model18[i] = (double) C[j++]; \n\t}\n\n\tj=270; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model19[i] = (double) C[j++]; \n\t}\n\n\tj=285; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model20[i] = (double) C[j++]; \n\t}\n\n\tj=300; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model21[i] = (double) C[j++]; \n\t}\n\n\tj=315; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model22[i] = (double) C[j++]; \n\t}\n\n\tj=330; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model23[i] = (double) C[j++]; \n\t}\n\n\tj=345; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model24[i] = (double) C[j++]; \n\t}\n\n\tj=360; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model25[i] = (double) C[j++]; \n\t}\n\n\tj=375; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model26[i] = (double) C[j++]; \n\t}\n\n\tj=390; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model27[i] = (double) C[j++]; \n\t}\n\n\tj=405; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model28[i] = (double) C[j++]; \n\t}\n\n\tj=420; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model29[i] = (double) C[j++]; \n\t}\n\n\tj=435; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model30[i] = (double) C[j++]; \n\t}\n\n\tj=450; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model31[i] = (double) C[j++]; \n\t}\n\n\tj=465; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model32[i] = (double) C[j++]; \n\t}\n\n\tj=480; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model33[i] = (double) C[j++]; \n\t}\n\n\tj=495; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model34[i] = (double) C[j++]; \n\t}\n\n\tj=510; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model35[i] = (double) C[j++]; \n\t}\n\n\tj=525; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model36[i] = (double) C[j++]; \n\t}\n\n\tj=540; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model37[i] = (double) C[j++]; \n\t}\n\n\tj=555; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model38[i] = (double) C[j++]; \n\t}\n\n\tj=570; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model39[i] = (double) C[j++]; \n\t}\n\n\tj=585; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model40[i] = (double) C[j++]; \n\t}\n\n\tj=600; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model41[i] = (double) C[j++]; \n\t}\n\n\tj=615; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model42[i] = (double) C[j++]; \n\t}\n\n\tj=630; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model43[i] = (double) C[j++]; \n\t}\n\n\tj=645; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model44[i] = (double) C[j++]; \n\t}\n\n\tj=660; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model45[i] = (double) C[j++]; \n\t}\n\n\tj=675; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model46[i] = (double) C[j++]; \n\t}\n\n\tj=690; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model47[i] = (double) C[j++]; \n\t}\n\n\tj=705; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model48[i] = (double) C[j++]; \n\t}\n\n\tj=720; \n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model49[i] = (double) C[j++]; \n\t}\n\n\t\n\n\t\n\n    #if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0\n\t\t/* Prepare file for printfs */\n        fp = fopen(\"stdout_temp\",\"w+\");\n\t\tif( fp == NULL ) \n\t\t{\n\t\t\tmexErrMsgTxt(\"freopen of stdout did not work.\");\n\t\t}\n\t\trewind(fp);\n\t#endif\n\n\t/* Call solver */\n\texitflag = MPC_Project_FORCESPRO_solve(&params, &output, &info, fp );\n\n\t#if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0\n\t\t/* Read contents of printfs printed to file */\n\t\trewind(fp);\n\t\twhile( (i = fgetc(fp)) != EOF ) \n\t\t{\n\t\t\tssPrintf(\"%c\",i);\n\t\t}\n\t\tfclose(fp);\n\t#endif\n\n\t\n\n\t/* Copy outputs */\n\tfor( i=0; i<50; i++)\n\t{ \n\t\toutputs[i] = (real_T) output.output[i]; \n\t}\n\n\t\n}\n\n\n\n\n\n/* Function: mdlTerminate =====================================================\n * Abstract:\n *    In this function, you should perform any actions that are necessary\n *    at the termination of a simulation.  For example, if memory was\n *    allocated in mdlStart, this is the place to free it.\n */\nstatic void mdlTerminate(SimStruct *S)\n{\n}\n#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */\n#include \"simulink.c\"      /* MEX-file interface mechanism */\n#else\n#include \"cg_sfun.h\"       /* Code generation registration function */\n#endif\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlockcompact.c b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlockcompact.c
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlockcompact.c	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlockcompact.c	(date 1646676210265)
@@ -28,17 +28,7 @@
 
 #include "simstruc.h"
 
-/* For compatibility with Microsoft Visual Studio 2015 */
-#if _MSC_VER >= 1900
-FILE _iob[3];
-FILE * __cdecl __iob_func(void)
-{
-	_iob[0] = *stdin;
-	_iob[1] = *stdout;
-	_iob[2] = *stderr;
-	return _iob;
-}
-#endif
+
 
 /* include FORCESPRO functions and defs */
 #include "../include/MPC_Project_FORCESPRO.h" 
@@ -85,7 +75,7 @@
     if (!ssSetNumInputPorts(S, 2)) return;
     	
 	/* Input Port 0 */
-    ssSetInputPortMatrixDimensions(S,  0, 3, 245);
+    ssSetInputPortMatrixDimensions(S,  0, 3, 45);
     ssSetInputPortDataType(S, 0, SS_DOUBLE);
     ssSetInputPortComplexSignal(S, 0, COMPLEX_NO); /* no complex signals suppported */
     ssSetInputPortDirectFeedThrough(S, 0, 1); /* Feedthrough enabled */
@@ -273,246 +263,6 @@
 		params.linear_model9[i] = (double) C[j++]; 
 	}
 
-	j=135; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model10[i] = (double) C[j++]; 
-	}
-
-	j=150; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model11[i] = (double) C[j++]; 
-	}
-
-	j=165; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model12[i] = (double) C[j++]; 
-	}
-
-	j=180; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model13[i] = (double) C[j++]; 
-	}
-
-	j=195; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model14[i] = (double) C[j++]; 
-	}
-
-	j=210; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model15[i] = (double) C[j++]; 
-	}
-
-	j=225; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model16[i] = (double) C[j++]; 
-	}
-
-	j=240; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model17[i] = (double) C[j++]; 
-	}
-
-	j=255; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model18[i] = (double) C[j++]; 
-	}
-
-	j=270; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model19[i] = (double) C[j++]; 
-	}
-
-	j=285; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model20[i] = (double) C[j++]; 
-	}
-
-	j=300; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model21[i] = (double) C[j++]; 
-	}
-
-	j=315; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model22[i] = (double) C[j++]; 
-	}
-
-	j=330; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model23[i] = (double) C[j++]; 
-	}
-
-	j=345; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model24[i] = (double) C[j++]; 
-	}
-
-	j=360; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model25[i] = (double) C[j++]; 
-	}
-
-	j=375; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model26[i] = (double) C[j++]; 
-	}
-
-	j=390; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model27[i] = (double) C[j++]; 
-	}
-
-	j=405; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model28[i] = (double) C[j++]; 
-	}
-
-	j=420; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model29[i] = (double) C[j++]; 
-	}
-
-	j=435; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model30[i] = (double) C[j++]; 
-	}
-
-	j=450; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model31[i] = (double) C[j++]; 
-	}
-
-	j=465; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model32[i] = (double) C[j++]; 
-	}
-
-	j=480; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model33[i] = (double) C[j++]; 
-	}
-
-	j=495; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model34[i] = (double) C[j++]; 
-	}
-
-	j=510; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model35[i] = (double) C[j++]; 
-	}
-
-	j=525; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model36[i] = (double) C[j++]; 
-	}
-
-	j=540; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model37[i] = (double) C[j++]; 
-	}
-
-	j=555; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model38[i] = (double) C[j++]; 
-	}
-
-	j=570; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model39[i] = (double) C[j++]; 
-	}
-
-	j=585; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model40[i] = (double) C[j++]; 
-	}
-
-	j=600; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model41[i] = (double) C[j++]; 
-	}
-
-	j=615; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model42[i] = (double) C[j++]; 
-	}
-
-	j=630; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model43[i] = (double) C[j++]; 
-	}
-
-	j=645; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model44[i] = (double) C[j++]; 
-	}
-
-	j=660; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model45[i] = (double) C[j++]; 
-	}
-
-	j=675; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model46[i] = (double) C[j++]; 
-	}
-
-	j=690; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model47[i] = (double) C[j++]; 
-	}
-
-	j=705; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model48[i] = (double) C[j++]; 
-	}
-
-	j=720; 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model49[i] = (double) C[j++]; 
-	}
-
 	
 
 	
Index: model/MPC_Project_FORCESPRO/MPC_Project_FORCESPRO.m
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>% MPC_Project_FORCESPRO - a fast solver generated by FORCESPRO v5.1.0\n%\n%   OUTPUT = MPC_Project_FORCESPRO(PARAMS) solves a multistage problem\n%   subject to the parameters supplied in the following struct:\n%       PARAMS.xinit - column vector of length 3\n%       PARAMS.linear_model1 - matrix of size [3 x 5]\n%       PARAMS.linear_model2 - matrix of size [3 x 5]\n%       PARAMS.linear_model3 - matrix of size [3 x 5]\n%       PARAMS.linear_model4 - matrix of size [3 x 5]\n%       PARAMS.linear_model5 - matrix of size [3 x 5]\n%       PARAMS.linear_model6 - matrix of size [3 x 5]\n%       PARAMS.linear_model7 - matrix of size [3 x 5]\n%       PARAMS.linear_model8 - matrix of size [3 x 5]\n%       PARAMS.linear_model9 - matrix of size [3 x 5]\n%       PARAMS.linear_model10 - matrix of size [3 x 5]\n%       PARAMS.linear_model11 - matrix of size [3 x 5]\n%       PARAMS.linear_model12 - matrix of size [3 x 5]\n%       PARAMS.linear_model13 - matrix of size [3 x 5]\n%       PARAMS.linear_model14 - matrix of size [3 x 5]\n%       PARAMS.linear_model15 - matrix of size [3 x 5]\n%       PARAMS.linear_model16 - matrix of size [3 x 5]\n%       PARAMS.linear_model17 - matrix of size [3 x 5]\n%       PARAMS.linear_model18 - matrix of size [3 x 5]\n%       PARAMS.linear_model19 - matrix of size [3 x 5]\n%       PARAMS.linear_model20 - matrix of size [3 x 5]\n%       PARAMS.linear_model21 - matrix of size [3 x 5]\n%       PARAMS.linear_model22 - matrix of size [3 x 5]\n%       PARAMS.linear_model23 - matrix of size [3 x 5]\n%       PARAMS.linear_model24 - matrix of size [3 x 5]\n%       PARAMS.linear_model25 - matrix of size [3 x 5]\n%       PARAMS.linear_model26 - matrix of size [3 x 5]\n%       PARAMS.linear_model27 - matrix of size [3 x 5]\n%       PARAMS.linear_model28 - matrix of size [3 x 5]\n%       PARAMS.linear_model29 - matrix of size [3 x 5]\n%       PARAMS.linear_model30 - matrix of size [3 x 5]\n%       PARAMS.linear_model31 - matrix of size [3 x 5]\n%       PARAMS.linear_model32 - matrix of size [3 x 5]\n%       PARAMS.linear_model33 - matrix of size [3 x 5]\n%       PARAMS.linear_model34 - matrix of size [3 x 5]\n%       PARAMS.linear_model35 - matrix of size [3 x 5]\n%       PARAMS.linear_model36 - matrix of size [3 x 5]\n%       PARAMS.linear_model37 - matrix of size [3 x 5]\n%       PARAMS.linear_model38 - matrix of size [3 x 5]\n%       PARAMS.linear_model39 - matrix of size [3 x 5]\n%       PARAMS.linear_model40 - matrix of size [3 x 5]\n%       PARAMS.linear_model41 - matrix of size [3 x 5]\n%       PARAMS.linear_model42 - matrix of size [3 x 5]\n%       PARAMS.linear_model43 - matrix of size [3 x 5]\n%       PARAMS.linear_model44 - matrix of size [3 x 5]\n%       PARAMS.linear_model45 - matrix of size [3 x 5]\n%       PARAMS.linear_model46 - matrix of size [3 x 5]\n%       PARAMS.linear_model47 - matrix of size [3 x 5]\n%       PARAMS.linear_model48 - matrix of size [3 x 5]\n%       PARAMS.linear_model49 - matrix of size [3 x 5]\n%\n%   OUTPUT returns the values of the last iteration of the solver where\n%       OUTPUT.output - column vector of size 50\n%\n%   [OUTPUT, EXITFLAG] = MPC_Project_FORCESPRO(PARAMS) returns additionally\n%   the integer EXITFLAG indicating the state of the solution with \n%       1 - OPTIMAL solution has been found (subject to desired accuracy)\n%       0 - Timeout - maximum number of iterations reached\n%      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.\n%    -100 - License error\n%\n%   [OUTPUT, EXITFLAG, INFO] = MPC_Project_FORCESPRO(PARAMS) returns \n%   additional information about the last iterate:\n%       INFO.it        - number of iterations that lead to this result\n%       INFO.res_eq    - max. equality constraint residual\n%       INFO.res_ineq  - max. inequality constraint residual\n%       INFO.pobj      - primal objective\n%       INFO.dobj      - dual objective\n%       INFO.dgap      - duality gap := pobj - dobj\n%       INFO.rdgap     - relative duality gap := |dgap / pobj|\n%       INFO.mu        - duality measure\n%       INFO.sigma     - centering parameter\n%       INFO.lsit_aff  - iterations of affine line search\n%       INFO.lsit_cc   - iterations of line search (combined direction)\n%       INFO.step_aff  - step size (affine direction)\n%       INFO.step_cc   - step size (centering direction)\n%       INFO.solvetime - Time needed for solve (wall clock time)\n%\n% See also COPYING\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/MPC_Project_FORCESPRO.m b/model/MPC_Project_FORCESPRO/MPC_Project_FORCESPRO.m
--- a/model/MPC_Project_FORCESPRO/MPC_Project_FORCESPRO.m	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/MPC_Project_FORCESPRO.m	(date 1646676210265)
@@ -12,46 +12,6 @@
 %       PARAMS.linear_model7 - matrix of size [3 x 5]
 %       PARAMS.linear_model8 - matrix of size [3 x 5]
 %       PARAMS.linear_model9 - matrix of size [3 x 5]
-%       PARAMS.linear_model10 - matrix of size [3 x 5]
-%       PARAMS.linear_model11 - matrix of size [3 x 5]
-%       PARAMS.linear_model12 - matrix of size [3 x 5]
-%       PARAMS.linear_model13 - matrix of size [3 x 5]
-%       PARAMS.linear_model14 - matrix of size [3 x 5]
-%       PARAMS.linear_model15 - matrix of size [3 x 5]
-%       PARAMS.linear_model16 - matrix of size [3 x 5]
-%       PARAMS.linear_model17 - matrix of size [3 x 5]
-%       PARAMS.linear_model18 - matrix of size [3 x 5]
-%       PARAMS.linear_model19 - matrix of size [3 x 5]
-%       PARAMS.linear_model20 - matrix of size [3 x 5]
-%       PARAMS.linear_model21 - matrix of size [3 x 5]
-%       PARAMS.linear_model22 - matrix of size [3 x 5]
-%       PARAMS.linear_model23 - matrix of size [3 x 5]
-%       PARAMS.linear_model24 - matrix of size [3 x 5]
-%       PARAMS.linear_model25 - matrix of size [3 x 5]
-%       PARAMS.linear_model26 - matrix of size [3 x 5]
-%       PARAMS.linear_model27 - matrix of size [3 x 5]
-%       PARAMS.linear_model28 - matrix of size [3 x 5]
-%       PARAMS.linear_model29 - matrix of size [3 x 5]
-%       PARAMS.linear_model30 - matrix of size [3 x 5]
-%       PARAMS.linear_model31 - matrix of size [3 x 5]
-%       PARAMS.linear_model32 - matrix of size [3 x 5]
-%       PARAMS.linear_model33 - matrix of size [3 x 5]
-%       PARAMS.linear_model34 - matrix of size [3 x 5]
-%       PARAMS.linear_model35 - matrix of size [3 x 5]
-%       PARAMS.linear_model36 - matrix of size [3 x 5]
-%       PARAMS.linear_model37 - matrix of size [3 x 5]
-%       PARAMS.linear_model38 - matrix of size [3 x 5]
-%       PARAMS.linear_model39 - matrix of size [3 x 5]
-%       PARAMS.linear_model40 - matrix of size [3 x 5]
-%       PARAMS.linear_model41 - matrix of size [3 x 5]
-%       PARAMS.linear_model42 - matrix of size [3 x 5]
-%       PARAMS.linear_model43 - matrix of size [3 x 5]
-%       PARAMS.linear_model44 - matrix of size [3 x 5]
-%       PARAMS.linear_model45 - matrix of size [3 x 5]
-%       PARAMS.linear_model46 - matrix of size [3 x 5]
-%       PARAMS.linear_model47 - matrix of size [3 x 5]
-%       PARAMS.linear_model48 - matrix of size [3 x 5]
-%       PARAMS.linear_model49 - matrix of size [3 x 5]
 %
 %   OUTPUT returns the values of the last iteration of the solver where
 %       OUTPUT.output - column vector of size 50
Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_mex.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nMPC_Project_FORCESPRO : A fast customized optimization solver.\n\nCopyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\n\n\nThis software is intended for simulation and testing purposes only. \nUse of this software for any commercial purpose is prohibited.\n\nThis program is distributed in the hope that it will be useful.\nEMBOTECH makes NO WARRANTIES with respect to the use of the software \nwithout even the implied warranty of MERCHANTABILITY or FITNESS FOR A \nPARTICULAR PURPOSE. \n\nEMBOTECH shall not have any liability for any damage arising from the use\nof the software.\n\nThis Agreement shall exclusively be governed by and interpreted in \naccordance with the laws of Switzerland, excluding its principles\nof conflict of laws. The Courts of Zurich-City shall have exclusive \njurisdiction in case of any dispute.\n\n*/\n\n#include \"mex.h\"\n#include \"math.h\"\n#include \"../include/MPC_Project_FORCESPRO.h\"\n#ifndef SOLVER_STDIO_H\n#define SOLVER_STDIO_H\n#include <stdio.h>\n#endif\n\n/* For compatibility with Microsoft Visual Studio 2015 */\n#if _MSC_VER >= 1900\nFILE _iob[3];\nFILE * __cdecl __iob_func(void)\n{\n\t_iob[0] = *stdin;\n\t_iob[1] = *stdout;\n\t_iob[2] = *stderr;\n\treturn _iob;\n}\n#endif\n\n/* copy functions */\n\nvoid copyCArrayToM_double(double *src, double *dest, solver_int32_default dim) \n{\n    solver_int32_default i;\n    for( i = 0; i < dim; i++ ) \n    {\n        *dest++ = (double)*src++;\n    }\n}\n\nvoid copyMArrayToC_double(double *src, double *dest, solver_int32_default dim) \n{\n    solver_int32_default i;\n    for( i = 0; i < dim; i++ ) \n    {\n        *dest++ = (double) (*src++) ;\n    }\n}\n\nvoid copyMValueToC_double(double * src, double * dest)\n{\n\t*dest = (double) *src;\n}\n\n\n\n\n\n/* Some memory for mex-function */\nstatic MPC_Project_FORCESPRO_params params;\nstatic MPC_Project_FORCESPRO_output output;\nstatic MPC_Project_FORCESPRO_info info;\n\n/* THE mex-function */\nvoid mexFunction( solver_int32_default nlhs, mxArray *plhs[], solver_int32_default nrhs, const mxArray *prhs[] )  \n{\n\t/* file pointer for printing */\n\tFILE *fp = NULL;\n\n\t/* define variables */\t\n\tmxArray *par;\n\tmxArray *outvar;\n\tconst mxArray *PARAMS = prhs[0]; \n\tdouble *pvalue;\n\tsolver_int32_default i;\n\tsolver_int32_default exitflag;\n\tconst solver_int8_default *fname;\n\tconst solver_int8_default *outputnames[1] = {\"output\"};\n\tconst solver_int8_default *infofields[16] = { \"it\", \"it2opt\", \"res_eq\", \"res_ineq\",  \"pobj\",  \"dobj\",  \"dgap\", \"rdgap\",  \"mu\",  \"mu_aff\",  \"sigma\",  \"lsit_aff\",  \"lsit_cc\",  \"step_aff\",   \"step_cc\",  \"solvetime\"};\n\t\n\t/* Check for proper number of arguments */\n    if (nrhs != 1)\n\t{\n\t\tmexErrMsgTxt(\"This function requires exactly 1 input: PARAMS struct.\\nType 'help MPC_Project_FORCESPRO_mex' for details.\");\n\t}    \n\tif (nlhs > 3) \n\t{\n        mexErrMsgTxt(\"This function returns at most 3 outputs.\\nType 'help MPC_Project_FORCESPRO_mex' for details.\");\n    }\n\n\t/* Check whether params is actually a structure */\n\tif( !mxIsStruct(PARAMS) ) \n\t{\n\t\tmexErrMsgTxt(\"PARAMS must be a structure.\");\n\t}\n\t \n\n\t/* copy parameters into the right location */\n\tpar = mxGetField(PARAMS, 0, \"xinit\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.xinit not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.xinit must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 1 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.xinit must be of size [3 x 1]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.xinit,3);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model1\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model1 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model1 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model1 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model1,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model2\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model2 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model2 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model2 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model2,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model3\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model3 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model3 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model3 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model3,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model4\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model4 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model4 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model4 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model4,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model5\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model5 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model5 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model5 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model5,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model6\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model6 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model6 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model6 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model6,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model7\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model7 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model7 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model7 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model7,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model8\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model8 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model8 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model8 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model8,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model9\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model9 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model9 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model9 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model9,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model10\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model10 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model10 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model10 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model10,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model11\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model11 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model11 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model11 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model11,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model12\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model12 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model12 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model12 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model12,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model13\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model13 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model13 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model13 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model13,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model14\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model14 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model14 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model14 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model14,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model15\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model15 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model15 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model15 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model15,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model16\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model16 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model16 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model16 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model16,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model17\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model17 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model17 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model17 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model17,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model18\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model18 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model18 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model18 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model18,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model19\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model19 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model19 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model19 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model19,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model20\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model20 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model20 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model20 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model20,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model21\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model21 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model21 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model21 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model21,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model22\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model22 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model22 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model22 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model22,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model23\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model23 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model23 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model23 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model23,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model24\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model24 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model24 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model24 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model24,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model25\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model25 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model25 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model25 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model25,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model26\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model26 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model26 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model26 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model26,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model27\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model27 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model27 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model27 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model27,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model28\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model28 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model28 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model28 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model28,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model29\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model29 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model29 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model29 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model29,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model30\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model30 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model30 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model30 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model30,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model31\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model31 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model31 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model31 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model31,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model32\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model32 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model32 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model32 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model32,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model33\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model33 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model33 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model33 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model33,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model34\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model34 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model34 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model34 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model34,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model35\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model35 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model35 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model35 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model35,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model36\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model36 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model36 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model36 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model36,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model37\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model37 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model37 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model37 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model37,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model38\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model38 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model38 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model38 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model38,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model39\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model39 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model39 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model39 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model39,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model40\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model40 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model40 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model40 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model40,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model41\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model41 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model41 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model41 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model41,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model42\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model42 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model42 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model42 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model42,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model43\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model43 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model43 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model43 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model43,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model44\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model44 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model44 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model44 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model44,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model45\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model45 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model45 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model45 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model45,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model46\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model46 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model46 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model46 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model46,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model47\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model47 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model47 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model47 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model47,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model48\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model48 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model48 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model48 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model48,15);\n\n\t}\n\tpar = mxGetField(PARAMS, 0, \"linear_model49\");\n#ifdef MEXARGMUENTCHECKS\n    if( par == NULL )\t\n\t{\n        mexErrMsgTxt(\"PARAMS.linear_model49 not found\");\n    }\n    if( !mxIsDouble(par) )\n    {\n    mexErrMsgTxt(\"PARAMS.linear_model49 must be a double.\");\n    }\n    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) \n\t{\n    mexErrMsgTxt(\"PARAMS.linear_model49 must be of size [3 x 5]\");\n    }\n#endif\t \n\tif ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )\n\t{\n\t\tcopyMArrayToC_double(mxGetPr(par), params.linear_model49,15);\n\n\t}\n\n\n\t#if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0\n\t\t/* Prepare file for printfs */\n        fp = fopen(\"stdout_temp\",\"w+\");\n\t\tif( fp == NULL ) \n\t\t{\n\t\t\tmexErrMsgTxt(\"freopen of stdout did not work.\");\n\t\t}\n\t\trewind(fp);\n\t#endif\n\n\t/* call solver */\n\texitflag = MPC_Project_FORCESPRO_solve(&params, &output, &info, fp);\n\t\n\t#if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0\n\t\t/* Read contents of printfs printed to file */\n\t\trewind(fp);\n\t\twhile( (i = fgetc(fp)) != EOF ) \n\t\t{\n\t\t\tmexPrintf(\"%c\",i);\n\t\t}\n\t\tfclose(fp);\n\t#endif\n\n\t/* copy output to matlab arrays */\n\tplhs[0] = mxCreateStructMatrix(1, 1, 1, outputnames);\n\t\toutvar = mxCreateDoubleMatrix(50, 1, mxREAL);\n\tcopyCArrayToM_double( output.output, mxGetPr(outvar), 50);\n\tmxSetField(plhs[0], 0, \"output\", outvar);\n\n\n\n\t/* copy exitflag */\n\tif( nlhs > 1 )\n\t{\n\tplhs[1] = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t*mxGetPr(plhs[1]) = (double)exitflag;\n\t}\n\n\t/* copy info struct */\n\tif( nlhs > 2 )\n\t{\n\t        plhs[2] = mxCreateStructMatrix(1, 1, 16, infofields);\n         \n\t\t\n\t\t/* iterations */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = (double)info.it;\n\t\tmxSetField(plhs[2], 0, \"it\", outvar);\n\n\t\t/* iterations to optimality (branch and bound) */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = (double)info.it2opt;\n\t\tmxSetField(plhs[2], 0, \"it2opt\", outvar);\n\t\t\n\t\t/* res_eq */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.res_eq;\n\t\tmxSetField(plhs[2], 0, \"res_eq\", outvar);\n\n\t\t/* res_ineq */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.res_ineq;\n\t\tmxSetField(plhs[2], 0, \"res_ineq\", outvar);\n\n\t\t/* pobj */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.pobj;\n\t\tmxSetField(plhs[2], 0, \"pobj\", outvar);\n\n\t\t/* dobj */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.dobj;\n\t\tmxSetField(plhs[2], 0, \"dobj\", outvar);\n\n\t\t/* dgap */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.dgap;\n\t\tmxSetField(plhs[2], 0, \"dgap\", outvar);\n\n\t\t/* rdgap */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.rdgap;\n\t\tmxSetField(plhs[2], 0, \"rdgap\", outvar);\n\n\t\t/* mu */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.mu;\n\t\tmxSetField(plhs[2], 0, \"mu\", outvar);\n\n\t\t/* mu_aff */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.mu_aff;\n\t\tmxSetField(plhs[2], 0, \"mu_aff\", outvar);\n\n\t\t/* sigma */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.sigma;\n\t\tmxSetField(plhs[2], 0, \"sigma\", outvar);\n\n\t\t/* lsit_aff */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = (double)info.lsit_aff;\n\t\tmxSetField(plhs[2], 0, \"lsit_aff\", outvar);\n\n\t\t/* lsit_cc */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = (double)info.lsit_cc;\n\t\tmxSetField(plhs[2], 0, \"lsit_cc\", outvar);\n\n\t\t/* step_aff */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.step_aff;\n\t\tmxSetField(plhs[2], 0, \"step_aff\", outvar);\n\n\t\t/* step_cc */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.step_cc;\n\t\tmxSetField(plhs[2], 0, \"step_cc\", outvar);\n\n\t\t/* solver time */\n\t\toutvar = mxCreateDoubleMatrix(1, 1, mxREAL);\n\t\t*mxGetPr(outvar) = info.solvetime;\n\t\tmxSetField(plhs[2], 0, \"solvetime\", outvar);\n\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_mex.c b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_mex.c
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_mex.c	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_mex.c	(date 1646676210265)
@@ -30,17 +30,7 @@
 #include <stdio.h>
 #endif
 
-/* For compatibility with Microsoft Visual Studio 2015 */
-#if _MSC_VER >= 1900
-FILE _iob[3];
-FILE * __cdecl __iob_func(void)
-{
-	_iob[0] = *stdin;
-	_iob[1] = *stdout;
-	_iob[2] = *stderr;
-	return _iob;
-}
-#endif
+
 
 /* copy functions */
 
@@ -311,806 +301,6 @@
 		copyMArrayToC_double(mxGetPr(par), params.linear_model9,15);
 
 	}
-	par = mxGetField(PARAMS, 0, "linear_model10");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model10 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model10 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model10 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model10,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model11");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model11 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model11 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model11 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model11,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model12");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model12 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model12 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model12 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model12,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model13");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model13 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model13 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model13 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model13,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model14");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model14 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model14 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model14 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model14,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model15");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model15 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model15 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model15 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model15,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model16");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model16 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model16 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model16 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model16,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model17");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model17 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model17 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model17 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model17,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model18");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model18 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model18 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model18 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model18,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model19");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model19 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model19 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model19 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model19,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model20");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model20 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model20 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model20 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model20,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model21");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model21 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model21 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model21 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model21,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model22");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model22 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model22 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model22 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model22,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model23");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model23 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model23 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model23 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model23,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model24");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model24 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model24 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model24 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model24,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model25");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model25 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model25 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model25 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model25,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model26");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model26 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model26 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model26 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model26,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model27");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model27 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model27 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model27 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model27,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model28");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model28 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model28 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model28 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model28,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model29");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model29 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model29 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model29 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model29,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model30");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model30 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model30 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model30 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model30,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model31");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model31 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model31 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model31 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model31,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model32");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model32 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model32 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model32 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model32,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model33");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model33 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model33 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model33 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model33,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model34");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model34 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model34 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model34 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model34,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model35");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model35 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model35 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model35 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model35,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model36");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model36 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model36 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model36 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model36,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model37");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model37 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model37 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model37 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model37,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model38");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model38 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model38 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model38 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model38,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model39");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model39 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model39 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model39 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model39,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model40");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model40 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model40 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model40 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model40,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model41");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model41 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model41 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model41 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model41,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model42");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model42 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model42 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model42 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model42,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model43");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model43 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model43 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model43 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model43,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model44");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model44 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model44 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model44 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model44,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model45");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model45 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model45 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model45 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model45,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model46");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model46 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model46 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model46 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model46,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model47");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model47 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model47 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model47 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model47,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model48");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model48 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model48 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model48 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model48,15);
-
-	}
-	par = mxGetField(PARAMS, 0, "linear_model49");
-#ifdef MEXARGMUENTCHECKS
-    if( par == NULL )	
-	{
-        mexErrMsgTxt("PARAMS.linear_model49 not found");
-    }
-    if( !mxIsDouble(par) )
-    {
-    mexErrMsgTxt("PARAMS.linear_model49 must be a double.");
-    }
-    if( mxGetM(par) != 3 || mxGetN(par) != 5 ) 
-	{
-    mexErrMsgTxt("PARAMS.linear_model49 must be of size [3 x 5]");
-    }
-#endif	 
-	if ( (mxGetN(par) != 0) && (mxGetM(par) != 0) )
-	{
-		copyMArrayToC_double(mxGetPr(par), params.linear_model49,15);
-
-	}
 
 
 	#if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0
Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_py.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#MPC_Project_FORCESPRO : A fast customized optimization solver.\n#\n#Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\n#\n#\n#This software is intended for simulation and testing purposes only. \n#Use of this software for any commercial purpose is prohibited.\n#\n#This program is distributed in the hope that it will be useful.\n#EMBOTECH makes NO WARRANTIES with respect to the use of the software \n#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \n#PARTICULAR PURPOSE. \n#\n#EMBOTECH shall not have any liability for any damage arising from the use\n#of the software.\n#\n#This Agreement shall exclusively be governed by and interpreted in \n#accordance with the laws of Switzerland, excluding its principles\n#of conflict of laws. The Courts of Zurich-City shall have exclusive \n#jurisdiction in case of any dispute.\n#\n#def __init__():\n'''\na Python wrapper for a fast solver generated by FORCESPRO v5.1.0\n\n   OUTPUT = MPC_Project_FORCESPRO_py.MPC_Project_FORCESPRO_solve(PARAMS) solves a multistage problem\n   subject to the parameters supplied in the following dictionary:\n       PARAMS['xinit'] - column vector of length 3\n       PARAMS['linear_model1'] - matrix of size [3 x 5]\n       PARAMS['linear_model2'] - matrix of size [3 x 5]\n       PARAMS['linear_model3'] - matrix of size [3 x 5]\n       PARAMS['linear_model4'] - matrix of size [3 x 5]\n       PARAMS['linear_model5'] - matrix of size [3 x 5]\n       PARAMS['linear_model6'] - matrix of size [3 x 5]\n       PARAMS['linear_model7'] - matrix of size [3 x 5]\n       PARAMS['linear_model8'] - matrix of size [3 x 5]\n       PARAMS['linear_model9'] - matrix of size [3 x 5]\n       PARAMS['linear_model10'] - matrix of size [3 x 5]\n       PARAMS['linear_model11'] - matrix of size [3 x 5]\n       PARAMS['linear_model12'] - matrix of size [3 x 5]\n       PARAMS['linear_model13'] - matrix of size [3 x 5]\n       PARAMS['linear_model14'] - matrix of size [3 x 5]\n       PARAMS['linear_model15'] - matrix of size [3 x 5]\n       PARAMS['linear_model16'] - matrix of size [3 x 5]\n       PARAMS['linear_model17'] - matrix of size [3 x 5]\n       PARAMS['linear_model18'] - matrix of size [3 x 5]\n       PARAMS['linear_model19'] - matrix of size [3 x 5]\n       PARAMS['linear_model20'] - matrix of size [3 x 5]\n       PARAMS['linear_model21'] - matrix of size [3 x 5]\n       PARAMS['linear_model22'] - matrix of size [3 x 5]\n       PARAMS['linear_model23'] - matrix of size [3 x 5]\n       PARAMS['linear_model24'] - matrix of size [3 x 5]\n       PARAMS['linear_model25'] - matrix of size [3 x 5]\n       PARAMS['linear_model26'] - matrix of size [3 x 5]\n       PARAMS['linear_model27'] - matrix of size [3 x 5]\n       PARAMS['linear_model28'] - matrix of size [3 x 5]\n       PARAMS['linear_model29'] - matrix of size [3 x 5]\n       PARAMS['linear_model30'] - matrix of size [3 x 5]\n       PARAMS['linear_model31'] - matrix of size [3 x 5]\n       PARAMS['linear_model32'] - matrix of size [3 x 5]\n       PARAMS['linear_model33'] - matrix of size [3 x 5]\n       PARAMS['linear_model34'] - matrix of size [3 x 5]\n       PARAMS['linear_model35'] - matrix of size [3 x 5]\n       PARAMS['linear_model36'] - matrix of size [3 x 5]\n       PARAMS['linear_model37'] - matrix of size [3 x 5]\n       PARAMS['linear_model38'] - matrix of size [3 x 5]\n       PARAMS['linear_model39'] - matrix of size [3 x 5]\n       PARAMS['linear_model40'] - matrix of size [3 x 5]\n       PARAMS['linear_model41'] - matrix of size [3 x 5]\n       PARAMS['linear_model42'] - matrix of size [3 x 5]\n       PARAMS['linear_model43'] - matrix of size [3 x 5]\n       PARAMS['linear_model44'] - matrix of size [3 x 5]\n       PARAMS['linear_model45'] - matrix of size [3 x 5]\n       PARAMS['linear_model46'] - matrix of size [3 x 5]\n       PARAMS['linear_model47'] - matrix of size [3 x 5]\n       PARAMS['linear_model48'] - matrix of size [3 x 5]\n       PARAMS['linear_model49'] - matrix of size [3 x 5]\n\n   OUTPUT returns the values of the last iteration of the solver where\n       OUTPUT['output'] - column vector of size 50\n\n   [OUTPUT, EXITFLAG] = MPC_Project_FORCESPRO_py.MPC_Project_FORCESPRO_solve(PARAMS) returns additionally\n   the integer EXITFLAG indicating the state of the solution with \n       1 - Optimal solution has been found (subject to desired accuracy)\n       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum \n       0 - Timeout - maximum number of iterations reached\n      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)\n      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.\n      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.\n      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.\n     -10 - The convex solver could not proceed due to an internal error\n    -100 - License error\n\n   [OUTPUT, EXITFLAG, INFO] = MPC_Project_FORCESPRO_py.MPC_Project_FORCESPRO_solve(PARAMS) returns \n   additional information about the last iterate:\n       INFO.it        - number of iterations that lead to this result\n       INFO.it2opt    - number of convex solves\n       INFO.res_eq    - max. equality constraint residual\n       INFO.res_ineq  - max. inequality constraint residual\n       INFO.pobj      - primal objective\n       INFO.dobj      - dual objective\n       INFO.dgap      - duality gap := pobj - dobj\n       INFO.rdgap     - relative duality gap := |dgap / pobj|\n       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian\n       INFO.mu        - duality measure\n       INFO.sigma     - centering parameter\n       INFO.lsit_aff  - iterations of affine line search\n       INFO.lsit_cc   - iterations of line search (combined direction)\n       INFO.step_aff  - step size (affine direction)\n       INFO.step_cc   - step size (centering direction)\n       INFO.solvetime - Time needed for solve (wall clock time)\n\n See also COPYING\n\n'''\n\nimport ctypes\nimport os\nimport numpy as np\nimport numpy.ctypeslib as npct\nimport sys\n\n#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'MPC_Project_FORCESPRO/lib/MPC_Project_FORCESPRO.dll')) \ntry:\n    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_Project_FORCESPRO/lib/MPC_Project_FORCESPRO.dll'))\n    csolver = getattr(_lib,'MPC_Project_FORCESPRO_solve')\nexcept:\n    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_Project_FORCESPRO/lib/libMPC_Project_FORCESPRO.dll'))\n    csolver = getattr(_lib,'MPC_Project_FORCESPRO_solve')\n\nclass MPC_Project_FORCESPRO_params_ctypes(ctypes.Structure):\n#    @classmethod\n#    def from_param(self):\n#        return self\n    _fields_ = [('xinit', ctypes.c_double * 3),\n('linear_model1', ctypes.c_double * 15),\n('linear_model2', ctypes.c_double * 15),\n('linear_model3', ctypes.c_double * 15),\n('linear_model4', ctypes.c_double * 15),\n('linear_model5', ctypes.c_double * 15),\n('linear_model6', ctypes.c_double * 15),\n('linear_model7', ctypes.c_double * 15),\n('linear_model8', ctypes.c_double * 15),\n('linear_model9', ctypes.c_double * 15),\n('linear_model10', ctypes.c_double * 15),\n('linear_model11', ctypes.c_double * 15),\n('linear_model12', ctypes.c_double * 15),\n('linear_model13', ctypes.c_double * 15),\n('linear_model14', ctypes.c_double * 15),\n('linear_model15', ctypes.c_double * 15),\n('linear_model16', ctypes.c_double * 15),\n('linear_model17', ctypes.c_double * 15),\n('linear_model18', ctypes.c_double * 15),\n('linear_model19', ctypes.c_double * 15),\n('linear_model20', ctypes.c_double * 15),\n('linear_model21', ctypes.c_double * 15),\n('linear_model22', ctypes.c_double * 15),\n('linear_model23', ctypes.c_double * 15),\n('linear_model24', ctypes.c_double * 15),\n('linear_model25', ctypes.c_double * 15),\n('linear_model26', ctypes.c_double * 15),\n('linear_model27', ctypes.c_double * 15),\n('linear_model28', ctypes.c_double * 15),\n('linear_model29', ctypes.c_double * 15),\n('linear_model30', ctypes.c_double * 15),\n('linear_model31', ctypes.c_double * 15),\n('linear_model32', ctypes.c_double * 15),\n('linear_model33', ctypes.c_double * 15),\n('linear_model34', ctypes.c_double * 15),\n('linear_model35', ctypes.c_double * 15),\n('linear_model36', ctypes.c_double * 15),\n('linear_model37', ctypes.c_double * 15),\n('linear_model38', ctypes.c_double * 15),\n('linear_model39', ctypes.c_double * 15),\n('linear_model40', ctypes.c_double * 15),\n('linear_model41', ctypes.c_double * 15),\n('linear_model42', ctypes.c_double * 15),\n('linear_model43', ctypes.c_double * 15),\n('linear_model44', ctypes.c_double * 15),\n('linear_model45', ctypes.c_double * 15),\n('linear_model46', ctypes.c_double * 15),\n('linear_model47', ctypes.c_double * 15),\n('linear_model48', ctypes.c_double * 15),\n('linear_model49', ctypes.c_double * 15),\n]\n\nMPC_Project_FORCESPRO_params = {'xinit' : np.array([]),\n'linear_model1' : np.array([]),\n'linear_model2' : np.array([]),\n'linear_model3' : np.array([]),\n'linear_model4' : np.array([]),\n'linear_model5' : np.array([]),\n'linear_model6' : np.array([]),\n'linear_model7' : np.array([]),\n'linear_model8' : np.array([]),\n'linear_model9' : np.array([]),\n'linear_model10' : np.array([]),\n'linear_model11' : np.array([]),\n'linear_model12' : np.array([]),\n'linear_model13' : np.array([]),\n'linear_model14' : np.array([]),\n'linear_model15' : np.array([]),\n'linear_model16' : np.array([]),\n'linear_model17' : np.array([]),\n'linear_model18' : np.array([]),\n'linear_model19' : np.array([]),\n'linear_model20' : np.array([]),\n'linear_model21' : np.array([]),\n'linear_model22' : np.array([]),\n'linear_model23' : np.array([]),\n'linear_model24' : np.array([]),\n'linear_model25' : np.array([]),\n'linear_model26' : np.array([]),\n'linear_model27' : np.array([]),\n'linear_model28' : np.array([]),\n'linear_model29' : np.array([]),\n'linear_model30' : np.array([]),\n'linear_model31' : np.array([]),\n'linear_model32' : np.array([]),\n'linear_model33' : np.array([]),\n'linear_model34' : np.array([]),\n'linear_model35' : np.array([]),\n'linear_model36' : np.array([]),\n'linear_model37' : np.array([]),\n'linear_model38' : np.array([]),\n'linear_model39' : np.array([]),\n'linear_model40' : np.array([]),\n'linear_model41' : np.array([]),\n'linear_model42' : np.array([]),\n'linear_model43' : np.array([]),\n'linear_model44' : np.array([]),\n'linear_model45' : np.array([]),\n'linear_model46' : np.array([]),\n'linear_model47' : np.array([]),\n'linear_model48' : np.array([]),\n'linear_model49' : np.array([]),\n}\nparams = {'xinit' : np.array([]),\n'linear_model1' : np.array([]),\n'linear_model2' : np.array([]),\n'linear_model3' : np.array([]),\n'linear_model4' : np.array([]),\n'linear_model5' : np.array([]),\n'linear_model6' : np.array([]),\n'linear_model7' : np.array([]),\n'linear_model8' : np.array([]),\n'linear_model9' : np.array([]),\n'linear_model10' : np.array([]),\n'linear_model11' : np.array([]),\n'linear_model12' : np.array([]),\n'linear_model13' : np.array([]),\n'linear_model14' : np.array([]),\n'linear_model15' : np.array([]),\n'linear_model16' : np.array([]),\n'linear_model17' : np.array([]),\n'linear_model18' : np.array([]),\n'linear_model19' : np.array([]),\n'linear_model20' : np.array([]),\n'linear_model21' : np.array([]),\n'linear_model22' : np.array([]),\n'linear_model23' : np.array([]),\n'linear_model24' : np.array([]),\n'linear_model25' : np.array([]),\n'linear_model26' : np.array([]),\n'linear_model27' : np.array([]),\n'linear_model28' : np.array([]),\n'linear_model29' : np.array([]),\n'linear_model30' : np.array([]),\n'linear_model31' : np.array([]),\n'linear_model32' : np.array([]),\n'linear_model33' : np.array([]),\n'linear_model34' : np.array([]),\n'linear_model35' : np.array([]),\n'linear_model36' : np.array([]),\n'linear_model37' : np.array([]),\n'linear_model38' : np.array([]),\n'linear_model39' : np.array([]),\n'linear_model40' : np.array([]),\n'linear_model41' : np.array([]),\n'linear_model42' : np.array([]),\n'linear_model43' : np.array([]),\n'linear_model44' : np.array([]),\n'linear_model45' : np.array([]),\n'linear_model46' : np.array([]),\n'linear_model47' : np.array([]),\n'linear_model48' : np.array([]),\n'linear_model49' : np.array([]),\n}\nMPC_Project_FORCESPRO_params_types = {'xinit' : np.float64,\n'linear_model1' : np.float64,\n'linear_model2' : np.float64,\n'linear_model3' : np.float64,\n'linear_model4' : np.float64,\n'linear_model5' : np.float64,\n'linear_model6' : np.float64,\n'linear_model7' : np.float64,\n'linear_model8' : np.float64,\n'linear_model9' : np.float64,\n'linear_model10' : np.float64,\n'linear_model11' : np.float64,\n'linear_model12' : np.float64,\n'linear_model13' : np.float64,\n'linear_model14' : np.float64,\n'linear_model15' : np.float64,\n'linear_model16' : np.float64,\n'linear_model17' : np.float64,\n'linear_model18' : np.float64,\n'linear_model19' : np.float64,\n'linear_model20' : np.float64,\n'linear_model21' : np.float64,\n'linear_model22' : np.float64,\n'linear_model23' : np.float64,\n'linear_model24' : np.float64,\n'linear_model25' : np.float64,\n'linear_model26' : np.float64,\n'linear_model27' : np.float64,\n'linear_model28' : np.float64,\n'linear_model29' : np.float64,\n'linear_model30' : np.float64,\n'linear_model31' : np.float64,\n'linear_model32' : np.float64,\n'linear_model33' : np.float64,\n'linear_model34' : np.float64,\n'linear_model35' : np.float64,\n'linear_model36' : np.float64,\n'linear_model37' : np.float64,\n'linear_model38' : np.float64,\n'linear_model39' : np.float64,\n'linear_model40' : np.float64,\n'linear_model41' : np.float64,\n'linear_model42' : np.float64,\n'linear_model43' : np.float64,\n'linear_model44' : np.float64,\n'linear_model45' : np.float64,\n'linear_model46' : np.float64,\n'linear_model47' : np.float64,\n'linear_model48' : np.float64,\n'linear_model49' : np.float64,\n}\n\nclass MPC_Project_FORCESPRO_outputs_ctypes(ctypes.Structure):\n#    @classmethod\n#    def from_param(self):\n#        return self\n    _fields_ = [('output', ctypes.c_double * 50),\n]\n\nMPC_Project_FORCESPRO_outputs = {'output' : np.array([]),\n}\n\n\nclass MPC_Project_FORCESPRO_info(ctypes.Structure):\n#    @classmethod\n#    def from_param(self):\n#        return self\n    _fields_ = [('it', ctypes.c_int32),\n('it2opt', ctypes.c_int32),\n('res_eq', ctypes.c_double),\n('res_ineq', ctypes.c_double),\n('pobj', ctypes.c_double),\n('dobj', ctypes.c_double),\n('dgap', ctypes.c_double),\n('rdgap', ctypes.c_double),\n('gradient_lag_norm', ctypes.c_double),\n('mu', ctypes.c_double),\n('mu_aff', ctypes.c_double),\n('sigma', ctypes.c_double),\n('lsit_aff', ctypes.c_int32),\n('lsit_cc', ctypes.c_int32),\n('step_aff', ctypes.c_double),\n('step_cc', ctypes.c_double),\n('solvetime', ctypes.c_double)\n]\n\nclass FILE(ctypes.Structure):\n        pass\nif sys.version_info.major == 2:\n    PyFile_AsFile = ctypes.pythonapi.PyFile_AsFile # problem here with python 3 http://stackoverflow.com/questions/16130268/python-3-replacement-for-pyfile-asfile\n    PyFile_AsFile.argtypes = [ctypes.py_object]\n    PyFile_AsFile.restype = ctypes.POINTER(FILE)\n\n# determine data types for solver function prototype \ncsolver.argtypes = ( ctypes.POINTER(MPC_Project_FORCESPRO_params_ctypes), ctypes.POINTER(MPC_Project_FORCESPRO_outputs_ctypes), ctypes.POINTER(MPC_Project_FORCESPRO_info), ctypes.POINTER(FILE))\ncsolver.restype = ctypes.c_int\n\ndef MPC_Project_FORCESPRO_solve(params_arg):\n    '''\na Python wrapper for a fast solver generated by FORCESPRO v5.1.0\n\n   OUTPUT = MPC_Project_FORCESPRO_py.MPC_Project_FORCESPRO_solve(PARAMS) solves a multistage problem\n   subject to the parameters supplied in the following dictionary:\n       PARAMS['xinit'] - column vector of length 3\n       PARAMS['linear_model1'] - matrix of size [3 x 5]\n       PARAMS['linear_model2'] - matrix of size [3 x 5]\n       PARAMS['linear_model3'] - matrix of size [3 x 5]\n       PARAMS['linear_model4'] - matrix of size [3 x 5]\n       PARAMS['linear_model5'] - matrix of size [3 x 5]\n       PARAMS['linear_model6'] - matrix of size [3 x 5]\n       PARAMS['linear_model7'] - matrix of size [3 x 5]\n       PARAMS['linear_model8'] - matrix of size [3 x 5]\n       PARAMS['linear_model9'] - matrix of size [3 x 5]\n       PARAMS['linear_model10'] - matrix of size [3 x 5]\n       PARAMS['linear_model11'] - matrix of size [3 x 5]\n       PARAMS['linear_model12'] - matrix of size [3 x 5]\n       PARAMS['linear_model13'] - matrix of size [3 x 5]\n       PARAMS['linear_model14'] - matrix of size [3 x 5]\n       PARAMS['linear_model15'] - matrix of size [3 x 5]\n       PARAMS['linear_model16'] - matrix of size [3 x 5]\n       PARAMS['linear_model17'] - matrix of size [3 x 5]\n       PARAMS['linear_model18'] - matrix of size [3 x 5]\n       PARAMS['linear_model19'] - matrix of size [3 x 5]\n       PARAMS['linear_model20'] - matrix of size [3 x 5]\n       PARAMS['linear_model21'] - matrix of size [3 x 5]\n       PARAMS['linear_model22'] - matrix of size [3 x 5]\n       PARAMS['linear_model23'] - matrix of size [3 x 5]\n       PARAMS['linear_model24'] - matrix of size [3 x 5]\n       PARAMS['linear_model25'] - matrix of size [3 x 5]\n       PARAMS['linear_model26'] - matrix of size [3 x 5]\n       PARAMS['linear_model27'] - matrix of size [3 x 5]\n       PARAMS['linear_model28'] - matrix of size [3 x 5]\n       PARAMS['linear_model29'] - matrix of size [3 x 5]\n       PARAMS['linear_model30'] - matrix of size [3 x 5]\n       PARAMS['linear_model31'] - matrix of size [3 x 5]\n       PARAMS['linear_model32'] - matrix of size [3 x 5]\n       PARAMS['linear_model33'] - matrix of size [3 x 5]\n       PARAMS['linear_model34'] - matrix of size [3 x 5]\n       PARAMS['linear_model35'] - matrix of size [3 x 5]\n       PARAMS['linear_model36'] - matrix of size [3 x 5]\n       PARAMS['linear_model37'] - matrix of size [3 x 5]\n       PARAMS['linear_model38'] - matrix of size [3 x 5]\n       PARAMS['linear_model39'] - matrix of size [3 x 5]\n       PARAMS['linear_model40'] - matrix of size [3 x 5]\n       PARAMS['linear_model41'] - matrix of size [3 x 5]\n       PARAMS['linear_model42'] - matrix of size [3 x 5]\n       PARAMS['linear_model43'] - matrix of size [3 x 5]\n       PARAMS['linear_model44'] - matrix of size [3 x 5]\n       PARAMS['linear_model45'] - matrix of size [3 x 5]\n       PARAMS['linear_model46'] - matrix of size [3 x 5]\n       PARAMS['linear_model47'] - matrix of size [3 x 5]\n       PARAMS['linear_model48'] - matrix of size [3 x 5]\n       PARAMS['linear_model49'] - matrix of size [3 x 5]\n\n   OUTPUT returns the values of the last iteration of the solver where\n       OUTPUT['output'] - column vector of size 50\n\n   [OUTPUT, EXITFLAG] = MPC_Project_FORCESPRO_py.MPC_Project_FORCESPRO_solve(PARAMS) returns additionally\n   the integer EXITFLAG indicating the state of the solution with \n       1 - Optimal solution has been found (subject to desired accuracy)\n       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum \n       0 - Timeout - maximum number of iterations reached\n      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)\n      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.\n      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.\n      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.\n     -10 - The convex solver could not proceed due to an internal error\n    -100 - License error\n\n   [OUTPUT, EXITFLAG, INFO] = MPC_Project_FORCESPRO_py.MPC_Project_FORCESPRO_solve(PARAMS) returns \n   additional information about the last iterate:\n       INFO.it        - number of iterations that lead to this result\n       INFO.it2opt    - number of convex solves\n       INFO.res_eq    - max. equality constraint residual\n       INFO.res_ineq  - max. inequality constraint residual\n       INFO.pobj      - primal objective\n       INFO.dobj      - dual objective\n       INFO.dgap      - duality gap := pobj - dobj\n       INFO.rdgap     - relative duality gap := |dgap / pobj|\n       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian\n       INFO.mu        - duality measure\n       INFO.sigma     - centering parameter\n       INFO.lsit_aff  - iterations of affine line search\n       INFO.lsit_cc   - iterations of line search (combined direction)\n       INFO.step_aff  - step size (affine direction)\n       INFO.step_cc   - step size (centering direction)\n       INFO.solvetime - Time needed for solve (wall clock time)\n\n See also COPYING\n\n    '''\n    global _lib\n\n    # convert parameters\n    params_py = MPC_Project_FORCESPRO_params_ctypes()\n    for par in params_arg:\n        try:\n            #setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='A')))\n            if isinstance(getattr(params_py, par), ctypes.Array):\n                params_arg[par] = np.require(params_arg[par], dtype=MPC_Project_FORCESPRO_params_types[par], requirements='F')\n                setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='F')))\n            else:\n                setattr(params_py, par, params_arg[par])\n        except:\n            raise ValueError('Parameter ' + par + ' does not have the appropriate dimensions or data type. Please use numpy arrays for parameters.')\n    \n    outputs_py = MPC_Project_FORCESPRO_outputs_ctypes()\n    info_py = MPC_Project_FORCESPRO_info()\n    if sys.version_info.major == 2:\n        if sys.platform.startswith('win'):\n            fp = None # if set to none, the solver prints to stdout by default - necessary because we have an access violation otherwise under windows\n        else:\n            #fp = open('stdout_temp.txt','w')\n            fp = sys.stdout\n        try:\n            PyFile_AsFile.restype = ctypes.POINTER(FILE)\n            exitflag = _lib.MPC_Project_FORCESPRO_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), PyFile_AsFile(fp)  )\n            #fp = open('stdout_temp.txt','r')\n            #print (fp.read())\n            #fp.close()\n        except:\n            #print 'Problem with solver'\n            raise\n    elif sys.version_info.major == 3:\n        if sys.platform.startswith('win'):\n            libc = ctypes.cdll.msvcrt\n        elif sys.platform.startswith('darwin'):\n            libc = ctypes.CDLL('libc.dylib')\n        else:\n            libc = ctypes.CDLL('libc.so.6')       # Open libc\n        cfopen = getattr(libc,'fopen')        # Get its fopen\n        cfopen.restype = ctypes.POINTER(FILE) # Yes, fopen gives a file pointer\n        cfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p] # Yes, fopen gives a file pointer \n        fp = cfopen('stdout_temp.txt'.encode('utf-8'),'w'.encode('utf-8'))    # Use that fopen \n\n        try:\n            if sys.platform.startswith('win'):\n                exitflag = _lib.MPC_Project_FORCESPRO_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), None )\n            else:\n                exitflag = _lib.MPC_Project_FORCESPRO_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), fp )\n            libc.fclose(fp)\n            fptemp = open('stdout_temp.txt','r')\n            print (fptemp.read())\n            fptemp.close()            \n        except:\n            #print 'Problem with solver'\n            raise\n\n    # convert outputs\n    for out in MPC_Project_FORCESPRO_outputs:\n        MPC_Project_FORCESPRO_outputs[out] = npct.as_array(getattr(outputs_py,out))\n\n    return MPC_Project_FORCESPRO_outputs,int(exitflag),info_py\n\nsolve = MPC_Project_FORCESPRO_solve\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_py.py b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_py.py
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_py.py	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_py.py	(date 1646676210265)
@@ -35,46 +35,6 @@
        PARAMS['linear_model7'] - matrix of size [3 x 5]
        PARAMS['linear_model8'] - matrix of size [3 x 5]
        PARAMS['linear_model9'] - matrix of size [3 x 5]
-       PARAMS['linear_model10'] - matrix of size [3 x 5]
-       PARAMS['linear_model11'] - matrix of size [3 x 5]
-       PARAMS['linear_model12'] - matrix of size [3 x 5]
-       PARAMS['linear_model13'] - matrix of size [3 x 5]
-       PARAMS['linear_model14'] - matrix of size [3 x 5]
-       PARAMS['linear_model15'] - matrix of size [3 x 5]
-       PARAMS['linear_model16'] - matrix of size [3 x 5]
-       PARAMS['linear_model17'] - matrix of size [3 x 5]
-       PARAMS['linear_model18'] - matrix of size [3 x 5]
-       PARAMS['linear_model19'] - matrix of size [3 x 5]
-       PARAMS['linear_model20'] - matrix of size [3 x 5]
-       PARAMS['linear_model21'] - matrix of size [3 x 5]
-       PARAMS['linear_model22'] - matrix of size [3 x 5]
-       PARAMS['linear_model23'] - matrix of size [3 x 5]
-       PARAMS['linear_model24'] - matrix of size [3 x 5]
-       PARAMS['linear_model25'] - matrix of size [3 x 5]
-       PARAMS['linear_model26'] - matrix of size [3 x 5]
-       PARAMS['linear_model27'] - matrix of size [3 x 5]
-       PARAMS['linear_model28'] - matrix of size [3 x 5]
-       PARAMS['linear_model29'] - matrix of size [3 x 5]
-       PARAMS['linear_model30'] - matrix of size [3 x 5]
-       PARAMS['linear_model31'] - matrix of size [3 x 5]
-       PARAMS['linear_model32'] - matrix of size [3 x 5]
-       PARAMS['linear_model33'] - matrix of size [3 x 5]
-       PARAMS['linear_model34'] - matrix of size [3 x 5]
-       PARAMS['linear_model35'] - matrix of size [3 x 5]
-       PARAMS['linear_model36'] - matrix of size [3 x 5]
-       PARAMS['linear_model37'] - matrix of size [3 x 5]
-       PARAMS['linear_model38'] - matrix of size [3 x 5]
-       PARAMS['linear_model39'] - matrix of size [3 x 5]
-       PARAMS['linear_model40'] - matrix of size [3 x 5]
-       PARAMS['linear_model41'] - matrix of size [3 x 5]
-       PARAMS['linear_model42'] - matrix of size [3 x 5]
-       PARAMS['linear_model43'] - matrix of size [3 x 5]
-       PARAMS['linear_model44'] - matrix of size [3 x 5]
-       PARAMS['linear_model45'] - matrix of size [3 x 5]
-       PARAMS['linear_model46'] - matrix of size [3 x 5]
-       PARAMS['linear_model47'] - matrix of size [3 x 5]
-       PARAMS['linear_model48'] - matrix of size [3 x 5]
-       PARAMS['linear_model49'] - matrix of size [3 x 5]
 
    OUTPUT returns the values of the last iteration of the solver where
        OUTPUT['output'] - column vector of size 50
@@ -120,12 +80,12 @@
 import numpy.ctypeslib as npct
 import sys
 
-#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'MPC_Project_FORCESPRO/lib/MPC_Project_FORCESPRO.dll')) 
+#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'MPC_Project_FORCESPRO/lib/MPC_Project_FORCESPRO.so')) 
 try:
-    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_Project_FORCESPRO/lib/MPC_Project_FORCESPRO.dll'))
+    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_Project_FORCESPRO/lib/MPC_Project_FORCESPRO.so'))
     csolver = getattr(_lib,'MPC_Project_FORCESPRO_solve')
 except:
-    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_Project_FORCESPRO/lib/libMPC_Project_FORCESPRO.dll'))
+    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'MPC_Project_FORCESPRO/lib/libMPC_Project_FORCESPRO.so'))
     csolver = getattr(_lib,'MPC_Project_FORCESPRO_solve')
 
 class MPC_Project_FORCESPRO_params_ctypes(ctypes.Structure):
@@ -142,46 +102,6 @@
 ('linear_model7', ctypes.c_double * 15),
 ('linear_model8', ctypes.c_double * 15),
 ('linear_model9', ctypes.c_double * 15),
-('linear_model10', ctypes.c_double * 15),
-('linear_model11', ctypes.c_double * 15),
-('linear_model12', ctypes.c_double * 15),
-('linear_model13', ctypes.c_double * 15),
-('linear_model14', ctypes.c_double * 15),
-('linear_model15', ctypes.c_double * 15),
-('linear_model16', ctypes.c_double * 15),
-('linear_model17', ctypes.c_double * 15),
-('linear_model18', ctypes.c_double * 15),
-('linear_model19', ctypes.c_double * 15),
-('linear_model20', ctypes.c_double * 15),
-('linear_model21', ctypes.c_double * 15),
-('linear_model22', ctypes.c_double * 15),
-('linear_model23', ctypes.c_double * 15),
-('linear_model24', ctypes.c_double * 15),
-('linear_model25', ctypes.c_double * 15),
-('linear_model26', ctypes.c_double * 15),
-('linear_model27', ctypes.c_double * 15),
-('linear_model28', ctypes.c_double * 15),
-('linear_model29', ctypes.c_double * 15),
-('linear_model30', ctypes.c_double * 15),
-('linear_model31', ctypes.c_double * 15),
-('linear_model32', ctypes.c_double * 15),
-('linear_model33', ctypes.c_double * 15),
-('linear_model34', ctypes.c_double * 15),
-('linear_model35', ctypes.c_double * 15),
-('linear_model36', ctypes.c_double * 15),
-('linear_model37', ctypes.c_double * 15),
-('linear_model38', ctypes.c_double * 15),
-('linear_model39', ctypes.c_double * 15),
-('linear_model40', ctypes.c_double * 15),
-('linear_model41', ctypes.c_double * 15),
-('linear_model42', ctypes.c_double * 15),
-('linear_model43', ctypes.c_double * 15),
-('linear_model44', ctypes.c_double * 15),
-('linear_model45', ctypes.c_double * 15),
-('linear_model46', ctypes.c_double * 15),
-('linear_model47', ctypes.c_double * 15),
-('linear_model48', ctypes.c_double * 15),
-('linear_model49', ctypes.c_double * 15),
 ]
 
 MPC_Project_FORCESPRO_params = {'xinit' : np.array([]),
@@ -194,46 +114,6 @@
 'linear_model7' : np.array([]),
 'linear_model8' : np.array([]),
 'linear_model9' : np.array([]),
-'linear_model10' : np.array([]),
-'linear_model11' : np.array([]),
-'linear_model12' : np.array([]),
-'linear_model13' : np.array([]),
-'linear_model14' : np.array([]),
-'linear_model15' : np.array([]),
-'linear_model16' : np.array([]),
-'linear_model17' : np.array([]),
-'linear_model18' : np.array([]),
-'linear_model19' : np.array([]),
-'linear_model20' : np.array([]),
-'linear_model21' : np.array([]),
-'linear_model22' : np.array([]),
-'linear_model23' : np.array([]),
-'linear_model24' : np.array([]),
-'linear_model25' : np.array([]),
-'linear_model26' : np.array([]),
-'linear_model27' : np.array([]),
-'linear_model28' : np.array([]),
-'linear_model29' : np.array([]),
-'linear_model30' : np.array([]),
-'linear_model31' : np.array([]),
-'linear_model32' : np.array([]),
-'linear_model33' : np.array([]),
-'linear_model34' : np.array([]),
-'linear_model35' : np.array([]),
-'linear_model36' : np.array([]),
-'linear_model37' : np.array([]),
-'linear_model38' : np.array([]),
-'linear_model39' : np.array([]),
-'linear_model40' : np.array([]),
-'linear_model41' : np.array([]),
-'linear_model42' : np.array([]),
-'linear_model43' : np.array([]),
-'linear_model44' : np.array([]),
-'linear_model45' : np.array([]),
-'linear_model46' : np.array([]),
-'linear_model47' : np.array([]),
-'linear_model48' : np.array([]),
-'linear_model49' : np.array([]),
 }
 params = {'xinit' : np.array([]),
 'linear_model1' : np.array([]),
@@ -245,46 +125,6 @@
 'linear_model7' : np.array([]),
 'linear_model8' : np.array([]),
 'linear_model9' : np.array([]),
-'linear_model10' : np.array([]),
-'linear_model11' : np.array([]),
-'linear_model12' : np.array([]),
-'linear_model13' : np.array([]),
-'linear_model14' : np.array([]),
-'linear_model15' : np.array([]),
-'linear_model16' : np.array([]),
-'linear_model17' : np.array([]),
-'linear_model18' : np.array([]),
-'linear_model19' : np.array([]),
-'linear_model20' : np.array([]),
-'linear_model21' : np.array([]),
-'linear_model22' : np.array([]),
-'linear_model23' : np.array([]),
-'linear_model24' : np.array([]),
-'linear_model25' : np.array([]),
-'linear_model26' : np.array([]),
-'linear_model27' : np.array([]),
-'linear_model28' : np.array([]),
-'linear_model29' : np.array([]),
-'linear_model30' : np.array([]),
-'linear_model31' : np.array([]),
-'linear_model32' : np.array([]),
-'linear_model33' : np.array([]),
-'linear_model34' : np.array([]),
-'linear_model35' : np.array([]),
-'linear_model36' : np.array([]),
-'linear_model37' : np.array([]),
-'linear_model38' : np.array([]),
-'linear_model39' : np.array([]),
-'linear_model40' : np.array([]),
-'linear_model41' : np.array([]),
-'linear_model42' : np.array([]),
-'linear_model43' : np.array([]),
-'linear_model44' : np.array([]),
-'linear_model45' : np.array([]),
-'linear_model46' : np.array([]),
-'linear_model47' : np.array([]),
-'linear_model48' : np.array([]),
-'linear_model49' : np.array([]),
 }
 MPC_Project_FORCESPRO_params_types = {'xinit' : np.float64,
 'linear_model1' : np.float64,
@@ -296,46 +136,6 @@
 'linear_model7' : np.float64,
 'linear_model8' : np.float64,
 'linear_model9' : np.float64,
-'linear_model10' : np.float64,
-'linear_model11' : np.float64,
-'linear_model12' : np.float64,
-'linear_model13' : np.float64,
-'linear_model14' : np.float64,
-'linear_model15' : np.float64,
-'linear_model16' : np.float64,
-'linear_model17' : np.float64,
-'linear_model18' : np.float64,
-'linear_model19' : np.float64,
-'linear_model20' : np.float64,
-'linear_model21' : np.float64,
-'linear_model22' : np.float64,
-'linear_model23' : np.float64,
-'linear_model24' : np.float64,
-'linear_model25' : np.float64,
-'linear_model26' : np.float64,
-'linear_model27' : np.float64,
-'linear_model28' : np.float64,
-'linear_model29' : np.float64,
-'linear_model30' : np.float64,
-'linear_model31' : np.float64,
-'linear_model32' : np.float64,
-'linear_model33' : np.float64,
-'linear_model34' : np.float64,
-'linear_model35' : np.float64,
-'linear_model36' : np.float64,
-'linear_model37' : np.float64,
-'linear_model38' : np.float64,
-'linear_model39' : np.float64,
-'linear_model40' : np.float64,
-'linear_model41' : np.float64,
-'linear_model42' : np.float64,
-'linear_model43' : np.float64,
-'linear_model44' : np.float64,
-'linear_model45' : np.float64,
-'linear_model46' : np.float64,
-'linear_model47' : np.float64,
-'linear_model48' : np.float64,
-'linear_model49' : np.float64,
 }
 
 class MPC_Project_FORCESPRO_outputs_ctypes(ctypes.Structure):
@@ -399,46 +199,6 @@
        PARAMS['linear_model7'] - matrix of size [3 x 5]
        PARAMS['linear_model8'] - matrix of size [3 x 5]
        PARAMS['linear_model9'] - matrix of size [3 x 5]
-       PARAMS['linear_model10'] - matrix of size [3 x 5]
-       PARAMS['linear_model11'] - matrix of size [3 x 5]
-       PARAMS['linear_model12'] - matrix of size [3 x 5]
-       PARAMS['linear_model13'] - matrix of size [3 x 5]
-       PARAMS['linear_model14'] - matrix of size [3 x 5]
-       PARAMS['linear_model15'] - matrix of size [3 x 5]
-       PARAMS['linear_model16'] - matrix of size [3 x 5]
-       PARAMS['linear_model17'] - matrix of size [3 x 5]
-       PARAMS['linear_model18'] - matrix of size [3 x 5]
-       PARAMS['linear_model19'] - matrix of size [3 x 5]
-       PARAMS['linear_model20'] - matrix of size [3 x 5]
-       PARAMS['linear_model21'] - matrix of size [3 x 5]
-       PARAMS['linear_model22'] - matrix of size [3 x 5]
-       PARAMS['linear_model23'] - matrix of size [3 x 5]
-       PARAMS['linear_model24'] - matrix of size [3 x 5]
-       PARAMS['linear_model25'] - matrix of size [3 x 5]
-       PARAMS['linear_model26'] - matrix of size [3 x 5]
-       PARAMS['linear_model27'] - matrix of size [3 x 5]
-       PARAMS['linear_model28'] - matrix of size [3 x 5]
-       PARAMS['linear_model29'] - matrix of size [3 x 5]
-       PARAMS['linear_model30'] - matrix of size [3 x 5]
-       PARAMS['linear_model31'] - matrix of size [3 x 5]
-       PARAMS['linear_model32'] - matrix of size [3 x 5]
-       PARAMS['linear_model33'] - matrix of size [3 x 5]
-       PARAMS['linear_model34'] - matrix of size [3 x 5]
-       PARAMS['linear_model35'] - matrix of size [3 x 5]
-       PARAMS['linear_model36'] - matrix of size [3 x 5]
-       PARAMS['linear_model37'] - matrix of size [3 x 5]
-       PARAMS['linear_model38'] - matrix of size [3 x 5]
-       PARAMS['linear_model39'] - matrix of size [3 x 5]
-       PARAMS['linear_model40'] - matrix of size [3 x 5]
-       PARAMS['linear_model41'] - matrix of size [3 x 5]
-       PARAMS['linear_model42'] - matrix of size [3 x 5]
-       PARAMS['linear_model43'] - matrix of size [3 x 5]
-       PARAMS['linear_model44'] - matrix of size [3 x 5]
-       PARAMS['linear_model45'] - matrix of size [3 x 5]
-       PARAMS['linear_model46'] - matrix of size [3 x 5]
-       PARAMS['linear_model47'] - matrix of size [3 x 5]
-       PARAMS['linear_model48'] - matrix of size [3 x 5]
-       PARAMS['linear_model49'] - matrix of size [3 x 5]
 
    OUTPUT returns the values of the last iteration of the solver where
        OUTPUT['output'] - column vector of size 50
Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO.m
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>% MPC_Project_FORCESPRO - a fast solver generated by FORCESPRO v5.1.0\n%\n%   OUTPUT = MPC_Project_FORCESPRO(PARAMS) solves a multistage problem\n%   subject to the parameters supplied in the following struct:\n%       PARAMS.xinit - column vector of length 3\n%       PARAMS.linear_model1 - matrix of size [3 x 5]\n%       PARAMS.linear_model2 - matrix of size [3 x 5]\n%       PARAMS.linear_model3 - matrix of size [3 x 5]\n%       PARAMS.linear_model4 - matrix of size [3 x 5]\n%       PARAMS.linear_model5 - matrix of size [3 x 5]\n%       PARAMS.linear_model6 - matrix of size [3 x 5]\n%       PARAMS.linear_model7 - matrix of size [3 x 5]\n%       PARAMS.linear_model8 - matrix of size [3 x 5]\n%       PARAMS.linear_model9 - matrix of size [3 x 5]\n%       PARAMS.linear_model10 - matrix of size [3 x 5]\n%       PARAMS.linear_model11 - matrix of size [3 x 5]\n%       PARAMS.linear_model12 - matrix of size [3 x 5]\n%       PARAMS.linear_model13 - matrix of size [3 x 5]\n%       PARAMS.linear_model14 - matrix of size [3 x 5]\n%       PARAMS.linear_model15 - matrix of size [3 x 5]\n%       PARAMS.linear_model16 - matrix of size [3 x 5]\n%       PARAMS.linear_model17 - matrix of size [3 x 5]\n%       PARAMS.linear_model18 - matrix of size [3 x 5]\n%       PARAMS.linear_model19 - matrix of size [3 x 5]\n%       PARAMS.linear_model20 - matrix of size [3 x 5]\n%       PARAMS.linear_model21 - matrix of size [3 x 5]\n%       PARAMS.linear_model22 - matrix of size [3 x 5]\n%       PARAMS.linear_model23 - matrix of size [3 x 5]\n%       PARAMS.linear_model24 - matrix of size [3 x 5]\n%       PARAMS.linear_model25 - matrix of size [3 x 5]\n%       PARAMS.linear_model26 - matrix of size [3 x 5]\n%       PARAMS.linear_model27 - matrix of size [3 x 5]\n%       PARAMS.linear_model28 - matrix of size [3 x 5]\n%       PARAMS.linear_model29 - matrix of size [3 x 5]\n%       PARAMS.linear_model30 - matrix of size [3 x 5]\n%       PARAMS.linear_model31 - matrix of size [3 x 5]\n%       PARAMS.linear_model32 - matrix of size [3 x 5]\n%       PARAMS.linear_model33 - matrix of size [3 x 5]\n%       PARAMS.linear_model34 - matrix of size [3 x 5]\n%       PARAMS.linear_model35 - matrix of size [3 x 5]\n%       PARAMS.linear_model36 - matrix of size [3 x 5]\n%       PARAMS.linear_model37 - matrix of size [3 x 5]\n%       PARAMS.linear_model38 - matrix of size [3 x 5]\n%       PARAMS.linear_model39 - matrix of size [3 x 5]\n%       PARAMS.linear_model40 - matrix of size [3 x 5]\n%       PARAMS.linear_model41 - matrix of size [3 x 5]\n%       PARAMS.linear_model42 - matrix of size [3 x 5]\n%       PARAMS.linear_model43 - matrix of size [3 x 5]\n%       PARAMS.linear_model44 - matrix of size [3 x 5]\n%       PARAMS.linear_model45 - matrix of size [3 x 5]\n%       PARAMS.linear_model46 - matrix of size [3 x 5]\n%       PARAMS.linear_model47 - matrix of size [3 x 5]\n%       PARAMS.linear_model48 - matrix of size [3 x 5]\n%       PARAMS.linear_model49 - matrix of size [3 x 5]\n%\n%   OUTPUT returns the values of the last iteration of the solver where\n%       OUTPUT.output - column vector of size 50\n%\n%   [OUTPUT, EXITFLAG] = MPC_Project_FORCESPRO(PARAMS) returns additionally\n%   the integer EXITFLAG indicating the state of the solution with \n%       1 - OPTIMAL solution has been found (subject to desired accuracy)\n%       0 - Timeout - maximum number of iterations reached\n%      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.\n%    -100 - License error\n%\n%   [OUTPUT, EXITFLAG, INFO] = MPC_Project_FORCESPRO(PARAMS) returns \n%   additional information about the last iterate:\n%       INFO.it        - number of iterations that lead to this result\n%       INFO.res_eq    - max. equality constraint residual\n%       INFO.res_ineq  - max. inequality constraint residual\n%       INFO.pobj      - primal objective\n%       INFO.dobj      - dual objective\n%       INFO.dgap      - duality gap := pobj - dobj\n%       INFO.rdgap     - relative duality gap := |dgap / pobj|\n%       INFO.mu        - duality measure\n%       INFO.sigma     - centering parameter\n%       INFO.lsit_aff  - iterations of affine line search\n%       INFO.lsit_cc   - iterations of line search (combined direction)\n%       INFO.step_aff  - step size (affine direction)\n%       INFO.step_cc   - step size (centering direction)\n%       INFO.solvetime - Time needed for solve (wall clock time)\n%\n% See also COPYING\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO.m b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO.m
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO.m	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO.m	(date 1646676210269)
@@ -12,46 +12,6 @@
 %       PARAMS.linear_model7 - matrix of size [3 x 5]
 %       PARAMS.linear_model8 - matrix of size [3 x 5]
 %       PARAMS.linear_model9 - matrix of size [3 x 5]
-%       PARAMS.linear_model10 - matrix of size [3 x 5]
-%       PARAMS.linear_model11 - matrix of size [3 x 5]
-%       PARAMS.linear_model12 - matrix of size [3 x 5]
-%       PARAMS.linear_model13 - matrix of size [3 x 5]
-%       PARAMS.linear_model14 - matrix of size [3 x 5]
-%       PARAMS.linear_model15 - matrix of size [3 x 5]
-%       PARAMS.linear_model16 - matrix of size [3 x 5]
-%       PARAMS.linear_model17 - matrix of size [3 x 5]
-%       PARAMS.linear_model18 - matrix of size [3 x 5]
-%       PARAMS.linear_model19 - matrix of size [3 x 5]
-%       PARAMS.linear_model20 - matrix of size [3 x 5]
-%       PARAMS.linear_model21 - matrix of size [3 x 5]
-%       PARAMS.linear_model22 - matrix of size [3 x 5]
-%       PARAMS.linear_model23 - matrix of size [3 x 5]
-%       PARAMS.linear_model24 - matrix of size [3 x 5]
-%       PARAMS.linear_model25 - matrix of size [3 x 5]
-%       PARAMS.linear_model26 - matrix of size [3 x 5]
-%       PARAMS.linear_model27 - matrix of size [3 x 5]
-%       PARAMS.linear_model28 - matrix of size [3 x 5]
-%       PARAMS.linear_model29 - matrix of size [3 x 5]
-%       PARAMS.linear_model30 - matrix of size [3 x 5]
-%       PARAMS.linear_model31 - matrix of size [3 x 5]
-%       PARAMS.linear_model32 - matrix of size [3 x 5]
-%       PARAMS.linear_model33 - matrix of size [3 x 5]
-%       PARAMS.linear_model34 - matrix of size [3 x 5]
-%       PARAMS.linear_model35 - matrix of size [3 x 5]
-%       PARAMS.linear_model36 - matrix of size [3 x 5]
-%       PARAMS.linear_model37 - matrix of size [3 x 5]
-%       PARAMS.linear_model38 - matrix of size [3 x 5]
-%       PARAMS.linear_model39 - matrix of size [3 x 5]
-%       PARAMS.linear_model40 - matrix of size [3 x 5]
-%       PARAMS.linear_model41 - matrix of size [3 x 5]
-%       PARAMS.linear_model42 - matrix of size [3 x 5]
-%       PARAMS.linear_model43 - matrix of size [3 x 5]
-%       PARAMS.linear_model44 - matrix of size [3 x 5]
-%       PARAMS.linear_model45 - matrix of size [3 x 5]
-%       PARAMS.linear_model46 - matrix of size [3 x 5]
-%       PARAMS.linear_model47 - matrix of size [3 x 5]
-%       PARAMS.linear_model48 - matrix of size [3 x 5]
-%       PARAMS.linear_model49 - matrix of size [3 x 5]
 %
 %   OUTPUT returns the values of the last iteration of the solver where
 %       OUTPUT.output - column vector of size 50
Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_lib.mdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Model {\n  Name\t\t\t  \"MPC_Project_FORCESPRO\"\n  Version\t\t  8.0\n  MdlSubVersion\t\t  0\n  GraphicalInterface {\n    NumRootInports\t    0\n    NumRootOutports\t    0\n    ParameterArgumentNames  \"\"\n    ComputedModelVersion    \"1.2\"\n    NumModelReferences\t    0\n    NumTestPointedSignals   0\n  }\n  SavedCharacterEncoding  \"windows-1252\"\n  SaveDefaultBlockParams  on\n  ScopeRefreshTime\t  0.035000\n  OverrideScopeRefreshTime on\n  DisableAllScopes\t  off\n  DataTypeOverride\t  \"UseLocalSettings\"\n  DataTypeOverrideAppliesTo \"AllNumericTypes\"\n  MinMaxOverflowLogging\t  \"UseLocalSettings\"\n  MinMaxOverflowArchiveMode \"Overwrite\"\n  FPTRunName\t\t  \"Run 1\"\n  MaxMDLFileLineLength\t  120\n  Object {\n    $PropName\t\t    \"BdWindowsInfo\"\n    $ObjectID\t\t    1\n    $ClassName\t\t    \"Simulink.BDWindowsInfo\"\n    Object {\n      $PropName\t\t      \"WindowsInfo\"\n      $ObjectID\t\t      2\n      $ClassName\t      \"Simulink.WindowInfo\"\n      IsActive\t\t      [1]\n      Location\t\t      [385.0, 84.0, 816.0, 539.0]\n      Object {\n\t$PropName\t\t\"ModelBrowserInfo\"\n\t$ObjectID\t\t3\n\t$ClassName\t\t\"Simulink.ModelBrowserInfo\"\n\tVisible\t\t\t[1]\n\tDockPosition\t\t\"Left\"\n\tWidth\t\t\t[50]\n\tHeight\t\t\t[50]\n\tFilter\t\t\t[9]\n      }\n      Object {\n\t$PropName\t\t\"ExplorerBarInfo\"\n\t$ObjectID\t\t4\n\t$ClassName\t\t\"Simulink.ExplorerBarInfo\"\n\tVisible\t\t\t[1]\n      }\n      Object {\n\t$PropName\t\t\"EditorsInfo\"\n\t$ObjectID\t\t5\n\t$ClassName\t\t\"Simulink.EditorInfo\"\n\tIsActive\t\t[1]\n\tViewObjType\t\t\"SimulinkTopLevel\"\n\tLoadSaveID\t\t\"0\"\n\tExtents\t\t\t[569.0, 363.0]\n\tZoomFactor\t\t[1.0]\n\tOffset\t\t\t[0.0, 0.0]\n      }\n    }\n  }\n  Created\t\t  \"3/6/2022 3:57:10 PM\"\n  Creator\t\t  \"embotech AG\"\n  UpdateHistory\t\t  \"UpdateHistoryNever\"\n  ModifiedByFormat\t  \"%<Auto>\"\n  LastModifiedBy\t  \"embotech AG\"\n  ModifiedDateFormat\t  \"%<Auto>\"\n  LastModifiedDate\t  \"3/6/2022 3:57:10 PM\"\n  RTWModifiedTimeStamp\t  315310195\n  ModelVersionFormat\t  \"1.%<AutoIncrement:2>\"\n  ConfigurationManager\t  \"None\"\n  SampleTimeColors\t  off\n  SampleTimeAnnotations\t  off\n  LibraryLinkDisplay\t  \"disabled\"\n  WideLines\t\t  off\n  ShowLineDimensions\t  off\n  ShowPortDataTypes\t  off\n  ShowDesignRanges\t  off\n  ShowLoopsOnError\t  on\n  IgnoreBidirectionalLines off\n  ShowStorageClass\t  off\n  ShowTestPointIcons\t  on\n  ShowSignalResolutionIcons on\n  ShowViewerIcons\t  on\n  SortedOrder\t\t  off\n  ExecutionContextIcon\t  off\n  ShowLinearizationAnnotations on\n  BlockNameDataTip\t  off\n  BlockParametersDataTip  off\n  BlockDescriptionStringDataTip\toff\n  ToolBar\t\t  on\n  StatusBar\t\t  on\n  BrowserShowLibraryLinks off\n  BrowserLookUnderMasks\t  off\n  SimulationMode\t  \"normal\"\n  LinearizationMsg\t  \"none\"\n  Profile\t\t  off\n  ParamWorkspaceSource\t  \"MATLABWorkspace\"\n  AccelSystemTargetFile\t  \"accel.tlc\"\n  AccelTemplateMakefile\t  \"accel_default_tmf\"\n  AccelMakeCommand\t  \"make_rtw\"\n  TryForcingSFcnDF\t  off\n  Object {\n    $PropName\t\t    \"DataLoggingOverride\"\n    $ObjectID\t\t    6\n    $ClassName\t\t    \"Simulink.SimulationData.ModelLoggingInfo\"\n    model_\t\t    \"model_2012b\"\n    overrideMode_\t    [0.0]\n    Array {\n      Type\t\t      \"Cell\"\n      Dimension\t\t      1\n      Cell\t\t      \"model_2012b\"\n      PropName\t\t      \"logAsSpecifiedByModels_\"\n    }\n    Array {\n      Type\t\t      \"Cell\"\n      Dimension\t\t      1\n      Cell\t\t      []\n      PropName\t\t      \"logAsSpecifiedByModelsSSIDs_\"\n    }\n  }\n  RecordCoverage\t  off\n  CovPath\t\t  \"/\"\n  CovSaveName\t\t  \"covdata\"\n  CovMetricSettings\t  \"dw\"\n  CovNameIncrementing\t  off\n  CovHtmlReporting\t  on\n  CovForceBlockReductionOff on\n  covSaveCumulativeToWorkspaceVar on\n  CovSaveSingleToWorkspaceVar on\n  CovCumulativeVarName\t  \"covCumulativeData\"\n  CovCumulativeReport\t  off\n  CovReportOnPause\t  on\n  CovModelRefEnable\t  \"Off\"\n  CovExternalEMLEnable\t  off\n  ExtModeBatchMode\t  off\n  ExtModeEnableFloating\t  on\n  ExtModeTrigType\t  \"manual\"\n  ExtModeTrigMode\t  \"normal\"\n  ExtModeTrigPort\t  \"1\"\n  ExtModeTrigElement\t  \"any\"\n  ExtModeTrigDuration\t  1000\n  ExtModeTrigDurationFloating \"auto\"\n  ExtModeTrigHoldOff\t  0\n  ExtModeTrigDelay\t  0\n  ExtModeTrigDirection\t  \"rising\"\n  ExtModeTrigLevel\t  0\n  ExtModeArchiveMode\t  \"off\"\n  ExtModeAutoIncOneShot\t  off\n  ExtModeIncDirWhenArm\t  off\n  ExtModeAddSuffixToVar\t  off\n  ExtModeWriteAllDataToWs off\n  ExtModeArmWhenConnect\t  on\n  ExtModeSkipDownloadWhenConnect off\n  ExtModeLogAll\t\t  on\n  ExtModeAutoUpdateStatusClock on\n  BufferReuse\t\t  on\n  ShowModelReferenceBlockVersion off\n  ShowModelReferenceBlockIO off\n  Array {\n    Type\t\t    \"Handle\"\n    Dimension\t\t    1\n    Simulink.ConfigSet {\n      $ObjectID\t\t      7\n      Version\t\t      \"1.12.1\"\n      Array {\n\tType\t\t\t\"Handle\"\n\tDimension\t\t8\n\tSimulink.SolverCC {\n\t  $ObjectID\t\t  8\n\t  Version\t\t  \"1.12.1\"\n\t  StartTime\t\t  \"0.0\"\n\t  StopTime\t\t  \"10.0\"\n\t  AbsTol\t\t  \"auto\"\n\t  FixedStep\t\t  \"auto\"\n\t  InitialStep\t\t  \"auto\"\n\t  MaxNumMinSteps\t  \"-1\"\n\t  MaxOrder\t\t  5\n\t  ZcThreshold\t\t  \"auto\"\n\t  ConsecutiveZCsStepRelTol \"10*128*eps\"\n\t  MaxConsecutiveZCs\t  \"1000\"\n\t  ExtrapolationOrder\t  4\n\t  NumberNewtonIterations  1\n\t  MaxStep\t\t  \"auto\"\n\t  MinStep\t\t  \"auto\"\n\t  MaxConsecutiveMinStep\t  \"1\"\n\t  RelTol\t\t  \"1e-3\"\n\t  SolverMode\t\t  \"Auto\"\n\t  EnableConcurrentExecution off\n\t  ConcurrentTasks\t  off\n\t  Solver\t\t  \"ode45\"\n\t  SolverName\t\t  \"ode45\"\n\t  SolverJacobianMethodControl \"auto\"\n\t  ShapePreserveControl\t  \"DisableAll\"\n\t  ZeroCrossControl\t  \"UseLocalSettings\"\n\t  ZeroCrossAlgorithm\t  \"Nonadaptive\"\n\t  AlgebraicLoopSolver\t  \"TrustRegion\"\n\t  SolverResetMethod\t  \"Fast\"\n\t  PositivePriorityOrder\t  off\n\t  AutoInsertRateTranBlk\t  off\n\t  SampleTimeConstraint\t  \"Unconstrained\"\n\t  InsertRTBMode\t\t  \"Whenever possible\"\n\t}\n\tSimulink.DataIOCC {\n\t  $ObjectID\t\t  9\n\t  Version\t\t  \"1.12.1\"\n\t  Decimation\t\t  \"1\"\n\t  ExternalInput\t\t  \"[t, u]\"\n\t  FinalStateName\t  \"xFinal\"\n\t  InitialState\t\t  \"xInitial\"\n\t  LimitDataPoints\t  on\n\t  MaxDataPoints\t\t  \"1000\"\n\t  LoadExternalInput\t  off\n\t  LoadInitialState\t  off\n\t  SaveFinalState\t  off\n\t  SaveCompleteFinalSimState off\n\t  SaveFormat\t\t  \"Array\"\n\t  SignalLoggingSaveFormat \"Dataset\"\n\t  SaveOutput\t\t  on\n\t  SaveState\t\t  off\n\t  SignalLogging\t\t  on\n\t  DSMLogging\t\t  on\n\t  InspectSignalLogs\t  off\n\t  SaveTime\t\t  on\n\t  ReturnWorkspaceOutputs  off\n\t  StateSaveName\t\t  \"xout\"\n\t  TimeSaveName\t\t  \"tout\"\n\t  OutputSaveName\t  \"yout\"\n\t  SignalLoggingName\t  \"logsout\"\n\t  DSMLoggingName\t  \"dsmout\"\n\t  OutputOption\t\t  \"RefineOutputTimes\"\n\t  OutputTimes\t\t  \"[]\"\n\t  ReturnWorkspaceOutputsName \"out\"\n\t  Refine\t\t  \"1\"\n\t}\n\tSimulink.OptimizationCC {\n\t  $ObjectID\t\t  10\n\t  Version\t\t  \"1.12.1\"\n\t  Array {\n\t    Type\t\t    \"Cell\"\n\t    Dimension\t\t    8\n\t    Cell\t\t    \"BooleansAsBitfields\"\n\t    Cell\t\t    \"PassReuseOutputArgsAs\"\n\t    Cell\t\t    \"PassReuseOutputArgsThreshold\"\n\t    Cell\t\t    \"ZeroExternalMemoryAtStartup\"\n\t    Cell\t\t    \"ZeroInternalMemoryAtStartup\"\n\t    Cell\t\t    \"OptimizeModelRefInitCode\"\n\t    Cell\t\t    \"NoFixptDivByZeroProtection\"\n\t    Cell\t\t    \"UseSpecifiedMinMax\"\n\t    PropName\t\t    \"DisabledProps\"\n\t  }\n\t  BlockReduction\t  on\n\t  BooleanDataType\t  on\n\t  ConditionallyExecuteInputs on\n\t  InlineParams\t\t  off\n\t  UseIntDivNetSlope\t  off\n\t  UseFloatMulNetSlope\t  off\n\t  UseSpecifiedMinMax\t  off\n\t  InlineInvariantSignals  off\n\t  OptimizeBlockIOStorage  on\n\t  BufferReuse\t\t  on\n\t  EnhancedBackFolding\t  off\n\t  StrengthReduction\t  off\n\t  ExpressionFolding\t  on\n\t  BooleansAsBitfields\t  off\n\t  BitfieldContainerType\t  \"uint_T\"\n\t  EnableMemcpy\t\t  on\n\t  MemcpyThreshold\t  64\n\t  PassReuseOutputArgsAs\t  \"Structure reference\"\n\t  ExpressionDepthLimit\t  2147483647\n\t  FoldNonRolledExpr\t  on\n\t  LocalBlockOutputs\t  on\n\t  RollThreshold\t\t  5\n\t  SystemCodeInlineAuto\t  off\n\t  StateBitsets\t\t  off\n\t  DataBitsets\t\t  off\n\t  UseTempVars\t\t  off\n\t  ZeroExternalMemoryAtStartup on\n\t  ZeroInternalMemoryAtStartup on\n\t  InitFltsAndDblsToZero\t  off\n\t  NoFixptDivByZeroProtection off\n\t  EfficientFloat2IntCast  off\n\t  EfficientMapNaN2IntZero on\n\t  OptimizeModelRefInitCode off\n\t  LifeSpan\t\t  \"inf\"\n\t  MaxStackSize\t\t  \"Inherit from target\"\n\t  BufferReusableBoundary  on\n\t  SimCompilerOptimization \"Off\"\n\t  AccelVerboseBuild\t  off\n\t  ParallelExecutionInRapidAccelerator on\n\t}\n\tSimulink.DebuggingCC {\n\t  $ObjectID\t\t  11\n\t  Version\t\t  \"1.12.1\"\n\t  RTPrefix\t\t  \"error\"\n\t  ConsistencyChecking\t  \"none\"\n\t  ArrayBoundsChecking\t  \"none\"\n\t  SignalInfNanChecking\t  \"none\"\n\t  SignalRangeChecking\t  \"none\"\n\t  ReadBeforeWriteMsg\t  \"UseLocalSettings\"\n\t  WriteAfterWriteMsg\t  \"UseLocalSettings\"\n\t  WriteAfterReadMsg\t  \"UseLocalSettings\"\n\t  AlgebraicLoopMsg\t  \"warning\"\n\t  ArtificialAlgebraicLoopMsg \"warning\"\n\t  SaveWithDisabledLinksMsg \"warning\"\n\t  SaveWithParameterizedLinksMsg\t\"warning\"\n\t  CheckSSInitialOutputMsg on\n\t  UnderspecifiedInitializationDetection\t\"Classic\"\n\t  MergeDetectMultiDrivingBlocksExec \"none\"\n\t  CheckExecutionContextPreStartOutputMsg off\n\t  CheckExecutionContextRuntimeOutputMsg\toff\n\t  SignalResolutionControl \"UseLocalSettings\"\n\t  BlockPriorityViolationMsg \"warning\"\n\t  MinStepSizeMsg\t  \"warning\"\n\t  TimeAdjustmentMsg\t  \"none\"\n\t  MaxConsecutiveZCsMsg\t  \"error\"\n\t  MaskedZcDiagnostic\t  \"warning\"\n\t  IgnoredZcDiagnostic\t  \"warning\"\n\t  SolverPrmCheckMsg\t  \"warning\"\n\t  InheritedTsInSrcMsg\t  \"warning\"\n\t  DiscreteInheritContinuousMsg \"warning\"\n\t  MultiTaskDSMMsg\t  \"error\"\n\t  MultiTaskCondExecSysMsg \"error\"\n\t  MultiTaskRateTransMsg\t  \"error\"\n\t  SingleTaskRateTransMsg  \"none\"\n\t  TasksWithSamePriorityMsg \"warning\"\n\t  SigSpecEnsureSampleTimeMsg \"warning\"\n\t  CheckMatrixSingularityMsg \"none\"\n\t  IntegerOverflowMsg\t  \"warning\"\n\t  Int32ToFloatConvMsg\t  \"warning\"\n\t  ParameterDowncastMsg\t  \"error\"\n\t  ParameterOverflowMsg\t  \"error\"\n\t  ParameterUnderflowMsg\t  \"none\"\n\t  ParameterPrecisionLossMsg \"warning\"\n\t  ParameterTunabilityLossMsg \"warning\"\n\t  FixptConstUnderflowMsg  \"none\"\n\t  FixptConstOverflowMsg\t  \"none\"\n\t  FixptConstPrecisionLossMsg \"none\"\n\t  UnderSpecifiedDataTypeMsg \"none\"\n\t  UnnecessaryDatatypeConvMsg \"none\"\n\t  VectorMatrixConversionMsg \"none\"\n\t  InvalidFcnCallConnMsg\t  \"error\"\n\t  FcnCallInpInsideContextMsg \"EnableAllAsError\"\n\t  SignalLabelMismatchMsg  \"none\"\n\t  UnconnectedInputMsg\t  \"warning\"\n\t  UnconnectedOutputMsg\t  \"warning\"\n\t  UnconnectedLineMsg\t  \"warning\"\n\t  SFcnCompatibilityMsg\t  \"none\"\n\t  FrameProcessingCompatibilityMsg \"warning\"\n\t  UniqueDataStoreMsg\t  \"none\"\n\t  BusObjectLabelMismatch  \"warning\"\n\t  RootOutportRequireBusObject \"warning\"\n\t  AssertControl\t\t  \"UseLocalSettings\"\n\t  EnableOverflowDetection off\n\t  ModelReferenceIOMsg\t  \"none\"\n\t  ModelReferenceMultiInstanceNormalModeStructChecksumCheck \"error\"\n\t  ModelReferenceVersionMismatchMessage \"none\"\n\t  ModelReferenceIOMismatchMessage \"none\"\n\t  ModelReferenceCSMismatchMessage \"none\"\n\t  UnknownTsInhSupMsg\t  \"warning\"\n\t  ModelReferenceDataLoggingMessage \"warning\"\n\t  ModelReferenceSymbolNameMessage \"warning\"\n\t  ModelReferenceExtraNoncontSigs \"error\"\n\t  StateNameClashWarn\t  \"warning\"\n\t  SimStateInterfaceChecksumMismatchMsg \"warning\"\n\t  SimStateOlderReleaseMsg \"error\"\n\t  InitInArrayFormatMsg\t  \"warning\"\n\t  StrictBusMsg\t\t  \"ErrorLevel1\"\n\t  BusNameAdapt\t\t  \"WarnAndRepair\"\n\t  NonBusSignalsTreatedAsBus \"none\"\n\t  LoggingUnavailableSignals \"error\"\n\t  BlockIODiagnostic\t  \"none\"\n\t  SFUnusedDataAndEventsDiag \"warning\"\n\t  SFUnexpectedBacktrackingDiag \"warning\"\n\t  SFInvalidInputDataAccessInChartInitDiag \"warning\"\n\t  SFNoUnconditionalDefaultTransitionDiag \"warning\"\n\t  SFTransitionOutsideNaturalParentDiag \"warning\"\n\t  SFUnconditionalTransitionShadowingDiag \"warning\"\n\t  SFUndirectedBroadcastEventsDiag \"warning\"\n\t  SFTransitionActionBeforeConditionDiag\t\"warning\"\n\t}\n\tSimulink.HardwareCC {\n\t  $ObjectID\t\t  12\n\t  Version\t\t  \"1.12.1\"\n\t  ProdBitPerChar\t  8\n\t  ProdBitPerShort\t  16\n\t  ProdBitPerInt\t\t  32\n\t  ProdBitPerLong\t  32\n\t  ProdBitPerFloat\t  32\n\t  ProdBitPerDouble\t  64\n\t  ProdBitPerPointer\t  32\n\t  ProdLargestAtomicInteger \"Char\"\n\t  ProdLargestAtomicFloat  \"None\"\n\t  ProdIntDivRoundTo\t  \"Undefined\"\n\t  ProdEndianess\t\t  \"Unspecified\"\n\t  ProdWordSize\t\t  32\n\t  ProdShiftRightIntArith  on\n\t  ProdHWDeviceType\t  \"32-bit Generic\"\n\t  TargetBitPerChar\t  8\n\t  TargetBitPerShort\t  16\n\t  TargetBitPerInt\t  32\n\t  TargetBitPerLong\t  32\n\t  TargetBitPerFloat\t  32\n\t  TargetBitPerDouble\t  64\n\t  TargetBitPerPointer\t  32\n\t  TargetLargestAtomicInteger \"Char\"\n\t  TargetLargestAtomicFloat \"None\"\n\t  TargetShiftRightIntArith on\n\t  TargetIntDivRoundTo\t  \"Undefined\"\n\t  TargetEndianess\t  \"Unspecified\"\n\t  TargetWordSize\t  32\n\t  TargetTypeEmulationWarnSuppressLevel 0\n\t  TargetPreprocMaxBitsSint 32\n\t  TargetPreprocMaxBitsUint 32\n\t  TargetHWDeviceType\t  \"Specified\"\n\t  TargetUnknown\t\t  off\n\t  ProdEqTarget\t\t  on\n\t}\n\tSimulink.ModelReferenceCC {\n\t  $ObjectID\t\t  13\n\t  Version\t\t  \"1.12.1\"\n\t  UpdateModelReferenceTargets \"IfOutOfDateOrStructuralChange\"\n\t  CheckModelReferenceTargetMessage \"error\"\n\t  EnableParallelModelReferenceBuilds off\n\t  ParallelModelReferenceErrorOnInvalidPool on\n\t  ParallelModelReferenceMATLABWorkerInit \"None\"\n\t  ModelReferenceNumInstancesAllowed \"Multi\"\n\t  PropagateVarSize\t  \"Infer from blocks in model\"\n\t  ModelReferencePassRootInputsByReference on\n\t  ModelReferenceMinAlgLoopOccurrences off\n\t  PropagateSignalLabelsOutOfModel off\n\t  SupportModelReferenceSimTargetCustomCode off\n\t}\n\tSimulink.SFSimCC {\n\t  $ObjectID\t\t  14\n\t  Version\t\t  \"1.12.1\"\n\t  SFSimEnableDebug\t  on\n\t  SFSimOverflowDetection  on\n\t  SFSimEcho\t\t  on\n\t  SimBlas\t\t  on\n\t  SimCtrlC\t\t  on\n\t  SimExtrinsic\t\t  on\n\t  SimIntegrity\t\t  on\n\t  SimUseLocalCustomCode\t  off\n\t  SimParseCustomCode\t  on\n\t  SimBuildMode\t\t  \"sf_incremental_build\"\n\t}\n\tSimulink.RTWCC {\n\t  $BackupClass\t\t  \"Simulink.RTWCC\"\n\t  $ObjectID\t\t  15\n\t  Version\t\t  \"1.12.1\"\n\t  Array {\n\t    Type\t\t    \"Cell\"\n\t    Dimension\t\t    15\n\t    Cell\t\t    \"IncludeHyperlinkInReport\"\n\t    Cell\t\t    \"GenerateTraceInfo\"\n\t    Cell\t\t    \"GenerateTraceReport\"\n\t    Cell\t\t    \"GenerateTraceReportSl\"\n\t    Cell\t\t    \"GenerateTraceReportSf\"\n\t    Cell\t\t    \"GenerateTraceReportEml\"\n\t    Cell\t\t    \"PortableWordSizes\"\n\t    Cell\t\t    \"GenerateWebview\"\n\t    Cell\t\t    \"GenerateCodeMetricsReport\"\n\t    Cell\t\t    \"GenerateCodeReplacementReport\"\n\t    Cell\t\t    \"GenerateErtSFunction\"\n\t    Cell\t\t    \"CreateSILPILBlock\"\n\t    Cell\t\t    \"CodeExecutionProfiling\"\n\t    Cell\t\t    \"CodeProfilingSaveOptions\"\n\t    Cell\t\t    \"CodeProfilingInstrumentation\"\n\t    PropName\t\t    \"DisabledProps\"\n\t  }\n\t  SystemTargetFile\t  \"grt.tlc\"\n\t  GenCodeOnly\t\t  off\n\t  MakeCommand\t\t  \"make_rtw\"\n\t  GenerateMakefile\t  on\n\t  PackageGeneratedCodeAndArtifacts off\n\t  TemplateMakefile\t  \"grt_default_tmf\"\n\t  GenerateReport\t  off\n\t  SaveLog\t\t  off\n\t  RTWVerbose\t\t  on\n\t  RetainRTWFile\t\t  off\n\t  ProfileTLC\t\t  off\n\t  TLCDebug\t\t  off\n\t  TLCCoverage\t\t  off\n\t  TLCAssert\t\t  off\n\t  ProcessScriptMode\t  \"Default\"\n\t  ConfigurationMode\t  \"Optimized\"\n\t  ConfigAtBuild\t\t  off\n\t  RTWUseLocalCustomCode\t  off\n\t  RTWUseSimCustomCode\t  off\n\t  IncludeHyperlinkInReport off\n\t  LaunchReport\t\t  off\n\t  PortableWordSizes\t  off\n\t  GenerateErtSFunction\t  off\n\t  CreateSILPILBlock\t  \"None\"\n\t  CodeExecutionProfiling  off\n\t  CodeExecutionProfileVariable \"executionProfile\"\n\t  CodeProfilingSaveOptions \"SummaryOnly\"\n\t  CodeProfilingInstrumentation off\n\t  TargetLang\t\t  \"C\"\n\t  IncludeBusHierarchyInRTWFileBlockHierarchyMap\toff\n\t  IncludeERTFirstTime\t  off\n\t  GenerateTraceInfo\t  off\n\t  GenerateTraceReport\t  off\n\t  GenerateTraceReportSl\t  off\n\t  GenerateTraceReportSf\t  off\n\t  GenerateTraceReportEml  off\n\t  GenerateCodeInfo\t  off\n\t  GenerateWebview\t  off\n\t  GenerateCodeMetricsReport off\n\t  GenerateCodeReplacementReport\toff\n\t  RTWCompilerOptimization \"Off\"\n\t  CheckMdlBeforeBuild\t  \"Off\"\n\t  CustomRebuildMode\t  \"OnUpdate\"\n\t  Array {\n\t    Type\t\t    \"Handle\"\n\t    Dimension\t\t    2\n\t    Simulink.CodeAppCC {\n\t      $ObjectID\t\t      16\n\t      Version\t\t      \"1.12.1\"\n\t      Array {\n\t\tType\t\t\t\"Cell\"\n\t\tDimension\t\t22\n\t\tCell\t\t\t\"IgnoreCustomStorageClasses\"\n\t\tCell\t\t\t\"IgnoreTestpoints\"\n\t\tCell\t\t\t\"InsertBlockDesc\"\n\t\tCell\t\t\t\"InsertPolySpaceComments\"\n\t\tCell\t\t\t\"SFDataObjDesc\"\n\t\tCell\t\t\t\"MATLABFcnDesc\"\n\t\tCell\t\t\t\"SimulinkDataObjDesc\"\n\t\tCell\t\t\t\"DefineNamingRule\"\n\t\tCell\t\t\t\"SignalNamingRule\"\n\t\tCell\t\t\t\"ParamNamingRule\"\n\t\tCell\t\t\t\"InternalIdentifier\"\n\t\tCell\t\t\t\"InlinedPrmAccess\"\n\t\tCell\t\t\t\"CustomSymbolStr\"\n\t\tCell\t\t\t\"CustomSymbolStrGlobalVar\"\n\t\tCell\t\t\t\"CustomSymbolStrType\"\n\t\tCell\t\t\t\"CustomSymbolStrField\"\n\t\tCell\t\t\t\"CustomSymbolStrFcn\"\n\t\tCell\t\t\t\"CustomSymbolStrFcnArg\"\n\t\tCell\t\t\t\"CustomSymbolStrBlkIO\"\n\t\tCell\t\t\t\"CustomSymbolStrTmpVar\"\n\t\tCell\t\t\t\"CustomSymbolStrMacro\"\n\t\tCell\t\t\t\"ReqsInCode\"\n\t\tPropName\t\t\"DisabledProps\"\n\t      }\n\t      ForceParamTrailComments off\n\t      GenerateComments\t      on\n\t      IgnoreCustomStorageClasses on\n\t      IgnoreTestpoints\t      off\n\t      IncHierarchyInIds\t      off\n\t      MaxIdLength\t      31\n\t      PreserveName\t      off\n\t      PreserveNameWithParent  off\n\t      ShowEliminatedStatement off\n\t      OperatorAnnotations     off\n\t      IncAutoGenComments      off\n\t      SimulinkDataObjDesc     off\n\t      SFDataObjDesc\t      off\n\t      MATLABFcnDesc\t      off\n\t      IncDataTypeInIds\t      off\n\t      MangleLength\t      1\n\t      CustomSymbolStrGlobalVar \"$R$N$M\"\n\t      CustomSymbolStrType     \"$N$R$M\"\n\t      CustomSymbolStrField    \"$N$M\"\n\t      CustomSymbolStrFcn      \"$R$N$M$F\"\n\t      CustomSymbolStrFcnArg   \"rt$I$N$M\"\n\t      CustomSymbolStrBlkIO    \"rtb_$N$M\"\n\t      CustomSymbolStrTmpVar   \"$N$M\"\n\t      CustomSymbolStrMacro    \"$R$N$M\"\n\t      DefineNamingRule\t      \"None\"\n\t      ParamNamingRule\t      \"None\"\n\t      SignalNamingRule\t      \"None\"\n\t      InsertBlockDesc\t      off\n\t      InsertPolySpaceComments off\n\t      SimulinkBlockComments   on\n\t      MATLABSourceComments    off\n\t      EnableCustomComments    off\n\t      InternalIdentifier      \"Classic\"\n\t      InlinedPrmAccess\t      \"Literals\"\n\t      ReqsInCode\t      off\n\t      UseSimReservedNames     off\n\t    }\n\t    Simulink.GRTTargetCC {\n\t      $BackupClass\t      \"Simulink.TargetCC\"\n\t      $ObjectID\t\t      17\n\t      Version\t\t      \"1.12.1\"\n\t      Array {\n\t\tType\t\t\t\"Cell\"\n\t\tDimension\t\t15\n\t\tCell\t\t\t\"GeneratePreprocessorConditionals\"\n\t\tCell\t\t\t\"IncludeMdlTerminateFcn\"\n\t\tCell\t\t\t\"CombineOutputUpdateFcns\"\n\t\tCell\t\t\t\"SuppressErrorStatus\"\n\t\tCell\t\t\t\"ERTCustomFileBanners\"\n\t\tCell\t\t\t\"GenerateSampleERTMain\"\n\t\tCell\t\t\t\"GenerateTestInterfaces\"\n\t\tCell\t\t\t\"ModelStepFunctionPrototypeControlCompliant\"\n\t\tCell\t\t\t\"CPPClassGenCompliant\"\n\t\tCell\t\t\t\"MultiInstanceERTCode\"\n\t\tCell\t\t\t\"PurelyIntegerCode\"\n\t\tCell\t\t\t\"SupportComplex\"\n\t\tCell\t\t\t\"SupportAbsoluteTime\"\n\t\tCell\t\t\t\"SupportContinuousTime\"\n\t\tCell\t\t\t\"SupportNonInlinedSFcns\"\n\t\tPropName\t\t\"DisabledProps\"\n\t      }\n\t      TargetFcnLib\t      \"ansi_tfl_table_tmw.mat\"\n\t      TargetLibSuffix\t      \"\"\n\t      TargetPreCompLibLocation \"\"\n\t      CodeReplacementLibrary  \"ANSI_C\"\n\t      UtilityFuncGeneration   \"Auto\"\n\t      ERTMultiwordTypeDef     \"System defined\"\n\t      ERTMultiwordLength      256\n\t      MultiwordLength\t      2048\n\t      GenerateFullHeader      on\n\t      GenerateSampleERTMain   off\n\t      GenerateTestInterfaces  off\n\t      IsPILTarget\t      off\n\t      ModelReferenceCompliant on\n\t      ParMdlRefBuildCompliant on\n\t      CompOptLevelCompliant   on\n\t      ConcurrentExecutionCompliant on\n\t      IncludeMdlTerminateFcn  on\n\t      GeneratePreprocessorConditionals \"Disable all\"\n\t      CombineOutputUpdateFcns on\n\t      CombineSignalStateStructs\toff\n\t      SuppressErrorStatus     off\n\t      ERTFirstTimeCompliant   off\n\t      IncludeFileDelimiter    \"Auto\"\n\t      ERTCustomFileBanners    off\n\t      SupportAbsoluteTime     on\n\t      LogVarNameModifier      \"rt_\"\n\t      MatFileLogging\t      on\n\t      MultiInstanceERTCode    off\n\t      SupportNonFinite\t      on\n\t      SupportComplex\t      on\n\t      PurelyIntegerCode\t      off\n\t      SupportContinuousTime   on\n\t      SupportNonInlinedSFcns  on\n\t      SupportVariableSizeSignals off\n\t      EnableShiftOperators    on\n\t      ParenthesesLevel\t      \"Nominal\"\n\t      ModelStepFunctionPrototypeControlCompliant off\n\t      CPPClassGenCompliant    off\n\t      AutosarCompliant\t      off\n\t      GRTInterface\t      off\n\t      UseMalloc\t\t      off\n\t      ExtMode\t\t      off\n\t      ExtModeStaticAlloc      off\n\t      ExtModeTesting\t      off\n\t      ExtModeStaticAllocSize  1000000\n\t      ExtModeTransport\t      0\n\t      ExtModeMexFile\t      \"ext_comm\"\n\t      ExtModeIntrfLevel\t      \"Level1\"\n\t      RTWCAPISignals\t      off\n\t      RTWCAPIParams\t      off\n\t      RTWCAPIStates\t      off\n\t      RTWCAPIRootIO\t      off\n\t      GenerateASAP2\t      off\n\t    }\n\t    PropName\t\t    \"Components\"\n\t  }\n\t}\n\tPropName\t\t\"Components\"\n      }\n      Name\t\t      \"Configuration\"\n      CurrentDlgPage\t      \"Solver\"\n      ConfigPrmDlgPosition     [ 520, 225, 1400, 855 ] \n    }\n    PropName\t\t    \"ConfigurationSets\"\n  }\n  Simulink.ConfigSet {\n    $PropName\t\t    \"ActiveConfigurationSet\"\n    $ObjectID\t\t    7\n  }\n  Object {\n    $PropName\t\t    \"DataTransfer\"\n    $ObjectID\t\t    18\n    $ClassName\t\t    \"Simulink.GlobalDataTransfer\"\n    DefaultTransitionBetweenSyncTasks \"Ensure deterministic transfer (maximum delay)\"\n    DefaultTransitionBetweenAsyncTasks \"Ensure data integrity only\"\n    DefaultTransitionBetweenContTasks \"Ensure deterministic transfer (minimum delay)\"\n    DefaultExtrapolationMethodBetweenContTasks \"None\"\n    AutoInsertRateTranBlk   [0]\n  }\n  ExplicitPartitioning\t  off\n  BlockDefaults {\n    ForegroundColor\t    \"black\"\n    BackgroundColor\t    \"white\"\n    DropShadow\t\t    off\n    NamePlacement\t    \"normal\"\n    FontName\t\t    \"Helvetica\"\n    FontSize\t\t    10\n    FontWeight\t\t    \"normal\"\n    FontAngle\t\t    \"normal\"\n    ShowName\t\t    on\n    BlockRotation\t    0\n    BlockMirror\t\t    off\n  }\n  AnnotationDefaults {\n    HorizontalAlignment\t    \"center\"\n    VerticalAlignment\t    \"middle\"\n    ForegroundColor\t    \"black\"\n    BackgroundColor\t    \"white\"\n    DropShadow\t\t    off\n    FontName\t\t    \"Helvetica\"\n    FontSize\t\t    10\n    FontWeight\t\t    \"normal\"\n    FontAngle\t\t    \"normal\"\n    UseDisplayTextAsClickCallback off\n  }\n  LineDefaults {\n    FontName\t\t    \"Helvetica\"\n    FontSize\t\t    9\n    FontWeight\t\t    \"normal\"\n    FontAngle\t\t    \"normal\"\n  }\n  MaskDefaults {\n    SelfModifiable\t    \"off\"\n    IconFrame\t\t    \"on\"\n    IconOpaque\t\t    \"on\"\n    RunInitForIconRedraw    \"off\"\n    IconRotate\t\t    \"none\"\n    PortRotate\t\t    \"default\"\n    IconUnits\t\t    \"autoscale\"\n  }\n  MaskParameterDefaults {\n    Evaluate\t\t    \"on\"\n    Tunable\t\t    \"on\"\n    NeverSave\t\t    \"off\"\n    Internal\t\t    \"off\"\n    ReadOnly\t\t    \"off\"\n    Enabled\t\t    \"on\"\n    Visible\t\t    \"on\"\n    ToolTip\t\t    \"on\"\n  }\n  BlockParameterDefaults {\n    Block {\n      BlockType\t\t      S-Function\n      FunctionName\t      \"system\"\n      SFunctionModules\t      \"''\"\n      PortCounts\t      \"[]\"\n      SFunctionDeploymentMode off\n    }\n  }\n  System {\n    Name\t\t    \"MPC_Project_FORCESPRO\"\n    Location\t\t    [385, 84, 1201, 623]\n    Open\t\t    on\n    ModelBrowserVisibility  on\n    ModelBrowserWidth\t    200\n    ScreenColor\t\t    \"white\"\n    PaperOrientation\t    \"landscape\"\n    PaperPositionMode\t    \"auto\"\n    PaperType\t\t    \"A4\"\n    PaperUnits\t\t    \"centimeters\"\n    TiledPaperMargins\t    [1.270000, 1.270000, 1.270000, 1.270000]\n    TiledPageScale\t    1\n    ShowPageBoundaries\t    off\n    ZoomFactor\t\t    \"100\"\n    ReportName\t\t    \"simulink-default.rpt\"\n    SIDHighWatermark\t    \"1\"\n    Block {\n      BlockType\t\t      S-Function\n      Name\t\t      \"MPC_Project_FORCESPRO\"\n      SID\t\t      \"1\"\n      Ports\t\t      [50, 1]\n      Position\t\t      [170, 99, 650, 850]\n      ZOrder\t\t      1\n      FunctionName\t      \"MPC_Project_FORCESPRO_simulinkBlock\"\n\t  SFunctionModules\t      \"MPC_Project_FORCESPRO MPC_Project_FORCESPRO_simulinkBlock\"\n      EnableBusSupport\t      off\n      Object {\n\t$PropName\t\t\"MaskObject\"\n\t$ObjectID\t\t19\n\t$ClassName\t\t\"Simulink.Mask\"\n\tType\t\t\t\"MPC_Project_FORCESPRO_simulinkBlock\"\n\tDescription\t\t\" ---- Simulink block encapsulating your customized solver MPC_Project_FORCESPRO ---- \\n\\n\"\n\t\t\t\t\"MPC_Project_FORCESPRO : A fast customized optimization solver.\\n\"\n\"\\n\"\n\"Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\\n\"\n\"\\n\"\n\"\\n\"\n\"This software is intended for simulation and testing purposes only. \\n\"\n\"Use of this software for any commercial purpose is prohibited.\\n\"\n\"\\n\"\n\"This program is distributed in the hope that it will be useful.\\n\"\n\"EMBOTECH makes NO WARRANTIES with respect to the use of the software \\n\"\n\"without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \\n\"\n\"PARTICULAR PURPOSE. \\n\"\n\"\\n\"\n\"EMBOTECH shall not have any liability for any damage arising from the use\\n\"\n\"of the software.\\n\"\n\"\\n\"\n\"This Agreement shall exclusively be governed by and interpreted in \\n\"\n\"accordance with the laws of Switzerland, excluding its principles\\n\"\n\"of conflict of laws. The Courts of Zurich-City shall have exclusive \\n\"\n\"jurisdiction in case of any dispute.\\n\"\n\"\\n\"\n\n\tHelp\t\t\t\"MPC_Project_FORCESPRO_simulinkBlock provides an easy Simulink interface for simulating your customized solver.  \\n\"\n\t\"\\nOUTPUTS = MPC_Project_FORCESPRO(INPUTS) solves an optimization problem where:\\n\\n\"\n\t\"INPUTS:\\n\"\n\t\" - xinit - column vector of length 3\\n \"\n\" - linear_model1 - matrix of size 3x5\\n \"\n\" - linear_model2 - matrix of size 3x5\\n \"\n\" - linear_model3 - matrix of size 3x5\\n \"\n\" - linear_model4 - matrix of size 3x5\\n \"\n\" - linear_model5 - matrix of size 3x5\\n \"\n\" - linear_model6 - matrix of size 3x5\\n \"\n\" - linear_model7 - matrix of size 3x5\\n \"\n\" - linear_model8 - matrix of size 3x5\\n \"\n\" - linear_model9 - matrix of size 3x5\\n \"\n\" - linear_model10 - matrix of size 3x5\\n \"\n\" - linear_model11 - matrix of size 3x5\\n \"\n\" - linear_model12 - matrix of size 3x5\\n \"\n\" - linear_model13 - matrix of size 3x5\\n \"\n\" - linear_model14 - matrix of size 3x5\\n \"\n\" - linear_model15 - matrix of size 3x5\\n \"\n\" - linear_model16 - matrix of size 3x5\\n \"\n\" - linear_model17 - matrix of size 3x5\\n \"\n\" - linear_model18 - matrix of size 3x5\\n \"\n\" - linear_model19 - matrix of size 3x5\\n \"\n\" - linear_model20 - matrix of size 3x5\\n \"\n\" - linear_model21 - matrix of size 3x5\\n \"\n\" - linear_model22 - matrix of size 3x5\\n \"\n\" - linear_model23 - matrix of size 3x5\\n \"\n\" - linear_model24 - matrix of size 3x5\\n \"\n\" - linear_model25 - matrix of size 3x5\\n \"\n\" - linear_model26 - matrix of size 3x5\\n \"\n\" - linear_model27 - matrix of size 3x5\\n \"\n\" - linear_model28 - matrix of size 3x5\\n \"\n\" - linear_model29 - matrix of size 3x5\\n \"\n\" - linear_model30 - matrix of size 3x5\\n \"\n\" - linear_model31 - matrix of size 3x5\\n \"\n\" - linear_model32 - matrix of size 3x5\\n \"\n\" - linear_model33 - matrix of size 3x5\\n \"\n\" - linear_model34 - matrix of size 3x5\\n \"\n\" - linear_model35 - matrix of size 3x5\\n \"\n\" - linear_model36 - matrix of size 3x5\\n \"\n\" - linear_model37 - matrix of size 3x5\\n \"\n\" - linear_model38 - matrix of size 3x5\\n \"\n\" - linear_model39 - matrix of size 3x5\\n \"\n\" - linear_model40 - matrix of size 3x5\\n \"\n\" - linear_model41 - matrix of size 3x5\\n \"\n\" - linear_model42 - matrix of size 3x5\\n \"\n\" - linear_model43 - matrix of size 3x5\\n \"\n\" - linear_model44 - matrix of size 3x5\\n \"\n\" - linear_model45 - matrix of size 3x5\\n \"\n\" - linear_model46 - matrix of size 3x5\\n \"\n\" - linear_model47 - matrix of size 3x5\\n \"\n\" - linear_model48 - matrix of size 3x5\\n \"\n\" - linear_model49 - matrix of size 3x5\\n \"\n\n\t\"\\nOUTPUTS:\\n\"\n\t\" - output - column vector of length 50\\n \"\n\n\t\"\\n For more information, see https://forces.embotech.com/Documentation/graphical_interface/index.html \\n \"\n\n\tDisplay\t\t\t\"port_label('input', 1, 'xinit') \\n  \"\n\"port_label('input', 2, 'linear_model1') \\n  \"\n\"port_label('input', 3, 'linear_model2') \\n  \"\n\"port_label('input', 4, 'linear_model3') \\n  \"\n\"port_label('input', 5, 'linear_model4') \\n  \"\n\"port_label('input', 6, 'linear_model5') \\n  \"\n\"port_label('input', 7, 'linear_model6') \\n  \"\n\"port_label('input', 8, 'linear_model7') \\n  \"\n\"port_label('input', 9, 'linear_model8') \\n  \"\n\"port_label('input', 10, 'linear_model9') \\n  \"\n\"port_label('input', 11, 'linear_model10') \\n  \"\n\"port_label('input', 12, 'linear_model11') \\n  \"\n\"port_label('input', 13, 'linear_model12') \\n  \"\n\"port_label('input', 14, 'linear_model13') \\n  \"\n\"port_label('input', 15, 'linear_model14') \\n  \"\n\"port_label('input', 16, 'linear_model15') \\n  \"\n\"port_label('input', 17, 'linear_model16') \\n  \"\n\"port_label('input', 18, 'linear_model17') \\n  \"\n\"port_label('input', 19, 'linear_model18') \\n  \"\n\"port_label('input', 20, 'linear_model19') \\n  \"\n\"port_label('input', 21, 'linear_model20') \\n  \"\n\"port_label('input', 22, 'linear_model21') \\n  \"\n\"port_label('input', 23, 'linear_model22') \\n  \"\n\"port_label('input', 24, 'linear_model23') \\n  \"\n\"port_label('input', 25, 'linear_model24') \\n  \"\n\"port_label('input', 26, 'linear_model25') \\n  \"\n\"port_label('input', 27, 'linear_model26') \\n  \"\n\"port_label('input', 28, 'linear_model27') \\n  \"\n\"port_label('input', 29, 'linear_model28') \\n  \"\n\"port_label('input', 30, 'linear_model29') \\n  \"\n\"port_label('input', 31, 'linear_model30') \\n  \"\n\"port_label('input', 32, 'linear_model31') \\n  \"\n\"port_label('input', 33, 'linear_model32') \\n  \"\n\"port_label('input', 34, 'linear_model33') \\n  \"\n\"port_label('input', 35, 'linear_model34') \\n  \"\n\"port_label('input', 36, 'linear_model35') \\n  \"\n\"port_label('input', 37, 'linear_model36') \\n  \"\n\"port_label('input', 38, 'linear_model37') \\n  \"\n\"port_label('input', 39, 'linear_model38') \\n  \"\n\"port_label('input', 40, 'linear_model39') \\n  \"\n\"port_label('input', 41, 'linear_model40') \\n  \"\n\"port_label('input', 42, 'linear_model41') \\n  \"\n\"port_label('input', 43, 'linear_model42') \\n  \"\n\"port_label('input', 44, 'linear_model43') \\n  \"\n\"port_label('input', 45, 'linear_model44') \\n  \"\n\"port_label('input', 46, 'linear_model45') \\n  \"\n\"port_label('input', 47, 'linear_model46') \\n  \"\n\"port_label('input', 48, 'linear_model47') \\n  \"\n\"port_label('input', 49, 'linear_model48') \\n  \"\n\"port_label('input', 50, 'linear_model49') \\n  \"\n\"port_label('output', 1, 'output') \\n \"\n\"if( exist('FORCES_PRO_Logo.jpg','file') ), image(imread('FORCES_PRO_Logo.jpg'),'center','on'); elseif( exist(['interface',filesep,'FORCES_PRO_Logo.jpg'],'file') ), image(imread(['interface',filesep,'FORCES_PRO_Logo.jpg']),'center','on'); elseif( exist(['MPC_Project_FORCESPRO',filesep,'interface',filesep,'FORCES_PRO_Logo.jpg'],'file') ), image(imread(['MPC_Project_FORCESPRO',filesep,'interface',filesep,'FORCES_PRO_Logo.jpg']),'center','on'); end \\n \"\n\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_lib.mdl b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_lib.mdl
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_lib.mdl	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_lib.mdl	(date 1646676210265)
@@ -60,13 +60,13 @@
       }
     }
   }
-  Created		  "3/6/2022 3:57:10 PM"
+  Created		  "3/7/2022 6:03:24 PM"
   Creator		  "embotech AG"
   UpdateHistory		  "UpdateHistoryNever"
   ModifiedByFormat	  "%<Auto>"
   LastModifiedBy	  "embotech AG"
   ModifiedDateFormat	  "%<Auto>"
-  LastModifiedDate	  "3/6/2022 3:57:10 PM"
+  LastModifiedDate	  "3/7/2022 6:03:24 PM"
   RTWModifiedTimeStamp	  315310195
   ModelVersionFormat	  "1.%<AutoIncrement:2>"
   ConfigurationManager	  "None"
@@ -767,8 +767,8 @@
       BlockType		      S-Function
       Name		      "MPC_Project_FORCESPRO"
       SID		      "1"
-      Ports		      [50, 1]
-      Position		      [170, 99, 650, 850]
+      Ports		      [10, 1]
+      Position		      [170, 99, 650, 180]
       ZOrder		      1
       FunctionName	      "MPC_Project_FORCESPRO_simulinkBlock"
 	  SFunctionModules	      "MPC_Project_FORCESPRO MPC_Project_FORCESPRO_simulinkBlock"
@@ -814,46 +814,6 @@
 " - linear_model7 - matrix of size 3x5\n "
 " - linear_model8 - matrix of size 3x5\n "
 " - linear_model9 - matrix of size 3x5\n "
-" - linear_model10 - matrix of size 3x5\n "
-" - linear_model11 - matrix of size 3x5\n "
-" - linear_model12 - matrix of size 3x5\n "
-" - linear_model13 - matrix of size 3x5\n "
-" - linear_model14 - matrix of size 3x5\n "
-" - linear_model15 - matrix of size 3x5\n "
-" - linear_model16 - matrix of size 3x5\n "
-" - linear_model17 - matrix of size 3x5\n "
-" - linear_model18 - matrix of size 3x5\n "
-" - linear_model19 - matrix of size 3x5\n "
-" - linear_model20 - matrix of size 3x5\n "
-" - linear_model21 - matrix of size 3x5\n "
-" - linear_model22 - matrix of size 3x5\n "
-" - linear_model23 - matrix of size 3x5\n "
-" - linear_model24 - matrix of size 3x5\n "
-" - linear_model25 - matrix of size 3x5\n "
-" - linear_model26 - matrix of size 3x5\n "
-" - linear_model27 - matrix of size 3x5\n "
-" - linear_model28 - matrix of size 3x5\n "
-" - linear_model29 - matrix of size 3x5\n "
-" - linear_model30 - matrix of size 3x5\n "
-" - linear_model31 - matrix of size 3x5\n "
-" - linear_model32 - matrix of size 3x5\n "
-" - linear_model33 - matrix of size 3x5\n "
-" - linear_model34 - matrix of size 3x5\n "
-" - linear_model35 - matrix of size 3x5\n "
-" - linear_model36 - matrix of size 3x5\n "
-" - linear_model37 - matrix of size 3x5\n "
-" - linear_model38 - matrix of size 3x5\n "
-" - linear_model39 - matrix of size 3x5\n "
-" - linear_model40 - matrix of size 3x5\n "
-" - linear_model41 - matrix of size 3x5\n "
-" - linear_model42 - matrix of size 3x5\n "
-" - linear_model43 - matrix of size 3x5\n "
-" - linear_model44 - matrix of size 3x5\n "
-" - linear_model45 - matrix of size 3x5\n "
-" - linear_model46 - matrix of size 3x5\n "
-" - linear_model47 - matrix of size 3x5\n "
-" - linear_model48 - matrix of size 3x5\n "
-" - linear_model49 - matrix of size 3x5\n "
 
 	"\nOUTPUTS:\n"
 	" - output - column vector of length 50\n "
@@ -870,46 +830,6 @@
 "port_label('input', 8, 'linear_model7') \n  "
 "port_label('input', 9, 'linear_model8') \n  "
 "port_label('input', 10, 'linear_model9') \n  "
-"port_label('input', 11, 'linear_model10') \n  "
-"port_label('input', 12, 'linear_model11') \n  "
-"port_label('input', 13, 'linear_model12') \n  "
-"port_label('input', 14, 'linear_model13') \n  "
-"port_label('input', 15, 'linear_model14') \n  "
-"port_label('input', 16, 'linear_model15') \n  "
-"port_label('input', 17, 'linear_model16') \n  "
-"port_label('input', 18, 'linear_model17') \n  "
-"port_label('input', 19, 'linear_model18') \n  "
-"port_label('input', 20, 'linear_model19') \n  "
-"port_label('input', 21, 'linear_model20') \n  "
-"port_label('input', 22, 'linear_model21') \n  "
-"port_label('input', 23, 'linear_model22') \n  "
-"port_label('input', 24, 'linear_model23') \n  "
-"port_label('input', 25, 'linear_model24') \n  "
-"port_label('input', 26, 'linear_model25') \n  "
-"port_label('input', 27, 'linear_model26') \n  "
-"port_label('input', 28, 'linear_model27') \n  "
-"port_label('input', 29, 'linear_model28') \n  "
-"port_label('input', 30, 'linear_model29') \n  "
-"port_label('input', 31, 'linear_model30') \n  "
-"port_label('input', 32, 'linear_model31') \n  "
-"port_label('input', 33, 'linear_model32') \n  "
-"port_label('input', 34, 'linear_model33') \n  "
-"port_label('input', 35, 'linear_model34') \n  "
-"port_label('input', 36, 'linear_model35') \n  "
-"port_label('input', 37, 'linear_model36') \n  "
-"port_label('input', 38, 'linear_model37') \n  "
-"port_label('input', 39, 'linear_model38') \n  "
-"port_label('input', 40, 'linear_model39') \n  "
-"port_label('input', 41, 'linear_model40') \n  "
-"port_label('input', 42, 'linear_model41') \n  "
-"port_label('input', 43, 'linear_model42') \n  "
-"port_label('input', 44, 'linear_model43') \n  "
-"port_label('input', 45, 'linear_model44') \n  "
-"port_label('input', 46, 'linear_model45') \n  "
-"port_label('input', 47, 'linear_model46') \n  "
-"port_label('input', 48, 'linear_model47') \n  "
-"port_label('input', 49, 'linear_model48') \n  "
-"port_label('input', 50, 'linear_model49') \n  "
 "port_label('output', 1, 'output') \n "
 "if( exist('FORCES_PRO_Logo.jpg','file') ), image(imread('FORCES_PRO_Logo.jpg'),'center','on'); elseif( exist(['interface',filesep,'FORCES_PRO_Logo.jpg'],'file') ), image(imread(['interface',filesep,'FORCES_PRO_Logo.jpg']),'center','on'); elseif( exist(['MPC_Project_FORCESPRO',filesep,'interface',filesep,'FORCES_PRO_Logo.jpg'],'file') ), image(imread(['MPC_Project_FORCESPRO',filesep,'interface',filesep,'FORCES_PRO_Logo.jpg']),'center','on'); end \n "
 
Index: model/stdout_temp.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/stdout_temp.txt b/model/stdout_temp.txt
--- a/model/stdout_temp.txt	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/stdout_temp.txt	(date 1646676213517)
@@ -1,0 +1,13 @@
+
+This is MPC_Project_FORCESPRO, a primal-dual interior point solver generated by FORCESPRO v5.1.0.
+Problem size: 50 variables, 30 equality and 0 inequality constraints in 10 stage(s)
+(c) embotech AG, Zurich, Switzerland, 2013-2022. All rights reserved. Email: support@embotech.com
+
+   #it  res_eq  res_ineq     pobj         dobj       dgap     rdgap     mu
+  ---------------------------------------------------------------------------
+    0  3.6e-17  0.0e+00  +0.0000e+00  +4.3165e-17  -4.3e-17  1.0e+06  0.0e+00
+    1  2.2e-08  0.0e+00  +2.0795e-31  -9.8608e-24  +9.9e-24  4.7e+07  0.0e+00
+
+OPTIMAL (within RESEQ=1.0e-06, RESINEQ=1.0e-06, (R)DGAP=(1.0e-06)1.0e-04, MU=1.0e-06).
+Solve time: 0.007 ms (1 iteration)
+
Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlock.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nMPC_Project_FORCESPRO : A fast customized optimization solver.\n\nCopyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\n\n\nThis software is intended for simulation and testing purposes only. \nUse of this software for any commercial purpose is prohibited.\n\nThis program is distributed in the hope that it will be useful.\nEMBOTECH makes NO WARRANTIES with respect to the use of the software \nwithout even the implied warranty of MERCHANTABILITY or FITNESS FOR A \nPARTICULAR PURPOSE. \n\nEMBOTECH shall not have any liability for any damage arising from the use\nof the software.\n\nThis Agreement shall exclusively be governed by and interpreted in \naccordance with the laws of Switzerland, excluding its principles\nof conflict of laws. The Courts of Zurich-City shall have exclusive \njurisdiction in case of any dispute.\n\n*/\n\n\n#define S_FUNCTION_LEVEL 2\n#define S_FUNCTION_NAME MPC_Project_FORCESPRO_simulinkBlock\n\n#include \"simstruc.h\"\n\n/* For compatibility with Microsoft Visual Studio 2015 */\n#if _MSC_VER >= 1900\nFILE _iob[3];\nFILE * __cdecl __iob_func(void)\n{\n\t_iob[0] = *stdin;\n\t_iob[1] = *stdout;\n\t_iob[2] = *stderr;\n\treturn _iob;\n}\n#endif\n\n/* include FORCESPRO functions and defs */\n#include \"../include/MPC_Project_FORCESPRO.h\" \n\n/* SYSTEM INCLUDES FOR TIMING ------------------------------------------ */\n\n\n#if defined(MATLAB_MEX_FILE)\n#include \"tmwtypes.h\"\n#include \"simstruc_types.h\"\n#else\n#include \"rtwtypes.h\"\n#endif\n\ntypedef MPC_Project_FORCESPROinterface_float MPC_Project_FORCESPROnmpc_float;\n\n\n\n\n\n/*====================*\n * S-function methods *\n *====================*/\n/* Function: mdlInitializeSizes =========================================\n * Abstract:\n *   Setup sizes of the various vectors.\n */\nstatic void mdlInitializeSizes(SimStruct *S)\n{\n\n    DECL_AND_INIT_DIMSINFO(inputDimsInfo);\n    DECL_AND_INIT_DIMSINFO(outputDimsInfo);\n    ssSetNumSFcnParams(S, 0);\n    if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) \n\t{\n\t\treturn; /* Parameter mismatch will be reported by Simulink */\n    }\n\n\t/* initialize size of continuous and discrete states to zero */\n    ssSetNumContStates(S, 0);\n    ssSetNumDiscStates(S, 0);\n\n\t/* initialize input ports - there are 50 in total */\n    if (!ssSetNumInputPorts(S, 50)) return;\n    \t\n\t/* Input Port 0 */\n    ssSetInputPortMatrixDimensions(S,  0, 3, 1);\n    ssSetInputPortDataType(S, 0, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 0, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 0, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/\n\t\n\t/* Input Port 1 */\n    ssSetInputPortMatrixDimensions(S,  1, 3, 5);\n    ssSetInputPortDataType(S, 1, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 1, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 1, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 1, 1); /*direct input signal access*/\n\t\n\t/* Input Port 2 */\n    ssSetInputPortMatrixDimensions(S,  2, 3, 5);\n    ssSetInputPortDataType(S, 2, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 2, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 2, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 2, 1); /*direct input signal access*/\n\t\n\t/* Input Port 3 */\n    ssSetInputPortMatrixDimensions(S,  3, 3, 5);\n    ssSetInputPortDataType(S, 3, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 3, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 3, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 3, 1); /*direct input signal access*/\n\t\n\t/* Input Port 4 */\n    ssSetInputPortMatrixDimensions(S,  4, 3, 5);\n    ssSetInputPortDataType(S, 4, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 4, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 4, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 4, 1); /*direct input signal access*/\n\t\n\t/* Input Port 5 */\n    ssSetInputPortMatrixDimensions(S,  5, 3, 5);\n    ssSetInputPortDataType(S, 5, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 5, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 5, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 5, 1); /*direct input signal access*/\n\t\n\t/* Input Port 6 */\n    ssSetInputPortMatrixDimensions(S,  6, 3, 5);\n    ssSetInputPortDataType(S, 6, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 6, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 6, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 6, 1); /*direct input signal access*/\n\t\n\t/* Input Port 7 */\n    ssSetInputPortMatrixDimensions(S,  7, 3, 5);\n    ssSetInputPortDataType(S, 7, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 7, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 7, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 7, 1); /*direct input signal access*/\n\t\n\t/* Input Port 8 */\n    ssSetInputPortMatrixDimensions(S,  8, 3, 5);\n    ssSetInputPortDataType(S, 8, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 8, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 8, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 8, 1); /*direct input signal access*/\n\t\n\t/* Input Port 9 */\n    ssSetInputPortMatrixDimensions(S,  9, 3, 5);\n    ssSetInputPortDataType(S, 9, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 9, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 9, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 9, 1); /*direct input signal access*/\n\t\n\t/* Input Port 10 */\n    ssSetInputPortMatrixDimensions(S,  10, 3, 5);\n    ssSetInputPortDataType(S, 10, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 10, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 10, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 10, 1); /*direct input signal access*/\n\t\n\t/* Input Port 11 */\n    ssSetInputPortMatrixDimensions(S,  11, 3, 5);\n    ssSetInputPortDataType(S, 11, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 11, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 11, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 11, 1); /*direct input signal access*/\n\t\n\t/* Input Port 12 */\n    ssSetInputPortMatrixDimensions(S,  12, 3, 5);\n    ssSetInputPortDataType(S, 12, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 12, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 12, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 12, 1); /*direct input signal access*/\n\t\n\t/* Input Port 13 */\n    ssSetInputPortMatrixDimensions(S,  13, 3, 5);\n    ssSetInputPortDataType(S, 13, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 13, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 13, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 13, 1); /*direct input signal access*/\n\t\n\t/* Input Port 14 */\n    ssSetInputPortMatrixDimensions(S,  14, 3, 5);\n    ssSetInputPortDataType(S, 14, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 14, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 14, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 14, 1); /*direct input signal access*/\n\t\n\t/* Input Port 15 */\n    ssSetInputPortMatrixDimensions(S,  15, 3, 5);\n    ssSetInputPortDataType(S, 15, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 15, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 15, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 15, 1); /*direct input signal access*/\n\t\n\t/* Input Port 16 */\n    ssSetInputPortMatrixDimensions(S,  16, 3, 5);\n    ssSetInputPortDataType(S, 16, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 16, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 16, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 16, 1); /*direct input signal access*/\n\t\n\t/* Input Port 17 */\n    ssSetInputPortMatrixDimensions(S,  17, 3, 5);\n    ssSetInputPortDataType(S, 17, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 17, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 17, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 17, 1); /*direct input signal access*/\n\t\n\t/* Input Port 18 */\n    ssSetInputPortMatrixDimensions(S,  18, 3, 5);\n    ssSetInputPortDataType(S, 18, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 18, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 18, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 18, 1); /*direct input signal access*/\n\t\n\t/* Input Port 19 */\n    ssSetInputPortMatrixDimensions(S,  19, 3, 5);\n    ssSetInputPortDataType(S, 19, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 19, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 19, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 19, 1); /*direct input signal access*/\n\t\n\t/* Input Port 20 */\n    ssSetInputPortMatrixDimensions(S,  20, 3, 5);\n    ssSetInputPortDataType(S, 20, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 20, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 20, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 20, 1); /*direct input signal access*/\n\t\n\t/* Input Port 21 */\n    ssSetInputPortMatrixDimensions(S,  21, 3, 5);\n    ssSetInputPortDataType(S, 21, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 21, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 21, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 21, 1); /*direct input signal access*/\n\t\n\t/* Input Port 22 */\n    ssSetInputPortMatrixDimensions(S,  22, 3, 5);\n    ssSetInputPortDataType(S, 22, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 22, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 22, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 22, 1); /*direct input signal access*/\n\t\n\t/* Input Port 23 */\n    ssSetInputPortMatrixDimensions(S,  23, 3, 5);\n    ssSetInputPortDataType(S, 23, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 23, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 23, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 23, 1); /*direct input signal access*/\n\t\n\t/* Input Port 24 */\n    ssSetInputPortMatrixDimensions(S,  24, 3, 5);\n    ssSetInputPortDataType(S, 24, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 24, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 24, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 24, 1); /*direct input signal access*/\n\t\n\t/* Input Port 25 */\n    ssSetInputPortMatrixDimensions(S,  25, 3, 5);\n    ssSetInputPortDataType(S, 25, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 25, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 25, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 25, 1); /*direct input signal access*/\n\t\n\t/* Input Port 26 */\n    ssSetInputPortMatrixDimensions(S,  26, 3, 5);\n    ssSetInputPortDataType(S, 26, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 26, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 26, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 26, 1); /*direct input signal access*/\n\t\n\t/* Input Port 27 */\n    ssSetInputPortMatrixDimensions(S,  27, 3, 5);\n    ssSetInputPortDataType(S, 27, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 27, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 27, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 27, 1); /*direct input signal access*/\n\t\n\t/* Input Port 28 */\n    ssSetInputPortMatrixDimensions(S,  28, 3, 5);\n    ssSetInputPortDataType(S, 28, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 28, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 28, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 28, 1); /*direct input signal access*/\n\t\n\t/* Input Port 29 */\n    ssSetInputPortMatrixDimensions(S,  29, 3, 5);\n    ssSetInputPortDataType(S, 29, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 29, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 29, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 29, 1); /*direct input signal access*/\n\t\n\t/* Input Port 30 */\n    ssSetInputPortMatrixDimensions(S,  30, 3, 5);\n    ssSetInputPortDataType(S, 30, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 30, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 30, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 30, 1); /*direct input signal access*/\n\t\n\t/* Input Port 31 */\n    ssSetInputPortMatrixDimensions(S,  31, 3, 5);\n    ssSetInputPortDataType(S, 31, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 31, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 31, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 31, 1); /*direct input signal access*/\n\t\n\t/* Input Port 32 */\n    ssSetInputPortMatrixDimensions(S,  32, 3, 5);\n    ssSetInputPortDataType(S, 32, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 32, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 32, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 32, 1); /*direct input signal access*/\n\t\n\t/* Input Port 33 */\n    ssSetInputPortMatrixDimensions(S,  33, 3, 5);\n    ssSetInputPortDataType(S, 33, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 33, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 33, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 33, 1); /*direct input signal access*/\n\t\n\t/* Input Port 34 */\n    ssSetInputPortMatrixDimensions(S,  34, 3, 5);\n    ssSetInputPortDataType(S, 34, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 34, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 34, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 34, 1); /*direct input signal access*/\n\t\n\t/* Input Port 35 */\n    ssSetInputPortMatrixDimensions(S,  35, 3, 5);\n    ssSetInputPortDataType(S, 35, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 35, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 35, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 35, 1); /*direct input signal access*/\n\t\n\t/* Input Port 36 */\n    ssSetInputPortMatrixDimensions(S,  36, 3, 5);\n    ssSetInputPortDataType(S, 36, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 36, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 36, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 36, 1); /*direct input signal access*/\n\t\n\t/* Input Port 37 */\n    ssSetInputPortMatrixDimensions(S,  37, 3, 5);\n    ssSetInputPortDataType(S, 37, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 37, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 37, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 37, 1); /*direct input signal access*/\n\t\n\t/* Input Port 38 */\n    ssSetInputPortMatrixDimensions(S,  38, 3, 5);\n    ssSetInputPortDataType(S, 38, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 38, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 38, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 38, 1); /*direct input signal access*/\n\t\n\t/* Input Port 39 */\n    ssSetInputPortMatrixDimensions(S,  39, 3, 5);\n    ssSetInputPortDataType(S, 39, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 39, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 39, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 39, 1); /*direct input signal access*/\n\t\n\t/* Input Port 40 */\n    ssSetInputPortMatrixDimensions(S,  40, 3, 5);\n    ssSetInputPortDataType(S, 40, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 40, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 40, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 40, 1); /*direct input signal access*/\n\t\n\t/* Input Port 41 */\n    ssSetInputPortMatrixDimensions(S,  41, 3, 5);\n    ssSetInputPortDataType(S, 41, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 41, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 41, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 41, 1); /*direct input signal access*/\n\t\n\t/* Input Port 42 */\n    ssSetInputPortMatrixDimensions(S,  42, 3, 5);\n    ssSetInputPortDataType(S, 42, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 42, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 42, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 42, 1); /*direct input signal access*/\n\t\n\t/* Input Port 43 */\n    ssSetInputPortMatrixDimensions(S,  43, 3, 5);\n    ssSetInputPortDataType(S, 43, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 43, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 43, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 43, 1); /*direct input signal access*/\n\t\n\t/* Input Port 44 */\n    ssSetInputPortMatrixDimensions(S,  44, 3, 5);\n    ssSetInputPortDataType(S, 44, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 44, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 44, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 44, 1); /*direct input signal access*/\n\t\n\t/* Input Port 45 */\n    ssSetInputPortMatrixDimensions(S,  45, 3, 5);\n    ssSetInputPortDataType(S, 45, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 45, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 45, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 45, 1); /*direct input signal access*/\n\t\n\t/* Input Port 46 */\n    ssSetInputPortMatrixDimensions(S,  46, 3, 5);\n    ssSetInputPortDataType(S, 46, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 46, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 46, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 46, 1); /*direct input signal access*/\n\t\n\t/* Input Port 47 */\n    ssSetInputPortMatrixDimensions(S,  47, 3, 5);\n    ssSetInputPortDataType(S, 47, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 47, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 47, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 47, 1); /*direct input signal access*/\n\t\n\t/* Input Port 48 */\n    ssSetInputPortMatrixDimensions(S,  48, 3, 5);\n    ssSetInputPortDataType(S, 48, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 48, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 48, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 48, 1); /*direct input signal access*/\n\t\n\t/* Input Port 49 */\n    ssSetInputPortMatrixDimensions(S,  49, 3, 5);\n    ssSetInputPortDataType(S, 49, SS_DOUBLE);\n    ssSetInputPortComplexSignal(S, 49, COMPLEX_NO); /* no complex signals suppported */\n    ssSetInputPortDirectFeedThrough(S, 49, 1); /* Feedthrough enabled */\n    ssSetInputPortRequiredContiguous(S, 49, 1); /*direct input signal access*/\n \n\n\n\t/* initialize output ports - there are 1 in total */\n    if (!ssSetNumOutputPorts(S, 1)) return;    \n\t\t\n\t/* Output Port 0 */\n    ssSetOutputPortMatrixDimensions(S,  0, 50, 1);\n    ssSetOutputPortDataType(S, 0, SS_DOUBLE);\n    ssSetOutputPortComplexSignal(S, 0, COMPLEX_NO); /* no complex signals suppported */\n\n\n\t/* set sampling time */\n    ssSetNumSampleTimes(S, 1);\n\n\t/* set internal memory of block */\n    ssSetNumRWork(S, 0);\n    ssSetNumIWork(S, 0);\n    ssSetNumPWork(S, 0);\n    ssSetNumModes(S, 0);\n    ssSetNumNonsampledZCs(S, 0);\n\n    /* Take care when specifying exception free code - see sfuntmpl_doc.c */\n\t/* SS_OPTION_USE_TLC_WITH_ACCELERATOR removed */ \n\t/* SS_OPTION_USE_TLC_WITH_ACCELERATOR removed */ \n    /* ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |\n\t\t             SS_OPTION_WORKS_WITH_CODE_REUSE)); */\n\tssSetOptions(S, SS_OPTION_EXCEPTION_FREE_CODE );\n\n\t\n}\n\n#if defined(MATLAB_MEX_FILE)\n#define MDL_SET_INPUT_PORT_DIMENSION_INFO\nstatic void mdlSetInputPortDimensionInfo(SimStruct        *S, \n                                         int_T            port,\n                                         const DimsInfo_T *dimsInfo)\n{\n    if(!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;\n}\n#endif\n\n#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO\n#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO)\nstatic void mdlSetOutputPortDimensionInfo(SimStruct        *S, \n                                          int_T            port, \n                                          const DimsInfo_T *dimsInfo)\n{\n    if (!ssSetOutputPortDimensionInfo(S, port, dimsInfo)) return;\n}\n#endif\n# define MDL_SET_INPUT_PORT_FRAME_DATA\nstatic void mdlSetInputPortFrameData(SimStruct  *S, \n                                     int_T      port,\n                                     Frame_T    frameData)\n{\n    ssSetInputPortFrameData(S, port, frameData);\n}\n/* Function: mdlInitializeSampleTimes =========================================\n * Abstract:\n *    Specifiy  the sample time.\n */\nstatic void mdlInitializeSampleTimes(SimStruct *S)\n{\n    ssSetSampleTime(S, 0, INHERITED_SAMPLE_TIME);\n    ssSetOffsetTime(S, 0, 0.0);\n}\n\n#define MDL_SET_INPUT_PORT_DATA_TYPE\nstatic void mdlSetInputPortDataType(SimStruct *S, solver_int32_default port, DTypeId dType)\n{\n    ssSetInputPortDataType( S, 0, dType);\n}\n#define MDL_SET_OUTPUT_PORT_DATA_TYPE\nstatic void mdlSetOutputPortDataType(SimStruct *S, solver_int32_default port, DTypeId dType)\n{\n    ssSetOutputPortDataType(S, 0, dType);\n}\n\n#define MDL_SET_DEFAULT_PORT_DATA_TYPES\nstatic void mdlSetDefaultPortDataTypes(SimStruct *S)\n{\n    ssSetInputPortDataType( S, 0, SS_DOUBLE);\n    ssSetOutputPortDataType(S, 0, SS_DOUBLE);\n}\n\n\n\n\n\n/* Function: mdlOutputs =======================================================\n *\n*/\nstatic void mdlOutputs(SimStruct *S, int_T tid)\n{\n\tsolver_int32_default i, j, k;\n\t\n\t/* file pointer for printing */\n\tFILE *fp = NULL;\n\n\t/* Simulink data */\n\tconst real_T *xinit = (const real_T*) ssGetInputPortSignal(S,0);\n\tconst real_T *linear_model1 = (const real_T*) ssGetInputPortSignal(S,1);\n\tconst real_T *linear_model2 = (const real_T*) ssGetInputPortSignal(S,2);\n\tconst real_T *linear_model3 = (const real_T*) ssGetInputPortSignal(S,3);\n\tconst real_T *linear_model4 = (const real_T*) ssGetInputPortSignal(S,4);\n\tconst real_T *linear_model5 = (const real_T*) ssGetInputPortSignal(S,5);\n\tconst real_T *linear_model6 = (const real_T*) ssGetInputPortSignal(S,6);\n\tconst real_T *linear_model7 = (const real_T*) ssGetInputPortSignal(S,7);\n\tconst real_T *linear_model8 = (const real_T*) ssGetInputPortSignal(S,8);\n\tconst real_T *linear_model9 = (const real_T*) ssGetInputPortSignal(S,9);\n\tconst real_T *linear_model10 = (const real_T*) ssGetInputPortSignal(S,10);\n\tconst real_T *linear_model11 = (const real_T*) ssGetInputPortSignal(S,11);\n\tconst real_T *linear_model12 = (const real_T*) ssGetInputPortSignal(S,12);\n\tconst real_T *linear_model13 = (const real_T*) ssGetInputPortSignal(S,13);\n\tconst real_T *linear_model14 = (const real_T*) ssGetInputPortSignal(S,14);\n\tconst real_T *linear_model15 = (const real_T*) ssGetInputPortSignal(S,15);\n\tconst real_T *linear_model16 = (const real_T*) ssGetInputPortSignal(S,16);\n\tconst real_T *linear_model17 = (const real_T*) ssGetInputPortSignal(S,17);\n\tconst real_T *linear_model18 = (const real_T*) ssGetInputPortSignal(S,18);\n\tconst real_T *linear_model19 = (const real_T*) ssGetInputPortSignal(S,19);\n\tconst real_T *linear_model20 = (const real_T*) ssGetInputPortSignal(S,20);\n\tconst real_T *linear_model21 = (const real_T*) ssGetInputPortSignal(S,21);\n\tconst real_T *linear_model22 = (const real_T*) ssGetInputPortSignal(S,22);\n\tconst real_T *linear_model23 = (const real_T*) ssGetInputPortSignal(S,23);\n\tconst real_T *linear_model24 = (const real_T*) ssGetInputPortSignal(S,24);\n\tconst real_T *linear_model25 = (const real_T*) ssGetInputPortSignal(S,25);\n\tconst real_T *linear_model26 = (const real_T*) ssGetInputPortSignal(S,26);\n\tconst real_T *linear_model27 = (const real_T*) ssGetInputPortSignal(S,27);\n\tconst real_T *linear_model28 = (const real_T*) ssGetInputPortSignal(S,28);\n\tconst real_T *linear_model29 = (const real_T*) ssGetInputPortSignal(S,29);\n\tconst real_T *linear_model30 = (const real_T*) ssGetInputPortSignal(S,30);\n\tconst real_T *linear_model31 = (const real_T*) ssGetInputPortSignal(S,31);\n\tconst real_T *linear_model32 = (const real_T*) ssGetInputPortSignal(S,32);\n\tconst real_T *linear_model33 = (const real_T*) ssGetInputPortSignal(S,33);\n\tconst real_T *linear_model34 = (const real_T*) ssGetInputPortSignal(S,34);\n\tconst real_T *linear_model35 = (const real_T*) ssGetInputPortSignal(S,35);\n\tconst real_T *linear_model36 = (const real_T*) ssGetInputPortSignal(S,36);\n\tconst real_T *linear_model37 = (const real_T*) ssGetInputPortSignal(S,37);\n\tconst real_T *linear_model38 = (const real_T*) ssGetInputPortSignal(S,38);\n\tconst real_T *linear_model39 = (const real_T*) ssGetInputPortSignal(S,39);\n\tconst real_T *linear_model40 = (const real_T*) ssGetInputPortSignal(S,40);\n\tconst real_T *linear_model41 = (const real_T*) ssGetInputPortSignal(S,41);\n\tconst real_T *linear_model42 = (const real_T*) ssGetInputPortSignal(S,42);\n\tconst real_T *linear_model43 = (const real_T*) ssGetInputPortSignal(S,43);\n\tconst real_T *linear_model44 = (const real_T*) ssGetInputPortSignal(S,44);\n\tconst real_T *linear_model45 = (const real_T*) ssGetInputPortSignal(S,45);\n\tconst real_T *linear_model46 = (const real_T*) ssGetInputPortSignal(S,46);\n\tconst real_T *linear_model47 = (const real_T*) ssGetInputPortSignal(S,47);\n\tconst real_T *linear_model48 = (const real_T*) ssGetInputPortSignal(S,48);\n\tconst real_T *linear_model49 = (const real_T*) ssGetInputPortSignal(S,49);\n\t\n    real_T *output = (real_T*) ssGetOutputPortSignal(S,0);\n\t\n\t\n\n\t/* Solver data */\n\tstatic MPC_Project_FORCESPRO_params params;\n\tstatic MPC_Project_FORCESPRO_output output;\n\tstatic MPC_Project_FORCESPRO_info info;\t\n\tsolver_int32_default exitflag;\n\n\t/* Extra NMPC data */\n\t\n\n\t/* Copy inputs */\n\tfor( i=0; i<3; i++)\n\t{ \n\t\tparams.xinit[i] = (double) xinit[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model1[i] = (double) linear_model1[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model2[i] = (double) linear_model2[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model3[i] = (double) linear_model3[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model4[i] = (double) linear_model4[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model5[i] = (double) linear_model5[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model6[i] = (double) linear_model6[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model7[i] = (double) linear_model7[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model8[i] = (double) linear_model8[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model9[i] = (double) linear_model9[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model10[i] = (double) linear_model10[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model11[i] = (double) linear_model11[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model12[i] = (double) linear_model12[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model13[i] = (double) linear_model13[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model14[i] = (double) linear_model14[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model15[i] = (double) linear_model15[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model16[i] = (double) linear_model16[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model17[i] = (double) linear_model17[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model18[i] = (double) linear_model18[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model19[i] = (double) linear_model19[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model20[i] = (double) linear_model20[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model21[i] = (double) linear_model21[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model22[i] = (double) linear_model22[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model23[i] = (double) linear_model23[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model24[i] = (double) linear_model24[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model25[i] = (double) linear_model25[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model26[i] = (double) linear_model26[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model27[i] = (double) linear_model27[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model28[i] = (double) linear_model28[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model29[i] = (double) linear_model29[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model30[i] = (double) linear_model30[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model31[i] = (double) linear_model31[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model32[i] = (double) linear_model32[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model33[i] = (double) linear_model33[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model34[i] = (double) linear_model34[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model35[i] = (double) linear_model35[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model36[i] = (double) linear_model36[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model37[i] = (double) linear_model37[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model38[i] = (double) linear_model38[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model39[i] = (double) linear_model39[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model40[i] = (double) linear_model40[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model41[i] = (double) linear_model41[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model42[i] = (double) linear_model42[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model43[i] = (double) linear_model43[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model44[i] = (double) linear_model44[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model45[i] = (double) linear_model45[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model46[i] = (double) linear_model46[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model47[i] = (double) linear_model47[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model48[i] = (double) linear_model48[i]; \n\t}\n\n\tfor( i=0; i<15; i++)\n\t{ \n\t\tparams.linear_model49[i] = (double) linear_model49[i]; \n\t}\n\n\t\n\n\t\n\n    #if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0\n\t\t/* Prepare file for printfs */\n        fp = fopen(\"stdout_temp\",\"w+\");\n\t\tif( fp == NULL ) \n\t\t{\n\t\t\tmexErrMsgTxt(\"freopen of stdout did not work.\");\n\t\t}\n\t\trewind(fp);\n\t#endif\n\n\t/* Call solver */\n\texitflag = MPC_Project_FORCESPRO_solve(&params, &output, &info, fp );\n\n\t#if SET_PRINTLEVEL_MPC_Project_FORCESPRO > 0\n\t\t/* Read contents of printfs printed to file */\n\t\trewind(fp);\n\t\twhile( (i = fgetc(fp)) != EOF ) \n\t\t{\n\t\t\tssPrintf(\"%c\",i);\n\t\t}\n\t\tfclose(fp);\n\t#endif\n\n\t\n\n\t/* Copy outputs */\n\tfor( i=0; i<50; i++)\n\t{ \n\t\toutput[i] = (real_T) output.output[i]; \n\t}\n\n\t\n}\n\n\n\n\n\n/* Function: mdlTerminate =====================================================\n * Abstract:\n *    In this function, you should perform any actions that are necessary\n *    at the termination of a simulation.  For example, if memory was\n *    allocated in mdlStart, this is the place to free it.\n */\nstatic void mdlTerminate(SimStruct *S)\n{\n}\n#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */\n#include \"simulink.c\"      /* MEX-file interface mechanism */\n#else\n#include \"cg_sfun.h\"       /* Code generation registration function */\n#endif\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlock.c b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlock.c
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlock.c	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPRO_simulinkBlock.c	(date 1646676210265)
@@ -28,17 +28,7 @@
 
 #include "simstruc.h"
 
-/* For compatibility with Microsoft Visual Studio 2015 */
-#if _MSC_VER >= 1900
-FILE _iob[3];
-FILE * __cdecl __iob_func(void)
-{
-	_iob[0] = *stdin;
-	_iob[1] = *stdout;
-	_iob[2] = *stderr;
-	return _iob;
-}
-#endif
+
 
 /* include FORCESPRO functions and defs */
 #include "../include/MPC_Project_FORCESPRO.h" 
@@ -81,8 +71,8 @@
     ssSetNumContStates(S, 0);
     ssSetNumDiscStates(S, 0);
 
-	/* initialize input ports - there are 50 in total */
-    if (!ssSetNumInputPorts(S, 50)) return;
+	/* initialize input ports - there are 10 in total */
+    if (!ssSetNumInputPorts(S, 10)) return;
     	
 	/* Input Port 0 */
     ssSetInputPortMatrixDimensions(S,  0, 3, 1);
@@ -153,286 +143,6 @@
     ssSetInputPortComplexSignal(S, 9, COMPLEX_NO); /* no complex signals suppported */
     ssSetInputPortDirectFeedThrough(S, 9, 1); /* Feedthrough enabled */
     ssSetInputPortRequiredContiguous(S, 9, 1); /*direct input signal access*/
-	
-	/* Input Port 10 */
-    ssSetInputPortMatrixDimensions(S,  10, 3, 5);
-    ssSetInputPortDataType(S, 10, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 10, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 10, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 10, 1); /*direct input signal access*/
-	
-	/* Input Port 11 */
-    ssSetInputPortMatrixDimensions(S,  11, 3, 5);
-    ssSetInputPortDataType(S, 11, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 11, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 11, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 11, 1); /*direct input signal access*/
-	
-	/* Input Port 12 */
-    ssSetInputPortMatrixDimensions(S,  12, 3, 5);
-    ssSetInputPortDataType(S, 12, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 12, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 12, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 12, 1); /*direct input signal access*/
-	
-	/* Input Port 13 */
-    ssSetInputPortMatrixDimensions(S,  13, 3, 5);
-    ssSetInputPortDataType(S, 13, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 13, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 13, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 13, 1); /*direct input signal access*/
-	
-	/* Input Port 14 */
-    ssSetInputPortMatrixDimensions(S,  14, 3, 5);
-    ssSetInputPortDataType(S, 14, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 14, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 14, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 14, 1); /*direct input signal access*/
-	
-	/* Input Port 15 */
-    ssSetInputPortMatrixDimensions(S,  15, 3, 5);
-    ssSetInputPortDataType(S, 15, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 15, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 15, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 15, 1); /*direct input signal access*/
-	
-	/* Input Port 16 */
-    ssSetInputPortMatrixDimensions(S,  16, 3, 5);
-    ssSetInputPortDataType(S, 16, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 16, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 16, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 16, 1); /*direct input signal access*/
-	
-	/* Input Port 17 */
-    ssSetInputPortMatrixDimensions(S,  17, 3, 5);
-    ssSetInputPortDataType(S, 17, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 17, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 17, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 17, 1); /*direct input signal access*/
-	
-	/* Input Port 18 */
-    ssSetInputPortMatrixDimensions(S,  18, 3, 5);
-    ssSetInputPortDataType(S, 18, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 18, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 18, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 18, 1); /*direct input signal access*/
-	
-	/* Input Port 19 */
-    ssSetInputPortMatrixDimensions(S,  19, 3, 5);
-    ssSetInputPortDataType(S, 19, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 19, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 19, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 19, 1); /*direct input signal access*/
-	
-	/* Input Port 20 */
-    ssSetInputPortMatrixDimensions(S,  20, 3, 5);
-    ssSetInputPortDataType(S, 20, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 20, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 20, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 20, 1); /*direct input signal access*/
-	
-	/* Input Port 21 */
-    ssSetInputPortMatrixDimensions(S,  21, 3, 5);
-    ssSetInputPortDataType(S, 21, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 21, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 21, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 21, 1); /*direct input signal access*/
-	
-	/* Input Port 22 */
-    ssSetInputPortMatrixDimensions(S,  22, 3, 5);
-    ssSetInputPortDataType(S, 22, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 22, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 22, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 22, 1); /*direct input signal access*/
-	
-	/* Input Port 23 */
-    ssSetInputPortMatrixDimensions(S,  23, 3, 5);
-    ssSetInputPortDataType(S, 23, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 23, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 23, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 23, 1); /*direct input signal access*/
-	
-	/* Input Port 24 */
-    ssSetInputPortMatrixDimensions(S,  24, 3, 5);
-    ssSetInputPortDataType(S, 24, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 24, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 24, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 24, 1); /*direct input signal access*/
-	
-	/* Input Port 25 */
-    ssSetInputPortMatrixDimensions(S,  25, 3, 5);
-    ssSetInputPortDataType(S, 25, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 25, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 25, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 25, 1); /*direct input signal access*/
-	
-	/* Input Port 26 */
-    ssSetInputPortMatrixDimensions(S,  26, 3, 5);
-    ssSetInputPortDataType(S, 26, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 26, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 26, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 26, 1); /*direct input signal access*/
-	
-	/* Input Port 27 */
-    ssSetInputPortMatrixDimensions(S,  27, 3, 5);
-    ssSetInputPortDataType(S, 27, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 27, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 27, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 27, 1); /*direct input signal access*/
-	
-	/* Input Port 28 */
-    ssSetInputPortMatrixDimensions(S,  28, 3, 5);
-    ssSetInputPortDataType(S, 28, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 28, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 28, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 28, 1); /*direct input signal access*/
-	
-	/* Input Port 29 */
-    ssSetInputPortMatrixDimensions(S,  29, 3, 5);
-    ssSetInputPortDataType(S, 29, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 29, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 29, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 29, 1); /*direct input signal access*/
-	
-	/* Input Port 30 */
-    ssSetInputPortMatrixDimensions(S,  30, 3, 5);
-    ssSetInputPortDataType(S, 30, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 30, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 30, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 30, 1); /*direct input signal access*/
-	
-	/* Input Port 31 */
-    ssSetInputPortMatrixDimensions(S,  31, 3, 5);
-    ssSetInputPortDataType(S, 31, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 31, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 31, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 31, 1); /*direct input signal access*/
-	
-	/* Input Port 32 */
-    ssSetInputPortMatrixDimensions(S,  32, 3, 5);
-    ssSetInputPortDataType(S, 32, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 32, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 32, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 32, 1); /*direct input signal access*/
-	
-	/* Input Port 33 */
-    ssSetInputPortMatrixDimensions(S,  33, 3, 5);
-    ssSetInputPortDataType(S, 33, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 33, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 33, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 33, 1); /*direct input signal access*/
-	
-	/* Input Port 34 */
-    ssSetInputPortMatrixDimensions(S,  34, 3, 5);
-    ssSetInputPortDataType(S, 34, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 34, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 34, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 34, 1); /*direct input signal access*/
-	
-	/* Input Port 35 */
-    ssSetInputPortMatrixDimensions(S,  35, 3, 5);
-    ssSetInputPortDataType(S, 35, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 35, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 35, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 35, 1); /*direct input signal access*/
-	
-	/* Input Port 36 */
-    ssSetInputPortMatrixDimensions(S,  36, 3, 5);
-    ssSetInputPortDataType(S, 36, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 36, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 36, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 36, 1); /*direct input signal access*/
-	
-	/* Input Port 37 */
-    ssSetInputPortMatrixDimensions(S,  37, 3, 5);
-    ssSetInputPortDataType(S, 37, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 37, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 37, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 37, 1); /*direct input signal access*/
-	
-	/* Input Port 38 */
-    ssSetInputPortMatrixDimensions(S,  38, 3, 5);
-    ssSetInputPortDataType(S, 38, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 38, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 38, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 38, 1); /*direct input signal access*/
-	
-	/* Input Port 39 */
-    ssSetInputPortMatrixDimensions(S,  39, 3, 5);
-    ssSetInputPortDataType(S, 39, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 39, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 39, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 39, 1); /*direct input signal access*/
-	
-	/* Input Port 40 */
-    ssSetInputPortMatrixDimensions(S,  40, 3, 5);
-    ssSetInputPortDataType(S, 40, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 40, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 40, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 40, 1); /*direct input signal access*/
-	
-	/* Input Port 41 */
-    ssSetInputPortMatrixDimensions(S,  41, 3, 5);
-    ssSetInputPortDataType(S, 41, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 41, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 41, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 41, 1); /*direct input signal access*/
-	
-	/* Input Port 42 */
-    ssSetInputPortMatrixDimensions(S,  42, 3, 5);
-    ssSetInputPortDataType(S, 42, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 42, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 42, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 42, 1); /*direct input signal access*/
-	
-	/* Input Port 43 */
-    ssSetInputPortMatrixDimensions(S,  43, 3, 5);
-    ssSetInputPortDataType(S, 43, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 43, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 43, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 43, 1); /*direct input signal access*/
-	
-	/* Input Port 44 */
-    ssSetInputPortMatrixDimensions(S,  44, 3, 5);
-    ssSetInputPortDataType(S, 44, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 44, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 44, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 44, 1); /*direct input signal access*/
-	
-	/* Input Port 45 */
-    ssSetInputPortMatrixDimensions(S,  45, 3, 5);
-    ssSetInputPortDataType(S, 45, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 45, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 45, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 45, 1); /*direct input signal access*/
-	
-	/* Input Port 46 */
-    ssSetInputPortMatrixDimensions(S,  46, 3, 5);
-    ssSetInputPortDataType(S, 46, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 46, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 46, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 46, 1); /*direct input signal access*/
-	
-	/* Input Port 47 */
-    ssSetInputPortMatrixDimensions(S,  47, 3, 5);
-    ssSetInputPortDataType(S, 47, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 47, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 47, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 47, 1); /*direct input signal access*/
-	
-	/* Input Port 48 */
-    ssSetInputPortMatrixDimensions(S,  48, 3, 5);
-    ssSetInputPortDataType(S, 48, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 48, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 48, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 48, 1); /*direct input signal access*/
-	
-	/* Input Port 49 */
-    ssSetInputPortMatrixDimensions(S,  49, 3, 5);
-    ssSetInputPortDataType(S, 49, SS_DOUBLE);
-    ssSetInputPortComplexSignal(S, 49, COMPLEX_NO); /* no complex signals suppported */
-    ssSetInputPortDirectFeedThrough(S, 49, 1); /* Feedthrough enabled */
-    ssSetInputPortRequiredContiguous(S, 49, 1); /*direct input signal access*/
  
 
 
@@ -544,46 +254,6 @@
 	const real_T *linear_model7 = (const real_T*) ssGetInputPortSignal(S,7);
 	const real_T *linear_model8 = (const real_T*) ssGetInputPortSignal(S,8);
 	const real_T *linear_model9 = (const real_T*) ssGetInputPortSignal(S,9);
-	const real_T *linear_model10 = (const real_T*) ssGetInputPortSignal(S,10);
-	const real_T *linear_model11 = (const real_T*) ssGetInputPortSignal(S,11);
-	const real_T *linear_model12 = (const real_T*) ssGetInputPortSignal(S,12);
-	const real_T *linear_model13 = (const real_T*) ssGetInputPortSignal(S,13);
-	const real_T *linear_model14 = (const real_T*) ssGetInputPortSignal(S,14);
-	const real_T *linear_model15 = (const real_T*) ssGetInputPortSignal(S,15);
-	const real_T *linear_model16 = (const real_T*) ssGetInputPortSignal(S,16);
-	const real_T *linear_model17 = (const real_T*) ssGetInputPortSignal(S,17);
-	const real_T *linear_model18 = (const real_T*) ssGetInputPortSignal(S,18);
-	const real_T *linear_model19 = (const real_T*) ssGetInputPortSignal(S,19);
-	const real_T *linear_model20 = (const real_T*) ssGetInputPortSignal(S,20);
-	const real_T *linear_model21 = (const real_T*) ssGetInputPortSignal(S,21);
-	const real_T *linear_model22 = (const real_T*) ssGetInputPortSignal(S,22);
-	const real_T *linear_model23 = (const real_T*) ssGetInputPortSignal(S,23);
-	const real_T *linear_model24 = (const real_T*) ssGetInputPortSignal(S,24);
-	const real_T *linear_model25 = (const real_T*) ssGetInputPortSignal(S,25);
-	const real_T *linear_model26 = (const real_T*) ssGetInputPortSignal(S,26);
-	const real_T *linear_model27 = (const real_T*) ssGetInputPortSignal(S,27);
-	const real_T *linear_model28 = (const real_T*) ssGetInputPortSignal(S,28);
-	const real_T *linear_model29 = (const real_T*) ssGetInputPortSignal(S,29);
-	const real_T *linear_model30 = (const real_T*) ssGetInputPortSignal(S,30);
-	const real_T *linear_model31 = (const real_T*) ssGetInputPortSignal(S,31);
-	const real_T *linear_model32 = (const real_T*) ssGetInputPortSignal(S,32);
-	const real_T *linear_model33 = (const real_T*) ssGetInputPortSignal(S,33);
-	const real_T *linear_model34 = (const real_T*) ssGetInputPortSignal(S,34);
-	const real_T *linear_model35 = (const real_T*) ssGetInputPortSignal(S,35);
-	const real_T *linear_model36 = (const real_T*) ssGetInputPortSignal(S,36);
-	const real_T *linear_model37 = (const real_T*) ssGetInputPortSignal(S,37);
-	const real_T *linear_model38 = (const real_T*) ssGetInputPortSignal(S,38);
-	const real_T *linear_model39 = (const real_T*) ssGetInputPortSignal(S,39);
-	const real_T *linear_model40 = (const real_T*) ssGetInputPortSignal(S,40);
-	const real_T *linear_model41 = (const real_T*) ssGetInputPortSignal(S,41);
-	const real_T *linear_model42 = (const real_T*) ssGetInputPortSignal(S,42);
-	const real_T *linear_model43 = (const real_T*) ssGetInputPortSignal(S,43);
-	const real_T *linear_model44 = (const real_T*) ssGetInputPortSignal(S,44);
-	const real_T *linear_model45 = (const real_T*) ssGetInputPortSignal(S,45);
-	const real_T *linear_model46 = (const real_T*) ssGetInputPortSignal(S,46);
-	const real_T *linear_model47 = (const real_T*) ssGetInputPortSignal(S,47);
-	const real_T *linear_model48 = (const real_T*) ssGetInputPortSignal(S,48);
-	const real_T *linear_model49 = (const real_T*) ssGetInputPortSignal(S,49);
 	
     real_T *output = (real_T*) ssGetOutputPortSignal(S,0);
 	
@@ -649,206 +319,6 @@
 		params.linear_model9[i] = (double) linear_model9[i]; 
 	}
 
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model10[i] = (double) linear_model10[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model11[i] = (double) linear_model11[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model12[i] = (double) linear_model12[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model13[i] = (double) linear_model13[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model14[i] = (double) linear_model14[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model15[i] = (double) linear_model15[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model16[i] = (double) linear_model16[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model17[i] = (double) linear_model17[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model18[i] = (double) linear_model18[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model19[i] = (double) linear_model19[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model20[i] = (double) linear_model20[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model21[i] = (double) linear_model21[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model22[i] = (double) linear_model22[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model23[i] = (double) linear_model23[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model24[i] = (double) linear_model24[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model25[i] = (double) linear_model25[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model26[i] = (double) linear_model26[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model27[i] = (double) linear_model27[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model28[i] = (double) linear_model28[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model29[i] = (double) linear_model29[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model30[i] = (double) linear_model30[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model31[i] = (double) linear_model31[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model32[i] = (double) linear_model32[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model33[i] = (double) linear_model33[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model34[i] = (double) linear_model34[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model35[i] = (double) linear_model35[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model36[i] = (double) linear_model36[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model37[i] = (double) linear_model37[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model38[i] = (double) linear_model38[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model39[i] = (double) linear_model39[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model40[i] = (double) linear_model40[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model41[i] = (double) linear_model41[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model42[i] = (double) linear_model42[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model43[i] = (double) linear_model43[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model44[i] = (double) linear_model44[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model45[i] = (double) linear_model45[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model46[i] = (double) linear_model46[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model47[i] = (double) linear_model47[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model48[i] = (double) linear_model48[i]; 
-	}
-
-	for( i=0; i<15; i++)
-	{ 
-		params.linear_model49[i] = (double) linear_model49[i]; 
-	}
-
 	
 
 	
Index: model/MPC_Project_FORCESPRO/interface/definitions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy\nimport ctypes\n\nname = \"MPC_Project_FORCESPRO\"\nrequires_callback = False\nlib = \"lib/MPC_Project_FORCESPRO.dll\"\nlib_static = \"lib/MPC_Project_FORCESPRO_static.lib\"\nc_header = \"include/MPC_Project_FORCESPRO.h\"\nnstages = 50\n\n# Parameter             | Type    | Scalar type      | Ctypes type    | Numpy type   | Shape     | Len\nparams = \\\n[(\"xinit\"               , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   1),    3),\n (\"linear_model1\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model2\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model3\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model4\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model5\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model6\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model7\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model8\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model9\"       , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model10\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model11\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model12\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model13\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model14\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model15\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model16\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model17\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model18\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model19\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model20\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model21\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model22\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model23\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model24\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model25\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model26\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model27\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model28\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model29\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model30\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model31\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model32\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model33\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model34\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model35\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model36\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model37\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model38\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model39\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model40\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model41\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model42\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model43\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model44\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model45\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model46\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model47\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model48\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15),\n (\"linear_model49\"      , \"dense\" , \"\"               , ctypes.c_double, numpy.float64, (  3,   5),   15)]\n\n# Output                | Type    | Scalar type      | Ctypes type    | Numpy type   | Shape     | Len\noutputs = \\\n[(\"output\"              , \"\"      , \"\"               , ctypes.c_double, numpy.float64,     (  5,),   50)]\n\n# Info Struct Fields\ninfo = \\\n[('it', ctypes.c_int32),\n('it2opt', ctypes.c_int32),\n('res_eq', ctypes.c_double),\n('res_ineq', ctypes.c_double),\n('pobj', ctypes.c_double),\n('dobj', ctypes.c_double),\n('dgap', ctypes.c_double),\n('rdgap', ctypes.c_double),\n('gradient_lag_norm', ctypes.c_double),\n('mu', ctypes.c_double),\n('mu_aff', ctypes.c_double),\n('sigma', ctypes.c_double),\n('lsit_aff', ctypes.c_int32),\n('lsit_cc', ctypes.c_int32),\n('step_aff', ctypes.c_double),\n('step_cc', ctypes.c_double),\n('solvetime', ctypes.c_double)\n]\n\n# Dynamics dimensions\n#   nvar    |   neq   |   dimh    |   dimp    |   diml    |   dimu    |   dimhl   |   dimhu    \ndynamics_dims = [\n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0), \n\t(5, 3, 0, 0, 0, 0, 0, 0)\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/definitions.py b/model/MPC_Project_FORCESPRO/interface/definitions.py
--- a/model/MPC_Project_FORCESPRO/interface/definitions.py	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/definitions.py	(date 1646676210269)
@@ -3,10 +3,10 @@
 
 name = "MPC_Project_FORCESPRO"
 requires_callback = False
-lib = "lib/MPC_Project_FORCESPRO.dll"
-lib_static = "lib/MPC_Project_FORCESPRO_static.lib"
+lib = "lib/libMPC_Project_FORCESPRO.so"
+lib_static = "lib/libMPC_Project_FORCESPRO.a"
 c_header = "include/MPC_Project_FORCESPRO.h"
-nstages = 50
+nstages = 10
 
 # Parameter             | Type    | Scalar type      | Ctypes type    | Numpy type   | Shape     | Len
 params = \
@@ -19,47 +19,7 @@
  ("linear_model6"       , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
  ("linear_model7"       , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
  ("linear_model8"       , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model9"       , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model10"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model11"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model12"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model13"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model14"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model15"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model16"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model17"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model18"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model19"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model20"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model21"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model22"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model23"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model24"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model25"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model26"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model27"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model28"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model29"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model30"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model31"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model32"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model33"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model34"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model35"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model36"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model37"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model38"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model39"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model40"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model41"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model42"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model43"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model44"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model45"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model46"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model47"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model48"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15),
- ("linear_model49"      , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15)]
+ ("linear_model9"       , "dense" , ""               , ctypes.c_double, numpy.float64, (  3,   5),   15)]
 
 # Output                | Type    | Scalar type      | Ctypes type    | Numpy type   | Shape     | Len
 outputs = \
@@ -89,46 +49,6 @@
 # Dynamics dimensions
 #   nvar    |   neq   |   dimh    |   dimp    |   diml    |   dimu    |   dimhl   |   dimhu    
 dynamics_dims = [
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
-	(5, 3, 0, 0, 0, 0, 0, 0), 
 	(5, 3, 0, 0, 0, 0, 0, 0), 
 	(5, 3, 0, 0, 0, 0, 0, 0), 
 	(5, 3, 0, 0, 0, 0, 0, 0), 
Index: model/MPC_Project_FORCESPRO/include/MPC_Project_FORCESPRO.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nMPC_Project_FORCESPRO : A fast customized optimization solver.\n\nCopyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\n\n\nThis software is intended for simulation and testing purposes only. \nUse of this software for any commercial purpose is prohibited.\n\nThis program is distributed in the hope that it will be useful.\nEMBOTECH makes NO WARRANTIES with respect to the use of the software \nwithout even the implied warranty of MERCHANTABILITY or FITNESS FOR A \nPARTICULAR PURPOSE. \n\nEMBOTECH shall not have any liability for any damage arising from the use\nof the software.\n\nThis Agreement shall exclusively be governed by and interpreted in \naccordance with the laws of Switzerland, excluding its principles\nof conflict of laws. The Courts of Zurich-City shall have exclusive \njurisdiction in case of any dispute.\n\n*/\n\n/* Generated by FORCESPRO v5.1.0 on Sunday, March 6, 2022 at 3:57:09 PM */\n#ifndef MPC_Project_FORCESPRO_H\n#define MPC_Project_FORCESPRO_H\n\n#ifndef SOLVER_STDIO_H\n#define SOLVER_STDIO_H\n#include <stdio.h>\n#endif\n\n\n#ifndef SOLVER_STANDARD_TYPES\n#define SOLVER_STANDARD_TYPES\n\ntypedef signed char solver_int8_signed;\ntypedef unsigned char solver_int8_unsigned;\ntypedef char solver_int8_default;\ntypedef signed short int solver_int16_signed;\ntypedef unsigned short int solver_int16_unsigned;\ntypedef short int solver_int16_default;\ntypedef signed int solver_int32_signed;\ntypedef unsigned int solver_int32_unsigned;\ntypedef int solver_int32_default;\ntypedef signed long long int solver_int64_signed;\ntypedef unsigned long long int solver_int64_unsigned;\ntypedef long long int solver_int64_default;\n\n#endif\n\n\n/* DATA TYPE ------------------------------------------------------------*/\ntypedef double MPC_Project_FORCESPRO_float;\n\n\ntypedef double MPC_Project_FORCESPROinterface_float;\n\n/* SOLVER SETTINGS ------------------------------------------------------*/\n\n/* MISRA-C compliance */\n#ifndef MISRA_C_MPC_Project_FORCESPRO\n#define MISRA_C_MPC_Project_FORCESPRO (0)\n#endif\n\n/* restrict code */\n#ifndef RESTRICT_CODE_MPC_Project_FORCESPRO\n#define RESTRICT_CODE_MPC_Project_FORCESPRO (0)\n#endif\n\n/* print level */\n#ifndef SET_PRINTLEVEL_MPC_Project_FORCESPRO\n#define SET_PRINTLEVEL_MPC_Project_FORCESPRO    (2)\n#endif\n\n/* timing */\n#ifndef SET_TIMING_MPC_Project_FORCESPRO\n#define SET_TIMING_MPC_Project_FORCESPRO    (1)\n#endif\n\n/* Numeric Warnings */\n/* #define PRINTNUMERICALWARNINGS */\n\n/* maximum number of iterations  */\n#define SET_MAXIT_MPC_Project_FORCESPRO         (200)\t\n\n/* scaling factor of line search (affine direction) */\n#define SET_LS_SCALE_AFF_MPC_Project_FORCESPRO  (MPC_Project_FORCESPRO_float)(0.9)      \n\n/* scaling factor of line search (combined direction) */\n#define SET_LS_SCALE_MPC_Project_FORCESPRO      (MPC_Project_FORCESPRO_float)(0.95)  \n\n/* minimum required step size in each iteration */\n#define SET_LS_MINSTEP_MPC_Project_FORCESPRO    (MPC_Project_FORCESPRO_float)(1E-08)\n\n/* maximum step size (combined direction) */\n#define SET_LS_MAXSTEP_MPC_Project_FORCESPRO    (MPC_Project_FORCESPRO_float)(0.995)\n\n/* desired relative duality gap */\n#define SET_ACC_RDGAP_MPC_Project_FORCESPRO     (MPC_Project_FORCESPRO_float)(0.0001)\n\n/* desired maximum residual on equality constraints */\n#define SET_ACC_RESEQ_MPC_Project_FORCESPRO     (MPC_Project_FORCESPRO_float)(1E-06)\n\n/* desired maximum residual on inequality constraints */\n#define SET_ACC_RESINEQ_MPC_Project_FORCESPRO   (MPC_Project_FORCESPRO_float)(1E-06)\n\n/* desired maximum violation of complementarity */\n#define SET_ACC_KKTCOMPL_MPC_Project_FORCESPRO  (MPC_Project_FORCESPRO_float)(1E-06)\n\n/* desired maximum violation of stationarity (only checked if value is > 0) */\n#define SET_ACC_KKTSTAT_MPC_Project_FORCESPRO  (MPC_Project_FORCESPRO_float)(-1)\n\n/* RETURN CODES----------------------------------------------------------*/\n/* solver has converged within desired accuracy */\n#define OPTIMAL_MPC_Project_FORCESPRO      (1)\n\n/* maximum number of iterations has been reached */\n#define MAXITREACHED_MPC_Project_FORCESPRO (0)\n\n/* solver has stopped due to a timeout */\n#define TIMEOUT_MPC_Project_FORCESPRO   (2)\n\n/* no progress in line search possible */\n#define NOPROGRESS_MPC_Project_FORCESPRO   (-7)\n\n/* fatal internal error - nans occurring */\n#define NAN_MPC_Project_FORCESPRO  (-10)\n\n/* invalid values in parameters */\n#define PARAM_VALUE_ERROR_MPC_Project_FORCESPRO   (-11)\n\n/* too small timeout given */\n#define INVALID_TIMEOUT_MPC_Project_FORCESPRO   (-12)\n\n/* thread error */\n#define THREAD_FAILURE_MPC_Project_FORCESPRO  (-98)\n\n/* locking mechanism error */\n#define LOCK_FAILURE_MPC_Project_FORCESPRO  (-99)\n\n/* licensing error - solver not valid on this machine */\n#define LICENSE_ERROR_MPC_Project_FORCESPRO  (-100)\n\n\n\n/* PARAMETERS -----------------------------------------------------------*/\n/* fill this with data before calling the solver! */\ntypedef struct MPC_Project_FORCESPRO_params\n{\n    /* vector of size 3 */\n    MPC_Project_FORCESPRO_float xinit[3];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model1[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model2[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model3[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model4[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model5[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model6[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model7[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model8[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model9[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model10[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model11[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model12[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model13[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model14[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model15[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model16[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model17[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model18[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model19[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model20[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model21[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model22[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model23[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model24[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model25[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model26[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model27[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model28[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model29[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model30[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model31[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model32[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model33[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model34[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model35[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model36[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model37[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model38[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model39[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model40[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model41[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model42[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model43[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model44[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model45[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model46[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model47[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model48[15];\n\n    /* matrix of size [3 x 5] (column major format) */\n    MPC_Project_FORCESPRO_float linear_model49[15];\n\n} MPC_Project_FORCESPRO_params;\n\n\n/* OUTPUTS --------------------------------------------------------------*/\n/* the desired variables are put here by the solver */\ntypedef struct MPC_Project_FORCESPRO_output\n{\n    /* vector of size 50 */\n    MPC_Project_FORCESPRO_float output[50];\n\n} MPC_Project_FORCESPRO_output;\n\n\n/* SOLVER INFO ----------------------------------------------------------*/\n/* diagnostic data from last interior point step */\ntypedef struct MPC_Project_FORCESPRO_info\n{\n    /* iteration number */\n    solver_int32_default it;\n\n\t/* number of iterations needed to optimality (branch-and-bound) */\n\tsolver_int32_default it2opt;\n\t\n    /* inf-norm of equality constraint residuals */\n    MPC_Project_FORCESPRO_float res_eq;\n\t\n    /* inf-norm of inequality constraint residuals */\n    MPC_Project_FORCESPRO_float res_ineq;\n\n    /* primal objective */\n    MPC_Project_FORCESPRO_float pobj;\t\n\t\n    /* dual objective */\n    MPC_Project_FORCESPRO_float dobj;\t\n\n    /* duality gap := pobj - dobj */\n    MPC_Project_FORCESPRO_float dgap;\t\t\n\t\n    /* relative duality gap := |dgap / pobj | */\n    MPC_Project_FORCESPRO_float rdgap;\t\t\n\n\t/* infinity norm of gradient of Lagrangian*/\n\tMPC_Project_FORCESPRO_float gradient_lag_norm;\n\n    /* duality measure */\n    MPC_Project_FORCESPRO_float mu;\n\n\t/* duality measure (after affine step) */\n    MPC_Project_FORCESPRO_float mu_aff;\n\t\n    /* centering parameter */\n    MPC_Project_FORCESPRO_float sigma;\n\t\n    /* number of backtracking line search steps (affine direction) */\n    solver_int32_default lsit_aff;\n    \n    /* number of backtracking line search steps (combined direction) */\n    solver_int32_default lsit_cc;\n    \n    /* step size (affine direction) */\n    MPC_Project_FORCESPRO_float step_aff;\n    \n    /* step size (combined direction) */\n    MPC_Project_FORCESPRO_float step_cc;    \n\n\t/* solvertime */\n\tMPC_Project_FORCESPRO_float solvetime;   \n\n} MPC_Project_FORCESPRO_info;\n\n\n\n\n\n\n\n\n\n/* SOLVER FUNCTION DEFINITION -------------------------------------------*/\n/* Time of Solver Generation: (UTC) Sunday, March 6, 2022 3:57:10 PM */\n/* User License expires on: (UTC) Monday, August 22, 2022 10:00:00 PM (approx.) (at the time of code generation) */\n/* Solver Static License expires on: (UTC) Monday, August 22, 2022 10:00:00 PM (approx.) */\n/* Solver Generation Request Id: 8a4e07a3-56e5-4bb2-b3ce-273159977509 */\n/* examine exitflag before using the result! */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nextern solver_int32_default MPC_Project_FORCESPRO_solve(MPC_Project_FORCESPRO_params *params, MPC_Project_FORCESPRO_output *output, MPC_Project_FORCESPRO_info *info, FILE *fs);\n\n;\n\n\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/include/MPC_Project_FORCESPRO.h b/model/MPC_Project_FORCESPRO/include/MPC_Project_FORCESPRO.h
--- a/model/MPC_Project_FORCESPRO/include/MPC_Project_FORCESPRO.h	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/include/MPC_Project_FORCESPRO.h	(date 1646676210269)
@@ -22,7 +22,7 @@
 
 */
 
-/* Generated by FORCESPRO v5.1.0 on Sunday, March 6, 2022 at 3:57:09 PM */
+/* Generated by FORCESPRO v5.1.0 on Monday, March 7, 2022 at 6:03:24 PM */
 #ifndef MPC_Project_FORCESPRO_H
 #define MPC_Project_FORCESPRO_H
 
@@ -179,126 +179,6 @@
     /* matrix of size [3 x 5] (column major format) */
     MPC_Project_FORCESPRO_float linear_model9[15];
 
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model10[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model11[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model12[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model13[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model14[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model15[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model16[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model17[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model18[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model19[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model20[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model21[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model22[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model23[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model24[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model25[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model26[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model27[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model28[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model29[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model30[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model31[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model32[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model33[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model34[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model35[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model36[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model37[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model38[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model39[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model40[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model41[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model42[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model43[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model44[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model45[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model46[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model47[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model48[15];
-
-    /* matrix of size [3 x 5] (column major format) */
-    MPC_Project_FORCESPRO_float linear_model49[15];
-
 } MPC_Project_FORCESPRO_params;
 
 
@@ -378,10 +258,10 @@
 
 
 /* SOLVER FUNCTION DEFINITION -------------------------------------------*/
-/* Time of Solver Generation: (UTC) Sunday, March 6, 2022 3:57:10 PM */
-/* User License expires on: (UTC) Monday, August 22, 2022 10:00:00 PM (approx.) (at the time of code generation) */
-/* Solver Static License expires on: (UTC) Monday, August 22, 2022 10:00:00 PM (approx.) */
-/* Solver Generation Request Id: 8a4e07a3-56e5-4bb2-b3ce-273159977509 */
+/* Time of Solver Generation: (UTC) Monday, March 7, 2022 6:03:24 PM */
+/* User License expires on: (UTC) Wednesday, June 1, 2022 10:00:00 PM (approx.) (at the time of code generation) */
+/* Solver Static License expires on: (UTC) Wednesday, June 1, 2022 10:00:00 PM (approx.) */
+/* Solver Generation Request Id: 405b5b8a-13bf-46fb-8757-8f0dba978523 */
 /* examine exitflag before using the result! */
 #ifdef __cplusplus
 extern "C" {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (MPC)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/.idea/misc.xml	(date 1646640862873)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (MPC)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.6 (cs285)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/MPC_final_project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <content url=\"file://$MODULE_DIR$/../../forces_pro_client\">\n      <sourceFolder url=\"file://$MODULE_DIR$/../../forces_pro_client\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9 (MPC)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/MPC_final_project.iml b/.idea/MPC_final_project.iml
--- a/.idea/MPC_final_project.iml	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/.idea/MPC_final_project.iml	(date 1646640862861)
@@ -5,7 +5,7 @@
     <content url="file://$MODULE_DIR$/../../forces_pro_client">
       <sourceFolder url="file://$MODULE_DIR$/../../forces_pro_client" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.9 (MPC)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.6 (cs285)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPROcompact_lib.mdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Model {\n  Name\t\t\t  \"MPC_Project_FORCESPRO\"\n  Version\t\t  8.0\n  MdlSubVersion\t\t  0\n  GraphicalInterface {\n    NumRootInports\t    0\n    NumRootOutports\t    0\n    ParameterArgumentNames  \"\"\n    ComputedModelVersion    \"1.2\"\n    NumModelReferences\t    0\n    NumTestPointedSignals   0\n  }\n  SavedCharacterEncoding  \"windows-1252\"\n  SaveDefaultBlockParams  on\n  ScopeRefreshTime\t  0.035000\n  OverrideScopeRefreshTime on\n  DisableAllScopes\t  off\n  DataTypeOverride\t  \"UseLocalSettings\"\n  DataTypeOverrideAppliesTo \"AllNumericTypes\"\n  MinMaxOverflowLogging\t  \"UseLocalSettings\"\n  MinMaxOverflowArchiveMode \"Overwrite\"\n  FPTRunName\t\t  \"Run 1\"\n  MaxMDLFileLineLength\t  120\n  Object {\n    $PropName\t\t    \"BdWindowsInfo\"\n    $ObjectID\t\t    1\n    $ClassName\t\t    \"Simulink.BDWindowsInfo\"\n    Object {\n      $PropName\t\t      \"WindowsInfo\"\n      $ObjectID\t\t      2\n      $ClassName\t      \"Simulink.WindowInfo\"\n      IsActive\t\t      [1]\n      Location\t\t      [385.0, 84.0, 816.0, 539.0]\n      Object {\n\t$PropName\t\t\"ModelBrowserInfo\"\n\t$ObjectID\t\t3\n\t$ClassName\t\t\"Simulink.ModelBrowserInfo\"\n\tVisible\t\t\t[1]\n\tDockPosition\t\t\"Left\"\n\tWidth\t\t\t[50]\n\tHeight\t\t\t[50]\n\tFilter\t\t\t[9]\n      }\n      Object {\n\t$PropName\t\t\"ExplorerBarInfo\"\n\t$ObjectID\t\t4\n\t$ClassName\t\t\"Simulink.ExplorerBarInfo\"\n\tVisible\t\t\t[1]\n      }\n      Object {\n\t$PropName\t\t\"EditorsInfo\"\n\t$ObjectID\t\t5\n\t$ClassName\t\t\"Simulink.EditorInfo\"\n\tIsActive\t\t[1]\n\tViewObjType\t\t\"SimulinkTopLevel\"\n\tLoadSaveID\t\t\"0\"\n\tExtents\t\t\t[569.0, 363.0]\n\tZoomFactor\t\t[1.0]\n\tOffset\t\t\t[0.0, 0.0]\n      }\n    }\n  }\n  Created\t\t  \"3/6/2022 3:57:10 PM\"\n  Creator\t\t  \"embotech AG\"\n  UpdateHistory\t\t  \"UpdateHistoryNever\"\n  ModifiedByFormat\t  \"%<Auto>\"\n  LastModifiedBy\t  \"embotech AG\"\n  ModifiedDateFormat\t  \"%<Auto>\"\n  LastModifiedDate\t  \"3/6/2022 3:57:10 PM\"\n  RTWModifiedTimeStamp\t  315310195\n  ModelVersionFormat\t  \"1.%<AutoIncrement:2>\"\n  ConfigurationManager\t  \"None\"\n  SampleTimeColors\t  off\n  SampleTimeAnnotations\t  off\n  LibraryLinkDisplay\t  \"disabled\"\n  WideLines\t\t  off\n  ShowLineDimensions\t  off\n  ShowPortDataTypes\t  off\n  ShowDesignRanges\t  off\n  ShowLoopsOnError\t  on\n  IgnoreBidirectionalLines off\n  ShowStorageClass\t  off\n  ShowTestPointIcons\t  on\n  ShowSignalResolutionIcons on\n  ShowViewerIcons\t  on\n  SortedOrder\t\t  off\n  ExecutionContextIcon\t  off\n  ShowLinearizationAnnotations on\n  BlockNameDataTip\t  off\n  BlockParametersDataTip  off\n  BlockDescriptionStringDataTip\toff\n  ToolBar\t\t  on\n  StatusBar\t\t  on\n  BrowserShowLibraryLinks off\n  BrowserLookUnderMasks\t  off\n  SimulationMode\t  \"normal\"\n  LinearizationMsg\t  \"none\"\n  Profile\t\t  off\n  ParamWorkspaceSource\t  \"MATLABWorkspace\"\n  AccelSystemTargetFile\t  \"accel.tlc\"\n  AccelTemplateMakefile\t  \"accel_default_tmf\"\n  AccelMakeCommand\t  \"make_rtw\"\n  TryForcingSFcnDF\t  off\n  Object {\n    $PropName\t\t    \"DataLoggingOverride\"\n    $ObjectID\t\t    6\n    $ClassName\t\t    \"Simulink.SimulationData.ModelLoggingInfo\"\n    model_\t\t    \"model_2012b\"\n    overrideMode_\t    [0.0]\n    Array {\n      Type\t\t      \"Cell\"\n      Dimension\t\t      1\n      Cell\t\t      \"model_2012b\"\n      PropName\t\t      \"logAsSpecifiedByModels_\"\n    }\n    Array {\n      Type\t\t      \"Cell\"\n      Dimension\t\t      1\n      Cell\t\t      []\n      PropName\t\t      \"logAsSpecifiedByModelsSSIDs_\"\n    }\n  }\n  RecordCoverage\t  off\n  CovPath\t\t  \"/\"\n  CovSaveName\t\t  \"covdata\"\n  CovMetricSettings\t  \"dw\"\n  CovNameIncrementing\t  off\n  CovHtmlReporting\t  on\n  CovForceBlockReductionOff on\n  covSaveCumulativeToWorkspaceVar on\n  CovSaveSingleToWorkspaceVar on\n  CovCumulativeVarName\t  \"covCumulativeData\"\n  CovCumulativeReport\t  off\n  CovReportOnPause\t  on\n  CovModelRefEnable\t  \"Off\"\n  CovExternalEMLEnable\t  off\n  ExtModeBatchMode\t  off\n  ExtModeEnableFloating\t  on\n  ExtModeTrigType\t  \"manual\"\n  ExtModeTrigMode\t  \"normal\"\n  ExtModeTrigPort\t  \"1\"\n  ExtModeTrigElement\t  \"any\"\n  ExtModeTrigDuration\t  1000\n  ExtModeTrigDurationFloating \"auto\"\n  ExtModeTrigHoldOff\t  0\n  ExtModeTrigDelay\t  0\n  ExtModeTrigDirection\t  \"rising\"\n  ExtModeTrigLevel\t  0\n  ExtModeArchiveMode\t  \"off\"\n  ExtModeAutoIncOneShot\t  off\n  ExtModeIncDirWhenArm\t  off\n  ExtModeAddSuffixToVar\t  off\n  ExtModeWriteAllDataToWs off\n  ExtModeArmWhenConnect\t  on\n  ExtModeSkipDownloadWhenConnect off\n  ExtModeLogAll\t\t  on\n  ExtModeAutoUpdateStatusClock on\n  BufferReuse\t\t  on\n  ShowModelReferenceBlockVersion off\n  ShowModelReferenceBlockIO off\n  Array {\n    Type\t\t    \"Handle\"\n    Dimension\t\t    1\n    Simulink.ConfigSet {\n      $ObjectID\t\t      7\n      Version\t\t      \"1.12.1\"\n      Array {\n\tType\t\t\t\"Handle\"\n\tDimension\t\t8\n\tSimulink.SolverCC {\n\t  $ObjectID\t\t  8\n\t  Version\t\t  \"1.12.1\"\n\t  StartTime\t\t  \"0.0\"\n\t  StopTime\t\t  \"10.0\"\n\t  AbsTol\t\t  \"auto\"\n\t  FixedStep\t\t  \"auto\"\n\t  InitialStep\t\t  \"auto\"\n\t  MaxNumMinSteps\t  \"-1\"\n\t  MaxOrder\t\t  5\n\t  ZcThreshold\t\t  \"auto\"\n\t  ConsecutiveZCsStepRelTol \"10*128*eps\"\n\t  MaxConsecutiveZCs\t  \"1000\"\n\t  ExtrapolationOrder\t  4\n\t  NumberNewtonIterations  1\n\t  MaxStep\t\t  \"auto\"\n\t  MinStep\t\t  \"auto\"\n\t  MaxConsecutiveMinStep\t  \"1\"\n\t  RelTol\t\t  \"1e-3\"\n\t  SolverMode\t\t  \"Auto\"\n\t  EnableConcurrentExecution off\n\t  ConcurrentTasks\t  off\n\t  Solver\t\t  \"ode45\"\n\t  SolverName\t\t  \"ode45\"\n\t  SolverJacobianMethodControl \"auto\"\n\t  ShapePreserveControl\t  \"DisableAll\"\n\t  ZeroCrossControl\t  \"UseLocalSettings\"\n\t  ZeroCrossAlgorithm\t  \"Nonadaptive\"\n\t  AlgebraicLoopSolver\t  \"TrustRegion\"\n\t  SolverResetMethod\t  \"Fast\"\n\t  PositivePriorityOrder\t  off\n\t  AutoInsertRateTranBlk\t  off\n\t  SampleTimeConstraint\t  \"Unconstrained\"\n\t  InsertRTBMode\t\t  \"Whenever possible\"\n\t}\n\tSimulink.DataIOCC {\n\t  $ObjectID\t\t  9\n\t  Version\t\t  \"1.12.1\"\n\t  Decimation\t\t  \"1\"\n\t  ExternalInput\t\t  \"[t, u]\"\n\t  FinalStateName\t  \"xFinal\"\n\t  InitialState\t\t  \"xInitial\"\n\t  LimitDataPoints\t  on\n\t  MaxDataPoints\t\t  \"1000\"\n\t  LoadExternalInput\t  off\n\t  LoadInitialState\t  off\n\t  SaveFinalState\t  off\n\t  SaveCompleteFinalSimState off\n\t  SaveFormat\t\t  \"Array\"\n\t  SignalLoggingSaveFormat \"Dataset\"\n\t  SaveOutput\t\t  on\n\t  SaveState\t\t  off\n\t  SignalLogging\t\t  on\n\t  DSMLogging\t\t  on\n\t  InspectSignalLogs\t  off\n\t  SaveTime\t\t  on\n\t  ReturnWorkspaceOutputs  off\n\t  StateSaveName\t\t  \"xout\"\n\t  TimeSaveName\t\t  \"tout\"\n\t  OutputSaveName\t  \"yout\"\n\t  SignalLoggingName\t  \"logsout\"\n\t  DSMLoggingName\t  \"dsmout\"\n\t  OutputOption\t\t  \"RefineOutputTimes\"\n\t  OutputTimes\t\t  \"[]\"\n\t  ReturnWorkspaceOutputsName \"out\"\n\t  Refine\t\t  \"1\"\n\t}\n\tSimulink.OptimizationCC {\n\t  $ObjectID\t\t  10\n\t  Version\t\t  \"1.12.1\"\n\t  Array {\n\t    Type\t\t    \"Cell\"\n\t    Dimension\t\t    8\n\t    Cell\t\t    \"BooleansAsBitfields\"\n\t    Cell\t\t    \"PassReuseOutputArgsAs\"\n\t    Cell\t\t    \"PassReuseOutputArgsThreshold\"\n\t    Cell\t\t    \"ZeroExternalMemoryAtStartup\"\n\t    Cell\t\t    \"ZeroInternalMemoryAtStartup\"\n\t    Cell\t\t    \"OptimizeModelRefInitCode\"\n\t    Cell\t\t    \"NoFixptDivByZeroProtection\"\n\t    Cell\t\t    \"UseSpecifiedMinMax\"\n\t    PropName\t\t    \"DisabledProps\"\n\t  }\n\t  BlockReduction\t  on\n\t  BooleanDataType\t  on\n\t  ConditionallyExecuteInputs on\n\t  InlineParams\t\t  off\n\t  UseIntDivNetSlope\t  off\n\t  UseFloatMulNetSlope\t  off\n\t  UseSpecifiedMinMax\t  off\n\t  InlineInvariantSignals  off\n\t  OptimizeBlockIOStorage  on\n\t  BufferReuse\t\t  on\n\t  EnhancedBackFolding\t  off\n\t  StrengthReduction\t  off\n\t  ExpressionFolding\t  on\n\t  BooleansAsBitfields\t  off\n\t  BitfieldContainerType\t  \"uint_T\"\n\t  EnableMemcpy\t\t  on\n\t  MemcpyThreshold\t  64\n\t  PassReuseOutputArgsAs\t  \"Structure reference\"\n\t  ExpressionDepthLimit\t  2147483647\n\t  FoldNonRolledExpr\t  on\n\t  LocalBlockOutputs\t  on\n\t  RollThreshold\t\t  5\n\t  SystemCodeInlineAuto\t  off\n\t  StateBitsets\t\t  off\n\t  DataBitsets\t\t  off\n\t  UseTempVars\t\t  off\n\t  ZeroExternalMemoryAtStartup on\n\t  ZeroInternalMemoryAtStartup on\n\t  InitFltsAndDblsToZero\t  off\n\t  NoFixptDivByZeroProtection off\n\t  EfficientFloat2IntCast  off\n\t  EfficientMapNaN2IntZero on\n\t  OptimizeModelRefInitCode off\n\t  LifeSpan\t\t  \"inf\"\n\t  MaxStackSize\t\t  \"Inherit from target\"\n\t  BufferReusableBoundary  on\n\t  SimCompilerOptimization \"Off\"\n\t  AccelVerboseBuild\t  off\n\t  ParallelExecutionInRapidAccelerator on\n\t}\n\tSimulink.DebuggingCC {\n\t  $ObjectID\t\t  11\n\t  Version\t\t  \"1.12.1\"\n\t  RTPrefix\t\t  \"error\"\n\t  ConsistencyChecking\t  \"none\"\n\t  ArrayBoundsChecking\t  \"none\"\n\t  SignalInfNanChecking\t  \"none\"\n\t  SignalRangeChecking\t  \"none\"\n\t  ReadBeforeWriteMsg\t  \"UseLocalSettings\"\n\t  WriteAfterWriteMsg\t  \"UseLocalSettings\"\n\t  WriteAfterReadMsg\t  \"UseLocalSettings\"\n\t  AlgebraicLoopMsg\t  \"warning\"\n\t  ArtificialAlgebraicLoopMsg \"warning\"\n\t  SaveWithDisabledLinksMsg \"warning\"\n\t  SaveWithParameterizedLinksMsg\t\"warning\"\n\t  CheckSSInitialOutputMsg on\n\t  UnderspecifiedInitializationDetection\t\"Classic\"\n\t  MergeDetectMultiDrivingBlocksExec \"none\"\n\t  CheckExecutionContextPreStartOutputMsg off\n\t  CheckExecutionContextRuntimeOutputMsg\toff\n\t  SignalResolutionControl \"UseLocalSettings\"\n\t  BlockPriorityViolationMsg \"warning\"\n\t  MinStepSizeMsg\t  \"warning\"\n\t  TimeAdjustmentMsg\t  \"none\"\n\t  MaxConsecutiveZCsMsg\t  \"error\"\n\t  MaskedZcDiagnostic\t  \"warning\"\n\t  IgnoredZcDiagnostic\t  \"warning\"\n\t  SolverPrmCheckMsg\t  \"warning\"\n\t  InheritedTsInSrcMsg\t  \"warning\"\n\t  DiscreteInheritContinuousMsg \"warning\"\n\t  MultiTaskDSMMsg\t  \"error\"\n\t  MultiTaskCondExecSysMsg \"error\"\n\t  MultiTaskRateTransMsg\t  \"error\"\n\t  SingleTaskRateTransMsg  \"none\"\n\t  TasksWithSamePriorityMsg \"warning\"\n\t  SigSpecEnsureSampleTimeMsg \"warning\"\n\t  CheckMatrixSingularityMsg \"none\"\n\t  IntegerOverflowMsg\t  \"warning\"\n\t  Int32ToFloatConvMsg\t  \"warning\"\n\t  ParameterDowncastMsg\t  \"error\"\n\t  ParameterOverflowMsg\t  \"error\"\n\t  ParameterUnderflowMsg\t  \"none\"\n\t  ParameterPrecisionLossMsg \"warning\"\n\t  ParameterTunabilityLossMsg \"warning\"\n\t  FixptConstUnderflowMsg  \"none\"\n\t  FixptConstOverflowMsg\t  \"none\"\n\t  FixptConstPrecisionLossMsg \"none\"\n\t  UnderSpecifiedDataTypeMsg \"none\"\n\t  UnnecessaryDatatypeConvMsg \"none\"\n\t  VectorMatrixConversionMsg \"none\"\n\t  InvalidFcnCallConnMsg\t  \"error\"\n\t  FcnCallInpInsideContextMsg \"EnableAllAsError\"\n\t  SignalLabelMismatchMsg  \"none\"\n\t  UnconnectedInputMsg\t  \"warning\"\n\t  UnconnectedOutputMsg\t  \"warning\"\n\t  UnconnectedLineMsg\t  \"warning\"\n\t  SFcnCompatibilityMsg\t  \"none\"\n\t  FrameProcessingCompatibilityMsg \"warning\"\n\t  UniqueDataStoreMsg\t  \"none\"\n\t  BusObjectLabelMismatch  \"warning\"\n\t  RootOutportRequireBusObject \"warning\"\n\t  AssertControl\t\t  \"UseLocalSettings\"\n\t  EnableOverflowDetection off\n\t  ModelReferenceIOMsg\t  \"none\"\n\t  ModelReferenceMultiInstanceNormalModeStructChecksumCheck \"error\"\n\t  ModelReferenceVersionMismatchMessage \"none\"\n\t  ModelReferenceIOMismatchMessage \"none\"\n\t  ModelReferenceCSMismatchMessage \"none\"\n\t  UnknownTsInhSupMsg\t  \"warning\"\n\t  ModelReferenceDataLoggingMessage \"warning\"\n\t  ModelReferenceSymbolNameMessage \"warning\"\n\t  ModelReferenceExtraNoncontSigs \"error\"\n\t  StateNameClashWarn\t  \"warning\"\n\t  SimStateInterfaceChecksumMismatchMsg \"warning\"\n\t  SimStateOlderReleaseMsg \"error\"\n\t  InitInArrayFormatMsg\t  \"warning\"\n\t  StrictBusMsg\t\t  \"ErrorLevel1\"\n\t  BusNameAdapt\t\t  \"WarnAndRepair\"\n\t  NonBusSignalsTreatedAsBus \"none\"\n\t  LoggingUnavailableSignals \"error\"\n\t  BlockIODiagnostic\t  \"none\"\n\t  SFUnusedDataAndEventsDiag \"warning\"\n\t  SFUnexpectedBacktrackingDiag \"warning\"\n\t  SFInvalidInputDataAccessInChartInitDiag \"warning\"\n\t  SFNoUnconditionalDefaultTransitionDiag \"warning\"\n\t  SFTransitionOutsideNaturalParentDiag \"warning\"\n\t  SFUnconditionalTransitionShadowingDiag \"warning\"\n\t  SFUndirectedBroadcastEventsDiag \"warning\"\n\t  SFTransitionActionBeforeConditionDiag\t\"warning\"\n\t}\n\tSimulink.HardwareCC {\n\t  $ObjectID\t\t  12\n\t  Version\t\t  \"1.12.1\"\n\t  ProdBitPerChar\t  8\n\t  ProdBitPerShort\t  16\n\t  ProdBitPerInt\t\t  32\n\t  ProdBitPerLong\t  32\n\t  ProdBitPerFloat\t  32\n\t  ProdBitPerDouble\t  64\n\t  ProdBitPerPointer\t  32\n\t  ProdLargestAtomicInteger \"Char\"\n\t  ProdLargestAtomicFloat  \"None\"\n\t  ProdIntDivRoundTo\t  \"Undefined\"\n\t  ProdEndianess\t\t  \"Unspecified\"\n\t  ProdWordSize\t\t  32\n\t  ProdShiftRightIntArith  on\n\t  ProdHWDeviceType\t  \"32-bit Generic\"\n\t  TargetBitPerChar\t  8\n\t  TargetBitPerShort\t  16\n\t  TargetBitPerInt\t  32\n\t  TargetBitPerLong\t  32\n\t  TargetBitPerFloat\t  32\n\t  TargetBitPerDouble\t  64\n\t  TargetBitPerPointer\t  32\n\t  TargetLargestAtomicInteger \"Char\"\n\t  TargetLargestAtomicFloat \"None\"\n\t  TargetShiftRightIntArith on\n\t  TargetIntDivRoundTo\t  \"Undefined\"\n\t  TargetEndianess\t  \"Unspecified\"\n\t  TargetWordSize\t  32\n\t  TargetTypeEmulationWarnSuppressLevel 0\n\t  TargetPreprocMaxBitsSint 32\n\t  TargetPreprocMaxBitsUint 32\n\t  TargetHWDeviceType\t  \"Specified\"\n\t  TargetUnknown\t\t  off\n\t  ProdEqTarget\t\t  on\n\t}\n\tSimulink.ModelReferenceCC {\n\t  $ObjectID\t\t  13\n\t  Version\t\t  \"1.12.1\"\n\t  UpdateModelReferenceTargets \"IfOutOfDateOrStructuralChange\"\n\t  CheckModelReferenceTargetMessage \"error\"\n\t  EnableParallelModelReferenceBuilds off\n\t  ParallelModelReferenceErrorOnInvalidPool on\n\t  ParallelModelReferenceMATLABWorkerInit \"None\"\n\t  ModelReferenceNumInstancesAllowed \"Multi\"\n\t  PropagateVarSize\t  \"Infer from blocks in model\"\n\t  ModelReferencePassRootInputsByReference on\n\t  ModelReferenceMinAlgLoopOccurrences off\n\t  PropagateSignalLabelsOutOfModel off\n\t  SupportModelReferenceSimTargetCustomCode off\n\t}\n\tSimulink.SFSimCC {\n\t  $ObjectID\t\t  14\n\t  Version\t\t  \"1.12.1\"\n\t  SFSimEnableDebug\t  on\n\t  SFSimOverflowDetection  on\n\t  SFSimEcho\t\t  on\n\t  SimBlas\t\t  on\n\t  SimCtrlC\t\t  on\n\t  SimExtrinsic\t\t  on\n\t  SimIntegrity\t\t  on\n\t  SimUseLocalCustomCode\t  off\n\t  SimParseCustomCode\t  on\n\t  SimBuildMode\t\t  \"sf_incremental_build\"\n\t}\n\tSimulink.RTWCC {\n\t  $BackupClass\t\t  \"Simulink.RTWCC\"\n\t  $ObjectID\t\t  15\n\t  Version\t\t  \"1.12.1\"\n\t  Array {\n\t    Type\t\t    \"Cell\"\n\t    Dimension\t\t    15\n\t    Cell\t\t    \"IncludeHyperlinkInReport\"\n\t    Cell\t\t    \"GenerateTraceInfo\"\n\t    Cell\t\t    \"GenerateTraceReport\"\n\t    Cell\t\t    \"GenerateTraceReportSl\"\n\t    Cell\t\t    \"GenerateTraceReportSf\"\n\t    Cell\t\t    \"GenerateTraceReportEml\"\n\t    Cell\t\t    \"PortableWordSizes\"\n\t    Cell\t\t    \"GenerateWebview\"\n\t    Cell\t\t    \"GenerateCodeMetricsReport\"\n\t    Cell\t\t    \"GenerateCodeReplacementReport\"\n\t    Cell\t\t    \"GenerateErtSFunction\"\n\t    Cell\t\t    \"CreateSILPILBlock\"\n\t    Cell\t\t    \"CodeExecutionProfiling\"\n\t    Cell\t\t    \"CodeProfilingSaveOptions\"\n\t    Cell\t\t    \"CodeProfilingInstrumentation\"\n\t    PropName\t\t    \"DisabledProps\"\n\t  }\n\t  SystemTargetFile\t  \"grt.tlc\"\n\t  GenCodeOnly\t\t  off\n\t  MakeCommand\t\t  \"make_rtw\"\n\t  GenerateMakefile\t  on\n\t  PackageGeneratedCodeAndArtifacts off\n\t  TemplateMakefile\t  \"grt_default_tmf\"\n\t  GenerateReport\t  off\n\t  SaveLog\t\t  off\n\t  RTWVerbose\t\t  on\n\t  RetainRTWFile\t\t  off\n\t  ProfileTLC\t\t  off\n\t  TLCDebug\t\t  off\n\t  TLCCoverage\t\t  off\n\t  TLCAssert\t\t  off\n\t  ProcessScriptMode\t  \"Default\"\n\t  ConfigurationMode\t  \"Optimized\"\n\t  ConfigAtBuild\t\t  off\n\t  RTWUseLocalCustomCode\t  off\n\t  RTWUseSimCustomCode\t  off\n\t  IncludeHyperlinkInReport off\n\t  LaunchReport\t\t  off\n\t  PortableWordSizes\t  off\n\t  GenerateErtSFunction\t  off\n\t  CreateSILPILBlock\t  \"None\"\n\t  CodeExecutionProfiling  off\n\t  CodeExecutionProfileVariable \"executionProfile\"\n\t  CodeProfilingSaveOptions \"SummaryOnly\"\n\t  CodeProfilingInstrumentation off\n\t  TargetLang\t\t  \"C\"\n\t  IncludeBusHierarchyInRTWFileBlockHierarchyMap\toff\n\t  IncludeERTFirstTime\t  off\n\t  GenerateTraceInfo\t  off\n\t  GenerateTraceReport\t  off\n\t  GenerateTraceReportSl\t  off\n\t  GenerateTraceReportSf\t  off\n\t  GenerateTraceReportEml  off\n\t  GenerateCodeInfo\t  off\n\t  GenerateWebview\t  off\n\t  GenerateCodeMetricsReport off\n\t  GenerateCodeReplacementReport\toff\n\t  RTWCompilerOptimization \"Off\"\n\t  CheckMdlBeforeBuild\t  \"Off\"\n\t  CustomRebuildMode\t  \"OnUpdate\"\n\t  Array {\n\t    Type\t\t    \"Handle\"\n\t    Dimension\t\t    2\n\t    Simulink.CodeAppCC {\n\t      $ObjectID\t\t      16\n\t      Version\t\t      \"1.12.1\"\n\t      Array {\n\t\tType\t\t\t\"Cell\"\n\t\tDimension\t\t22\n\t\tCell\t\t\t\"IgnoreCustomStorageClasses\"\n\t\tCell\t\t\t\"IgnoreTestpoints\"\n\t\tCell\t\t\t\"InsertBlockDesc\"\n\t\tCell\t\t\t\"InsertPolySpaceComments\"\n\t\tCell\t\t\t\"SFDataObjDesc\"\n\t\tCell\t\t\t\"MATLABFcnDesc\"\n\t\tCell\t\t\t\"SimulinkDataObjDesc\"\n\t\tCell\t\t\t\"DefineNamingRule\"\n\t\tCell\t\t\t\"SignalNamingRule\"\n\t\tCell\t\t\t\"ParamNamingRule\"\n\t\tCell\t\t\t\"InternalIdentifier\"\n\t\tCell\t\t\t\"InlinedPrmAccess\"\n\t\tCell\t\t\t\"CustomSymbolStr\"\n\t\tCell\t\t\t\"CustomSymbolStrGlobalVar\"\n\t\tCell\t\t\t\"CustomSymbolStrType\"\n\t\tCell\t\t\t\"CustomSymbolStrField\"\n\t\tCell\t\t\t\"CustomSymbolStrFcn\"\n\t\tCell\t\t\t\"CustomSymbolStrFcnArg\"\n\t\tCell\t\t\t\"CustomSymbolStrBlkIO\"\n\t\tCell\t\t\t\"CustomSymbolStrTmpVar\"\n\t\tCell\t\t\t\"CustomSymbolStrMacro\"\n\t\tCell\t\t\t\"ReqsInCode\"\n\t\tPropName\t\t\"DisabledProps\"\n\t      }\n\t      ForceParamTrailComments off\n\t      GenerateComments\t      on\n\t      IgnoreCustomStorageClasses on\n\t      IgnoreTestpoints\t      off\n\t      IncHierarchyInIds\t      off\n\t      MaxIdLength\t      31\n\t      PreserveName\t      off\n\t      PreserveNameWithParent  off\n\t      ShowEliminatedStatement off\n\t      OperatorAnnotations     off\n\t      IncAutoGenComments      off\n\t      SimulinkDataObjDesc     off\n\t      SFDataObjDesc\t      off\n\t      MATLABFcnDesc\t      off\n\t      IncDataTypeInIds\t      off\n\t      MangleLength\t      1\n\t      CustomSymbolStrGlobalVar \"$R$N$M\"\n\t      CustomSymbolStrType     \"$N$R$M\"\n\t      CustomSymbolStrField    \"$N$M\"\n\t      CustomSymbolStrFcn      \"$R$N$M$F\"\n\t      CustomSymbolStrFcnArg   \"rt$I$N$M\"\n\t      CustomSymbolStrBlkIO    \"rtb_$N$M\"\n\t      CustomSymbolStrTmpVar   \"$N$M\"\n\t      CustomSymbolStrMacro    \"$R$N$M\"\n\t      DefineNamingRule\t      \"None\"\n\t      ParamNamingRule\t      \"None\"\n\t      SignalNamingRule\t      \"None\"\n\t      InsertBlockDesc\t      off\n\t      InsertPolySpaceComments off\n\t      SimulinkBlockComments   on\n\t      MATLABSourceComments    off\n\t      EnableCustomComments    off\n\t      InternalIdentifier      \"Classic\"\n\t      InlinedPrmAccess\t      \"Literals\"\n\t      ReqsInCode\t      off\n\t      UseSimReservedNames     off\n\t    }\n\t    Simulink.GRTTargetCC {\n\t      $BackupClass\t      \"Simulink.TargetCC\"\n\t      $ObjectID\t\t      17\n\t      Version\t\t      \"1.12.1\"\n\t      Array {\n\t\tType\t\t\t\"Cell\"\n\t\tDimension\t\t15\n\t\tCell\t\t\t\"GeneratePreprocessorConditionals\"\n\t\tCell\t\t\t\"IncludeMdlTerminateFcn\"\n\t\tCell\t\t\t\"CombineOutputUpdateFcns\"\n\t\tCell\t\t\t\"SuppressErrorStatus\"\n\t\tCell\t\t\t\"ERTCustomFileBanners\"\n\t\tCell\t\t\t\"GenerateSampleERTMain\"\n\t\tCell\t\t\t\"GenerateTestInterfaces\"\n\t\tCell\t\t\t\"ModelStepFunctionPrototypeControlCompliant\"\n\t\tCell\t\t\t\"CPPClassGenCompliant\"\n\t\tCell\t\t\t\"MultiInstanceERTCode\"\n\t\tCell\t\t\t\"PurelyIntegerCode\"\n\t\tCell\t\t\t\"SupportComplex\"\n\t\tCell\t\t\t\"SupportAbsoluteTime\"\n\t\tCell\t\t\t\"SupportContinuousTime\"\n\t\tCell\t\t\t\"SupportNonInlinedSFcns\"\n\t\tPropName\t\t\"DisabledProps\"\n\t      }\n\t      TargetFcnLib\t      \"ansi_tfl_table_tmw.mat\"\n\t      TargetLibSuffix\t      \"\"\n\t      TargetPreCompLibLocation \"\"\n\t      CodeReplacementLibrary  \"ANSI_C\"\n\t      UtilityFuncGeneration   \"Auto\"\n\t      ERTMultiwordTypeDef     \"System defined\"\n\t      ERTMultiwordLength      256\n\t      MultiwordLength\t      2048\n\t      GenerateFullHeader      on\n\t      GenerateSampleERTMain   off\n\t      GenerateTestInterfaces  off\n\t      IsPILTarget\t      off\n\t      ModelReferenceCompliant on\n\t      ParMdlRefBuildCompliant on\n\t      CompOptLevelCompliant   on\n\t      ConcurrentExecutionCompliant on\n\t      IncludeMdlTerminateFcn  on\n\t      GeneratePreprocessorConditionals \"Disable all\"\n\t      CombineOutputUpdateFcns on\n\t      CombineSignalStateStructs\toff\n\t      SuppressErrorStatus     off\n\t      ERTFirstTimeCompliant   off\n\t      IncludeFileDelimiter    \"Auto\"\n\t      ERTCustomFileBanners    off\n\t      SupportAbsoluteTime     on\n\t      LogVarNameModifier      \"rt_\"\n\t      MatFileLogging\t      on\n\t      MultiInstanceERTCode    off\n\t      SupportNonFinite\t      on\n\t      SupportComplex\t      on\n\t      PurelyIntegerCode\t      off\n\t      SupportContinuousTime   on\n\t      SupportNonInlinedSFcns  on\n\t      SupportVariableSizeSignals off\n\t      EnableShiftOperators    on\n\t      ParenthesesLevel\t      \"Nominal\"\n\t      ModelStepFunctionPrototypeControlCompliant off\n\t      CPPClassGenCompliant    off\n\t      AutosarCompliant\t      off\n\t      GRTInterface\t      off\n\t      UseMalloc\t\t      off\n\t      ExtMode\t\t      off\n\t      ExtModeStaticAlloc      off\n\t      ExtModeTesting\t      off\n\t      ExtModeStaticAllocSize  1000000\n\t      ExtModeTransport\t      0\n\t      ExtModeMexFile\t      \"ext_comm\"\n\t      ExtModeIntrfLevel\t      \"Level1\"\n\t      RTWCAPISignals\t      off\n\t      RTWCAPIParams\t      off\n\t      RTWCAPIStates\t      off\n\t      RTWCAPIRootIO\t      off\n\t      GenerateASAP2\t      off\n\t    }\n\t    PropName\t\t    \"Components\"\n\t  }\n\t}\n\tPropName\t\t\"Components\"\n      }\n      Name\t\t      \"Configuration\"\n      CurrentDlgPage\t      \"Solver\"\n      ConfigPrmDlgPosition     [ 520, 225, 1400, 855 ] \n    }\n    PropName\t\t    \"ConfigurationSets\"\n  }\n  Simulink.ConfigSet {\n    $PropName\t\t    \"ActiveConfigurationSet\"\n    $ObjectID\t\t    7\n  }\n  Object {\n    $PropName\t\t    \"DataTransfer\"\n    $ObjectID\t\t    18\n    $ClassName\t\t    \"Simulink.GlobalDataTransfer\"\n    DefaultTransitionBetweenSyncTasks \"Ensure deterministic transfer (maximum delay)\"\n    DefaultTransitionBetweenAsyncTasks \"Ensure data integrity only\"\n    DefaultTransitionBetweenContTasks \"Ensure deterministic transfer (minimum delay)\"\n    DefaultExtrapolationMethodBetweenContTasks \"None\"\n    AutoInsertRateTranBlk   [0]\n  }\n  ExplicitPartitioning\t  off\n  BlockDefaults {\n    ForegroundColor\t    \"black\"\n    BackgroundColor\t    \"white\"\n    DropShadow\t\t    off\n    NamePlacement\t    \"normal\"\n    FontName\t\t    \"Helvetica\"\n    FontSize\t\t    10\n    FontWeight\t\t    \"normal\"\n    FontAngle\t\t    \"normal\"\n    ShowName\t\t    on\n    BlockRotation\t    0\n    BlockMirror\t\t    off\n  }\n  AnnotationDefaults {\n    HorizontalAlignment\t    \"center\"\n    VerticalAlignment\t    \"middle\"\n    ForegroundColor\t    \"black\"\n    BackgroundColor\t    \"white\"\n    DropShadow\t\t    off\n    FontName\t\t    \"Helvetica\"\n    FontSize\t\t    10\n    FontWeight\t\t    \"normal\"\n    FontAngle\t\t    \"normal\"\n    UseDisplayTextAsClickCallback off\n  }\n  LineDefaults {\n    FontName\t\t    \"Helvetica\"\n    FontSize\t\t    9\n    FontWeight\t\t    \"normal\"\n    FontAngle\t\t    \"normal\"\n  }\n  MaskDefaults {\n    SelfModifiable\t    \"off\"\n    IconFrame\t\t    \"on\"\n    IconOpaque\t\t    \"on\"\n    RunInitForIconRedraw    \"off\"\n    IconRotate\t\t    \"none\"\n    PortRotate\t\t    \"default\"\n    IconUnits\t\t    \"autoscale\"\n  }\n  MaskParameterDefaults {\n    Evaluate\t\t    \"on\"\n    Tunable\t\t    \"on\"\n    NeverSave\t\t    \"off\"\n    Internal\t\t    \"off\"\n    ReadOnly\t\t    \"off\"\n    Enabled\t\t    \"on\"\n    Visible\t\t    \"on\"\n    ToolTip\t\t    \"on\"\n  }\n  BlockParameterDefaults {\n    Block {\n      BlockType\t\t      S-Function\n      FunctionName\t      \"system\"\n      SFunctionModules\t      \"''\"\n      PortCounts\t      \"[]\"\n      SFunctionDeploymentMode off\n    }\n  }\n  System {\n    Name\t\t    \"MPC_Project_FORCESPRO\"\n    Location\t\t    [385, 84, 1201, 623]\n    Open\t\t    on\n    ModelBrowserVisibility  on\n    ModelBrowserWidth\t    200\n    ScreenColor\t\t    \"white\"\n    PaperOrientation\t    \"landscape\"\n    PaperPositionMode\t    \"auto\"\n    PaperType\t\t    \"A4\"\n    PaperUnits\t\t    \"centimeters\"\n    TiledPaperMargins\t    [1.270000, 1.270000, 1.270000, 1.270000]\n    TiledPageScale\t    1\n    ShowPageBoundaries\t    off\n    ZoomFactor\t\t    \"100\"\n    ReportName\t\t    \"simulink-default.rpt\"\n    SIDHighWatermark\t    \"1\"\n    Block {\n      BlockType\t\t      S-Function\n      Name\t\t      \"MPC_Project_FORCESPRO\"\n      SID\t\t      \"1\"\n      Ports\t\t      [2, 1]\n      Position\t\t      [170, 99, 650, 180]\n      ZOrder\t\t      1\n      FunctionName\t      \"MPC_Project_FORCESPRO_simulinkBlockcompact\"\n\t  SFunctionModules\t      \"MPC_Project_FORCESPRO MPC_Project_FORCESPRO_simulinkBlockcompact\"\n      EnableBusSupport\t      off\n      Object {\n\t$PropName\t\t\"MaskObject\"\n\t$ObjectID\t\t19\n\t$ClassName\t\t\"Simulink.Mask\"\n\tType\t\t\t\"MPC_Project_FORCESPRO_simulinkBlockcompact\"\n\tDescription\t\t\" ---- Simulink block encapsulating your customized solver MPC_Project_FORCESPRO ---- \\n\\n\"\n\t\t\t\t\"MPC_Project_FORCESPRO : A fast customized optimization solver.\\n\"\n\"\\n\"\n\"Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.\\n\"\n\"\\n\"\n\"\\n\"\n\"This software is intended for simulation and testing purposes only. \\n\"\n\"Use of this software for any commercial purpose is prohibited.\\n\"\n\"\\n\"\n\"This program is distributed in the hope that it will be useful.\\n\"\n\"EMBOTECH makes NO WARRANTIES with respect to the use of the software \\n\"\n\"without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \\n\"\n\"PARTICULAR PURPOSE. \\n\"\n\"\\n\"\n\"EMBOTECH shall not have any liability for any damage arising from the use\\n\"\n\"of the software.\\n\"\n\"\\n\"\n\"This Agreement shall exclusively be governed by and interpreted in \\n\"\n\"accordance with the laws of Switzerland, excluding its principles\\n\"\n\"of conflict of laws. The Courts of Zurich-City shall have exclusive \\n\"\n\"jurisdiction in case of any dispute.\\n\"\n\"\\n\"\n\n\tHelp\t\t\t\"MPC_Project_FORCESPRO_simulinkBlockcompact provides an easy Simulink interface for simulating your customized solver.  \\n\"\n\t\"\\nOUTPUTS = MPC_Project_FORCESPRO(INPUTS) solves an optimization problem where:\\n\\n\"\n\t\"INPUTS:\\n\"\n\t\" - C - matrix of size 3x245\\n \"\n\" - xinit - column vector of length 3\\n \"\n\n\t\"\\nOUTPUTS:\\n\"\n\t\" - outputs - column vector of length 50\\n \"\n\n\t\"\\n For more information, see https://forces.embotech.com/Documentation/graphical_interface/index.html \\n \"\n\n\tDisplay\t\t\t\"port_label('input', 1, 'C') \\n  \"\n\"port_label('input', 2, 'xinit') \\n  \"\n\"port_label('output', 1, 'outputs') \\n \"\n\"if( exist('FORCES_PRO_Logo.jpg','file') ), image(imread('FORCES_PRO_Logo.jpg'),'center','on'); elseif( exist(['interface',filesep,'FORCES_PRO_Logo.jpg'],'file') ), image(imread(['interface',filesep,'FORCES_PRO_Logo.jpg']),'center','on'); elseif( exist(['MPC_Project_FORCESPRO',filesep,'interface',filesep,'FORCES_PRO_Logo.jpg'],'file') ), image(imread(['MPC_Project_FORCESPRO',filesep,'interface',filesep,'FORCES_PRO_Logo.jpg']),'center','on'); end \\n \"\n\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPROcompact_lib.mdl b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPROcompact_lib.mdl
--- a/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPROcompact_lib.mdl	(revision a63006421b4d5230597b9c37329290307f0cbd21)
+++ b/model/MPC_Project_FORCESPRO/interface/MPC_Project_FORCESPROcompact_lib.mdl	(date 1646676210269)
@@ -60,13 +60,13 @@
       }
     }
   }
-  Created		  "3/6/2022 3:57:10 PM"
+  Created		  "3/7/2022 6:03:24 PM"
   Creator		  "embotech AG"
   UpdateHistory		  "UpdateHistoryNever"
   ModifiedByFormat	  "%<Auto>"
   LastModifiedBy	  "embotech AG"
   ModifiedDateFormat	  "%<Auto>"
-  LastModifiedDate	  "3/6/2022 3:57:10 PM"
+  LastModifiedDate	  "3/7/2022 6:03:24 PM"
   RTWModifiedTimeStamp	  315310195
   ModelVersionFormat	  "1.%<AutoIncrement:2>"
   ConfigurationManager	  "None"
@@ -804,7 +804,7 @@
 	Help			"MPC_Project_FORCESPRO_simulinkBlockcompact provides an easy Simulink interface for simulating your customized solver.  \n"
 	"\nOUTPUTS = MPC_Project_FORCESPRO(INPUTS) solves an optimization problem where:\n\n"
 	"INPUTS:\n"
-	" - C - matrix of size 3x245\n "
+	" - C - matrix of size 3x45\n "
 " - xinit - column vector of length 3\n "
 
 	"\nOUTPUTS:\n"
